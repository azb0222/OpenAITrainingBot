{"docstore/metadata": {"d02f4124-11b3-4954-b951-e0560ca91e7a": {"doc_hash": "c0109282bb8a7984d555592147695401bb3b47b6ff5df7e43a82c2194380426a"}, "52cc7802-6864-4534-80dc-3256f1299ed0": {"doc_hash": "1d4107b41ba27158a08c14082b9e77fab41b6411092f815eb5b2de96a8dda3d6", "ref_doc_id": "d02f4124-11b3-4954-b951-e0560ca91e7a"}, "c210e5df-39ca-4906-ae6e-cb42c67eaadd": {"doc_hash": "22ffcd9591ad4ced8abb1e3f6b4435201ef72d5d1af6ef323b81de0afe6512a1", "ref_doc_id": "d02f4124-11b3-4954-b951-e0560ca91e7a"}, "baca0909-8730-42f0-9ea7-48d9598df348": {"doc_hash": "33687b42d718be377ac5c8d0eb89fa5c5466efa04a4990a32981e9f39720fc62", "ref_doc_id": "d02f4124-11b3-4954-b951-e0560ca91e7a"}}, "docstore/data": {"52cc7802-6864-4534-80dc-3256f1299ed0": {"__data__": {"id_": "52cc7802-6864-4534-80dc-3256f1299ed0", "embedding": null, "metadata": {"title": "", "category": "Notecard Communication Without A Library", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-communication-without-a-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d02f4124-11b3-4954-b951-e0560ca91e7a", "node_type": null, "metadata": {"title": "", "category": "Notecard Communication Without A Library", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-communication-without-a-library/"}, "hash": "c0109282bb8a7984d555592147695401bb3b47b6ff5df7e43a82c2194380426a"}, "3": {"node_id": "c210e5df-39ca-4906-ae6e-cb42c67eaadd", "node_type": null, "metadata": {"title": "", "category": "Notecard Communication Without A Library", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-communication-without-a-library/"}, "hash": "22ffcd9591ad4ced8abb1e3f6b4435201ef72d5d1af6ef323b81de0afe6512a1"}}, "hash": "1d4107b41ba27158a08c14082b9e77fab41b6411092f815eb5b2de96a8dda3d6", "text": "Notecard Communication Without a Library\n\nRaw serial transactions with the Notecard allow you to communicate with the Notecard in the most direct and efficient way possible. This technique can be employeed when there are memory or language constraints on the device.\n\nThese raw transactions are also the foundation of creating native language support libraries, such as those found in our firmware libraries overview\n\nWarning\n\nWhen NOT using a native firmware library, you may unintentionally send requests to the Notecard so fast that you overflow the 1500 byte buffer used to receive data (whether it be I2C, Serial, or UART). The solution is to pause 250ms after every ~250 bytes sent, and to ensure the total size of each NDJSON object sent is no more than 8KB.\n\nBasic Communications\nVocabulary\nchunk - a string or \"chunk\" of data less than 256 bytes\npolling delay - the time between consecutive Notecard requests\nsegment - a series of chunks less than or equal to 256 bytes\nTiming\n\nThe Notecard serial transactions, both UART and I2C, are implemented without flow control. As such, certain timing requirements must be observed to ensure the integrity of serial communications with the Notecard.\n\nEach chunk should observe a 20ms delay.\nEach segment requires a 250ms delay.\nA polling delay of 25ms should be respected to allow the Notecard time to process a request and generate a response.\nArduino Example\n\nFirst, let's alias the Serial interfaces at the top of your program in the Arduino IDE. The first, Serial will be used to log information to the Serial Monitor of the Arduino IDE. The second, Serial1 represents the connection between your Arduino and Notecard. Paste the following code at the top of your sketch:\n\nCOPY\n#define usbSerial Serial\n#define txRxPinsSerial Serial1\n\nNext, add a", "start_char_idx": 0, "end_char_idx": 1799, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c210e5df-39ca-4906-ae6e-cb42c67eaadd": {"__data__": {"id_": "c210e5df-39ca-4906-ae6e-cb42c67eaadd", "embedding": null, "metadata": {"title": "", "category": "Notecard Communication Without A Library", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-communication-without-a-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d02f4124-11b3-4954-b951-e0560ca91e7a", "node_type": null, "metadata": {"title": "", "category": "Notecard Communication Without A Library", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-communication-without-a-library/"}, "hash": "c0109282bb8a7984d555592147695401bb3b47b6ff5df7e43a82c2194380426a"}, "2": {"node_id": "52cc7802-6864-4534-80dc-3256f1299ed0", "node_type": null, "metadata": {"title": "", "category": "Notecard Communication Without A Library", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-communication-without-a-library/"}, "hash": "1d4107b41ba27158a08c14082b9e77fab41b6411092f815eb5b2de96a8dda3d6"}, "3": {"node_id": "baca0909-8730-42f0-9ea7-48d9598df348", "node_type": null, "metadata": {"title": "", "category": "Notecard Communication Without A Library", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-communication-without-a-library/"}, "hash": "33687b42d718be377ac5c8d0eb89fa5c5466efa04a4990a32981e9f39720fc62"}}, "hash": "22ffcd9591ad4ced8abb1e3f6b4435201ef72d5d1af6ef323b81de0afe6512a1", "text": "usbSerial Serial\n#define txRxPinsSerial Serial1\n\nNext, add a definition for your ProductUID using the value you specified when creating your Notehub project.\n\nCOPY\n#define NOTE_PRODUCT_UID \"com.your-company:your_product\"\n\nIn the setup() function, initialize the usbSerial object.\n\nCOPY\nusbSerial.begin(115200);\nwhile (!usbSerial) {\n   ; // wait for serial port to connect. Needed for native USB\n}\nusbSerial.println(\"Starting...\");\n\nAlso in setup, initialize the txRxPinsSerial object, using a baud rate of 9600, and send a newline (\\n) to clear out any pending data on the device.\n\nCOPY\ntxRxPinsSerial.begin(9600);\ntxRxPinsSerial.println(\"\\n\");\ndelay(250);\n\nNow, we'll configure the Notecard. This one-time operation also belongs in the setup() function. We will use the hub.set request to associate this Notecard with the ProductUID of your project, as well as set the Notecard to operate in continuous mode (which indicates that the device should immediately make a connection to Notehub and keep it active).\n\nCOPY\ntxRxPinsSerial.println(\"{\\\"req\\\":\\\"hub.set\\\",\\\"product\\\":\\\"\" NOTE_PRODUCT_UID \"\\\",\\\"mode\\\":\\\"continuous\\\"}\");\n\nFinally, we'll add a while loop to setup to read the Notecard's response, and display the result to the Arduino terminal.\n\nCOPY\ndelay(250); // wait for the Notecard to respond\nwhile (txRxPinsSerial.available() > 0) {\n    char incomingByte = txRxPinsSerial.read();\n    if (incomingByte != '\\r' && incomingByte != '\\n') {\n    ", "start_char_idx": 1745, "end_char_idx": 3197, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "baca0909-8730-42f0-9ea7-48d9598df348": {"__data__": {"id_": "baca0909-8730-42f0-9ea7-48d9598df348", "embedding": null, "metadata": {"title": "", "category": "Notecard Communication Without A Library", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-communication-without-a-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d02f4124-11b3-4954-b951-e0560ca91e7a", "node_type": null, "metadata": {"title": "", "category": "Notecard Communication Without A Library", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-communication-without-a-library/"}, "hash": "c0109282bb8a7984d555592147695401bb3b47b6ff5df7e43a82c2194380426a"}, "2": {"node_id": "c210e5df-39ca-4906-ae6e-cb42c67eaadd", "node_type": null, "metadata": {"title": "", "category": "Notecard Communication Without A Library", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-communication-without-a-library/"}, "hash": "22ffcd9591ad4ced8abb1e3f6b4435201ef72d5d1af6ef323b81de0afe6512a1"}}, "hash": "33687b42d718be377ac5c8d0eb89fa5c5466efa04a4990a32981e9f39720fc62", "text": "'\\r' && incomingByte != '\\n') {\n       usbSerial.print(incomingByte);\n    }\n}\nusbSerial.println();\n\nNow, it's time to watch the logs and validate the firmware. Open the Serial Monitor, by selecting Tools > Serial Monitor from the menu. The default baud rate is 9600 baud, so be sure to select 115200 baud from the drop down menu.\n\nClick the upload button (right arrow icon) to save and flash the firmware to your device.\n\nIf you haven't saved your file yet, you will be prompted to do so. Name your sketch (for example, nano-no-library), and click Save. Once your device is flashed and comes back online, check the serial monitor to confirm your Notecard has been properly configured.\n\nCOPY\nStarting...\n{}\nSummary\n\nAs you can see, creating such a library is as simple as communicating with the Notecard itself. However, timing is an important consideration that cannot be easily reasoned about. This document aims to close that knowledge gap and enable the creation of these libraries and so much more.\n\nAdditional Resources\nGitHub: note-c Official C SDK\nGitHub: note-python Official Python SDK\nGitHub: note-tutorial Arduino Nano with no library\nGitHub: note-tutorial ESP32 with no library\nCan we improve this page? Send us feedback", "start_char_idx": 3216, "end_char_idx": 4448, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"d02f4124-11b3-4954-b951-e0560ca91e7a": {"node_ids": ["52cc7802-6864-4534-80dc-3256f1299ed0", "c210e5df-39ca-4906-ae6e-cb42c67eaadd", "baca0909-8730-42f0-9ea7-48d9598df348"], "metadata": {"title": "", "category": "Notecard Communication Without A Library", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-communication-without-a-library/"}}}}