{"docstore/metadata": {"d3207a7a-bb88-4699-aa59-771c404c924a": {"doc_hash": "5ccf2203338f5c5cc3121a70c37abc4e7e164c5899b4cad2b783adf17d00b65c"}, "34bd9efe-4cbe-4985-98bb-1f469c6333cd": {"doc_hash": "c3ec0a750859576dacfdac187b74dc375471cb6ff843d61a7e6a51b8abcbd94e", "ref_doc_id": "d3207a7a-bb88-4699-aa59-771c404c924a"}, "08628442-7062-4f4c-aeed-8f98916a3875": {"doc_hash": "a97d7d7a7379b7af3cb9c60fdbe21aa8b2acf3df3cd5b2f40096d7c76679a90d", "ref_doc_id": "d3207a7a-bb88-4699-aa59-771c404c924a"}, "bb2a7fb4-5858-4e33-b2ba-127e3b4b9ada": {"doc_hash": "2f0c85cf36e9bdb4ae787c01b362cc3e81db890440c653ffec60741d29035e12", "ref_doc_id": "d3207a7a-bb88-4699-aa59-771c404c924a"}, "29cb27a3-0eca-4bab-a77f-d2408b038485": {"doc_hash": "9994bd5abeb72797927ecb5d529b019999e2d4f996d6361add0d5add5a1aa9aa", "ref_doc_id": "d3207a7a-bb88-4699-aa59-771c404c924a"}, "e1920eb3-d70f-40f3-b3cf-16060289c2dd": {"doc_hash": "7677cdc55488c73b4dbe220ba2da24dde9fbc4b6274141943988cd4af9eac09c", "ref_doc_id": "d3207a7a-bb88-4699-aa59-771c404c924a"}, "52fa2542-2a33-448b-9abe-185562724bf2": {"doc_hash": "96356d7f6652bf31ab52680cc6bb36f647d94aab2ada1e1a02cf550bbf02e308", "ref_doc_id": "d3207a7a-bb88-4699-aa59-771c404c924a"}, "ad7e95ce-c582-4891-9256-595411057c77": {"doc_hash": "a45b087f74595fd2958e3f56f66b2a50df223e8693bd1201c3612445cab2ebde", "ref_doc_id": "d3207a7a-bb88-4699-aa59-771c404c924a"}}, "docstore/data": {"34bd9efe-4cbe-4985-98bb-1f469c6333cd": {"__data__": {"id_": "34bd9efe-4cbe-4985-98bb-1f469c6333cd", "embedding": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d3207a7a-bb88-4699-aa59-771c404c924a", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "5ccf2203338f5c5cc3121a70c37abc4e7e164c5899b4cad2b783adf17d00b65c"}, "3": {"node_id": "08628442-7062-4f4c-aeed-8f98916a3875", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "a97d7d7a7379b7af3cb9c60fdbe21aa8b2acf3df3cd5b2f40096d7c76679a90d"}}, "hash": "c3ec0a750859576dacfdac187b74dc375471cb6ff843d61a7e6a51b8abcbd94e", "text": "Attention Pin (ATTN) Guide\n\nThere are several situations where you may need your embedded application to be alerted the instant the Notecard receives new information. This guide is designed to aid you in creating an interactive example to demonstrate how to leverage this feature of the Notecard. The goal of this example is to solidify and confirm your understanding of the Notecard's attention interrupt and its behavior.\n\nAt a high-level, your program will:\n\nRespond to a button click.\nAuthor a request to the Notecard; instructing it to fire after a few seconds.\nRespond to interrupts and update an LED to visualize the behavior of the ATTN interrupt.\n\nDuring the course of this example, you will learn:\n\nHow to configure the Notecard's attention interrupt.\nHow to use the Notecarrier-AF's built-in button from your program.\nHow to use the Huzzah32's built-in LED from your program.\nHow to write and handle an interrupt service routine (ISR) on the ESP32.\nNote\n\nAlthough this guide uses an Adafruit Huzzah32 microcontroller and a Notecarrier-AF to show how the Notecard's attention pin works, you can use any combination of ESP32 microcontroller and Notecarrier to complete this guide. Just note you may need to map the instructions to work with your specific hardware configuration.\n\nYou can view or download the full source of this project from GitHub.\n\nNotecard Interrupt\n\nOriginally designed for low-power use cases, the Notecard attention interrupt is a latching interrupt. Meaning, once it fires, it stays in the fired position, until it has been manually reset.\n\nThe latching behavior enables you to leverage the interrupt in myriad ways:\n\nThe Notecard may idle or delay while waiting for communication from a cellular tower, while simultaneously disabling the host microcontroller with the enable", "start_char_idx": 0, "end_char_idx": 1808, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "08628442-7062-4f4c-aeed-8f98916a3875": {"__data__": {"id_": "08628442-7062-4f4c-aeed-8f98916a3875", "embedding": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d3207a7a-bb88-4699-aa59-771c404c924a", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "5ccf2203338f5c5cc3121a70c37abc4e7e164c5899b4cad2b783adf17d00b65c"}, "2": {"node_id": "34bd9efe-4cbe-4985-98bb-1f469c6333cd", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "c3ec0a750859576dacfdac187b74dc375471cb6ff843d61a7e6a51b8abcbd94e"}, "3": {"node_id": "bb2a7fb4-5858-4e33-b2ba-127e3b4b9ada", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "2f0c85cf36e9bdb4ae787c01b362cc3e81db890440c653ffec60741d29035e12"}}, "hash": "a97d7d7a7379b7af3cb9c60fdbe21aa8b2acf3df3cd5b2f40096d7c76679a90d", "text": "communication from a cellular tower, while simultaneously disabling the host microcontroller with the enable pin.\nWhen used in a powered setting and connected to an interrupt capable pin on the host MCU, the host MCU can receive and respond to network communication as quickly as possible.\nThe host MCU may optimize polling, by querying the logic value of the pin, as opposed to transacting with the Notecard to look for new data.\n\nTo learn more about configuring the Notecard ATTN interrupts, read the Handling Notecard Interrupts section of the Notecard guide.\n\nHardware Setup\n\nEnsure you have access to the following hardware:\n\nNotecard\nESP32 microcontroller\nNotecarrier\nMale/male jumper wire\nUSB A/micro cable\nmomentary tactile push button (built-in to Notecarrier-AF)\nLED (built-in to Adafruit Huzzah32 ESP32 Feather)\n\nThe attention, or ATTN, pin is exposed on the Notecarrier-AF, however it is not wired to any pins that are exposed from the Feather socket. To utilize the ATTN pin you must first decide how you would like for it be used (as described above), and then you must wire it the corresponding pin.\n\nYou must connect the ATTN pin of the Notecard to an interrupt capable GPIO pin on the Huzzah32. Place the male/male jumper wire between the ATTN pin on the Notecarrier-AF 13-Pin Header and pin 5 on the Adafruit Feather 24-Pin Breakout Header.\n\nThat's it! To complete the project, you will use the Huzzah32's built-in LED, LED_BUILTIN, and the Notecarrier-AF's built-in button, B0.\n\nNote\n\nThe female headers pictured above are non-standard hardware. In order to connect your jumper wire between ATTN and 5, either soldering or alligator clips will be", "start_char_idx": 1714, "end_char_idx": 3379, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bb2a7fb4-5858-4e33-b2ba-127e3b4b9ada": {"__data__": {"id_": "bb2a7fb4-5858-4e33-b2ba-127e3b4b9ada", "embedding": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d3207a7a-bb88-4699-aa59-771c404c924a", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "5ccf2203338f5c5cc3121a70c37abc4e7e164c5899b4cad2b783adf17d00b65c"}, "2": {"node_id": "08628442-7062-4f4c-aeed-8f98916a3875", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "a97d7d7a7379b7af3cb9c60fdbe21aa8b2acf3df3cd5b2f40096d7c76679a90d"}, "3": {"node_id": "29cb27a3-0eca-4bab-a77f-d2408b038485", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "9994bd5abeb72797927ecb5d529b019999e2d4f996d6361add0d5add5a1aa9aa"}}, "hash": "2f0c85cf36e9bdb4ae787c01b362cc3e81db890440c653ffec60741d29035e12", "text": "connect your jumper wire between ATTN and 5, either soldering or alligator clips will be required.\n\nFirmware Breakdown\nDefinitions and Declarations\n\nFirst things first, you will need to include the Notecard library.\n\nCOPY\n#include <Notecard.h>\n\nNext, you will want to create some defines to make things easier. Take care to note B0 and D5. The pin labels on the Huzzah32 and Notecarrier-AF do not line up 100%, and these defines make it easier to identify the interrupt pins to which you will be programmatically attaching.\n\nCOPY\n#ifdef B0\n#undef B0\n#endif\n#define B0 21\n\n#ifdef D5\n#undef D5\n#endif\n#define D5 14\n\n#define LOOP_HZ 20\n#define LOOP_DELAY_MS (1000/LOOP_HZ)\n\n#define serialDebug Serial\n\nYou will need to instantiate the Notecard class globally, which enables you to configure and interact with your Notecard device in both the setup and loop functions.\n\nCOPY\nNotecard notecard;\n\nIn order to optimize the interrupt execution (explained here), you need to declare a volatile bool flag. This allows the interrupt and main loop to share state, which enables the interrupt to offload processing onto the main loop.\n\nCOPY\nvolatile bool notecard_request_to_arm = false;\n\nDeclare an interrupt to handle the button press event. This ISR will notify the main loop of the request by setting the flag to true, after checking if the ATTN pin is already armed.\n\nCOPY\nvoid IRAM_ATTR armInterrupt() {\n  // Take no action when already armed\n  if (digitalRead(D5)) {\n    notecard_request_to_arm = true;\n ", "start_char_idx": 3401, "end_char_idx": 4899, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "29cb27a3-0eca-4bab-a77f-d2408b038485": {"__data__": {"id_": "29cb27a3-0eca-4bab-a77f-d2408b038485", "embedding": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d3207a7a-bb88-4699-aa59-771c404c924a", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "5ccf2203338f5c5cc3121a70c37abc4e7e164c5899b4cad2b783adf17d00b65c"}, "2": {"node_id": "bb2a7fb4-5858-4e33-b2ba-127e3b4b9ada", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "2f0c85cf36e9bdb4ae787c01b362cc3e81db890440c653ffec60741d29035e12"}, "3": {"node_id": "e1920eb3-d70f-40f3-b3cf-16060289c2dd", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "7677cdc55488c73b4dbe220ba2da24dde9fbc4b6274141943988cd4af9eac09c"}}, "hash": "9994bd5abeb72797927ecb5d529b019999e2d4f996d6361add0d5add5a1aa9aa", "text": "{\n    notecard_request_to_arm = true;\n  }\n}\n\nDeclare an interrupt to handle the Notecard ATTN pin interrupt. Use the following code to set the Huzzah32's built-in LED to follow the state of the ATTN pin:\n\nCOPY\nvoid IRAM_ATTR attention() {\n  // Visualize the attention pin state\n  digitalWrite(LED_BUILTIN, digitalRead(D5));\n}\nsetup Function\n\nFirst, you will start by enabling debug messages for the application.\n\nCOPY\n// Initialize Debug Output\nserialDebug.begin(115200);\nwhile (!serialDebug) {\n  ; // wait for serial port to connect. Needed for native USB\n}\n\nNext, you configure and initialize the Notecard.\n\nCOPY\n// Initialize Notecard\nnotecard.begin();\nnotecard.setDebugOutputStream(serialDebug);\n\nYou have placed a jumper wire betwen pin 5 and ATTN. To register the attention ISR to activity on pin 5, you must use the attachInterrupt API.\n\nCOPY\n// Attach Notecard Interrupt\npinMode(D5, INPUT);\nattachInterrupt(digitalPinToInterrupt(D5), attention, RISING);\n\nButton B0 on the Notecarrier-AF connects through the Feather socket to pin 21 of the Huzzah32. To register the armInterrupt ISR to a button press event, you must use the attachInterrupt API.\n\nCOPY\n// Attach Button Interrupt\npinMode(B0, INPUT_PULLUP);\nattachInterrupt(digitalPinToInterrupt(B0), armInterrupt, RISING);\n\nThe Notecard can be powered seperately, and operates independently, of the Huzzah32. As a result, the Huzzah32 built-in LED and the Notecard's ATTN pin can get out of sync. To", "start_char_idx": 4942, "end_char_idx": 6398, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e1920eb3-d70f-40f3-b3cf-16060289c2dd": {"__data__": {"id_": "e1920eb3-d70f-40f3-b3cf-16060289c2dd", "embedding": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d3207a7a-bb88-4699-aa59-771c404c924a", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "5ccf2203338f5c5cc3121a70c37abc4e7e164c5899b4cad2b783adf17d00b65c"}, "2": {"node_id": "29cb27a3-0eca-4bab-a77f-d2408b038485", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "9994bd5abeb72797927ecb5d529b019999e2d4f996d6361add0d5add5a1aa9aa"}, "3": {"node_id": "52fa2542-2a33-448b-9abe-185562724bf2", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "96356d7f6652bf31ab52680cc6bb36f647d94aab2ada1e1a02cf550bbf02e308"}}, "hash": "7677cdc55488c73b4dbe220ba2da24dde9fbc4b6274141943988cd4af9eac09c", "text": "built-in LED and the Notecard's ATTN pin can get out of sync. To ensure alignment, you must initialize the state of the LED to match the state of the ATTN pin.\n\nCOPY\n// Debug LED (mirrors `ATTN`)\npinMode(LED_BUILTIN, OUTPUT);\ndigitalWrite(LED_BUILTIN, digitalRead(D5));\nloop Function\n\nDue the fact most of the programs logic is executed through event driven code, the loop function is dedicated to servicing the button press event.\n\nWhen signalled by the interrupt driven flag, notecard_request_to_arm, the MCU will construct a JSON request and send it to the Notecard. If the message is sent successfully, then the Huzzah32's built-in LED will be updated to reflect the state of the armed interrupt. Finally, loop will delay at the frequency specified in LOOP_HZ.\n\nCOPY\nvoid loop() {\n  // Process arming request\n  if (notecard_request_to_arm) {\n    notecard_request_to_arm = false;\n\n    // Arm ATTN Interrupt\n    J *req = NoteNewRequest(\"card.attn\");\n    if (req) {\n      JAddStringToObject(req, \"mode\", \"arm\");\n      JAddNumberToObject(req, \"seconds\", 3);\n      if (notecard.sendRequest(req)) {\n        // Visualize the attention pin state\n        digitalWrite(LED_BUILTIN, digitalRead(D5));\n      } else {\n        notecard.logDebug(\"ERROR: Failed to arm ATTN interrupt!\\n\");\n      }\n    }\n  }\n\n  // Loop at `LOOP_HZ` Hz\n ", "start_char_idx": 6379, "end_char_idx": 7703, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "52fa2542-2a33-448b-9abe-185562724bf2": {"__data__": {"id_": "52fa2542-2a33-448b-9abe-185562724bf2", "embedding": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d3207a7a-bb88-4699-aa59-771c404c924a", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "5ccf2203338f5c5cc3121a70c37abc4e7e164c5899b4cad2b783adf17d00b65c"}, "2": {"node_id": "e1920eb3-d70f-40f3-b3cf-16060289c2dd", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "7677cdc55488c73b4dbe220ba2da24dde9fbc4b6274141943988cd4af9eac09c"}, "3": {"node_id": "ad7e95ce-c582-4891-9256-595411057c77", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "a45b087f74595fd2958e3f56f66b2a50df223e8693bd1201c3612445cab2ebde"}}, "hash": "96356d7f6652bf31ab52680cc6bb36f647d94aab2ada1e1a02cf550bbf02e308", "text": " }\n  }\n\n  // Loop at `LOOP_HZ` Hz\n  delay(LOOP_DELAY_MS);\n}\nMore on ESP32 Interrupt Handling\n\nAll GPIO pins on the ESP32 are interrupt capable. This is an amazing feature of the ESP32, and is not true of most microcontrollers. However, the ESP32's hardware interrupts require special handling, especially when using the Arduino board support package. Those details, and more, are discussed in this section.\n\nThe Notecarrier-AF built-in button B0 is denoted by the orange line (bottom), and the Notecard's ATTN interrupt is shown in white (top). As illustrated by the yellow marker, the rising edge of the button is the trigger. Once the button is released, the program generates and sends a request to arm the attention interrupt (depicted by the red area). Lastly, the Notecard arms the ATTN interrupt, observed as the white line being pulled LOW.\n\nWhat exactly happens after the button press? Here is the break down:\n\nThe MCU awaits the remaining frequency delay.\nThe MCU sees the flag indicating the user has made a request to arm.\nThe MCU forms and sends a JSON request to the Notecard to arm the ATTN pin.\nThe Notecard arms the ATTN pin by pulling the line LOW.\n\nIn the timing graph, you can see it takes ~80ms to service the request to arm. While 80ms may seem fast, it is quite slow for an MCU, and is precisely why the operation needs to be moved out of the interrupt and into the main loop.\n\nNote\n\nESP32 Interrupt Service Routines should be decorated with IRAM_ATTR(1).\n\nWhat is IRAM_ATTR?\n\nBy flagging a piece of code with the IRAM_ATTR attribute we are declaring that the compiled code will be placed in the Internal", "start_char_idx": 7731, "end_char_idx": 9358, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ad7e95ce-c582-4891-9256-595411057c77": {"__data__": {"id_": "ad7e95ce-c582-4891-9256-595411057c77", "embedding": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d3207a7a-bb88-4699-aa59-771c404c924a", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "5ccf2203338f5c5cc3121a70c37abc4e7e164c5899b4cad2b783adf17d00b65c"}, "2": {"node_id": "52fa2542-2a33-448b-9abe-185562724bf2", "node_type": null, "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}, "hash": "96356d7f6652bf31ab52680cc6bb36f647d94aab2ada1e1a02cf550bbf02e308"}}, "hash": "a45b087f74595fd2958e3f56f66b2a50df223e8693bd1201c3612445cab2ebde", "text": "attribute we are declaring that the compiled code will be placed in the Internal RAM (IRAM) of the ESP32.\n\nOtherwise the code is placed in the Flash. And flash on the ESP32 is much slower than internal RAM.\n\nIf the code we want to run is an interrupt service routine (ISR), we generally want to execute it as quickly as possible. If we had to \"wait\" for an ISR to load from flash, things would go horribly wrong.\n\nExample:\n\nCOPY\nvoid IRAM_ATTR attention() {\n  // Visualize the interrupt\n  digitalWrite(LED_BUILTIN, HIGH);\n}\nWarning\n\nDue to a shortcoming in Espressif System's esp32 Arduino Board Package, all interrupts must be configured to fire on the same edge. To successfully observe the Notecard attention pin interrupt, you must monitor the RISING edge. As a result, any other interrupts in your project will also need to fire on the RISING edge.\n\nAdditional Resources\nNotecard Datasheet\nNotecarrier-AF Datasheet\nAdafruit Huzzah32 ESP32 Feather\nHandling Notecard Interrupts\nLast Minute Engineers: Handling ESP32 GPIO Interrupts Tutorial\nEspressif: IRAM (instruction RAM)\nGitHub: Espressif arduino-esp32 interrupt behavior issue (#1111)\nCan we improve this page? Send us feedback", "start_char_idx": 9303, "end_char_idx": 10488, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"d3207a7a-bb88-4699-aa59-771c404c924a": {"node_ids": ["34bd9efe-4cbe-4985-98bb-1f469c6333cd", "08628442-7062-4f4c-aeed-8f98916a3875", "bb2a7fb4-5858-4e33-b2ba-127e3b4b9ada", "29cb27a3-0eca-4bab-a77f-d2408b038485", "e1920eb3-d70f-40f3-b3cf-16060289c2dd", "52fa2542-2a33-448b-9abe-185562724bf2", "ad7e95ce-c582-4891-9256-595411057c77"], "metadata": {"title": "", "category": "Attention Pin Guide", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/attention-pin-guide/"}}}}