{"docstore/metadata": {"1905d7d0-a80f-4cef-9ca8-4eb31c5dc532": {"doc_hash": "739c3a27d31892fd7c84ca19c4dfbd1b8238c4e17fe1e0cdb6959ff00ccfe398"}, "5efe65bf-40cb-4cd0-a14a-9e4fe1f2746e": {"doc_hash": "71eaa4c9d012b83e95c19f52baf7afd1cd43a2cdafa4df1ba38acbe0cfa4c00e"}, "9855d17c-b8ae-4979-812b-329858dda5c9": {"doc_hash": "602a1cd65a6283fa8dd0c9f04e80e99518be90eebfd6e2d28dbedb2d5aa40d09", "ref_doc_id": "1905d7d0-a80f-4cef-9ca8-4eb31c5dc532"}, "68f85f3f-a076-45fe-80a4-257d4f039d63": {"doc_hash": "8f5aeff8fbd20df216cfcb35ba5fbd3116b9f1f560f032a44615851e1d1d0ee5", "ref_doc_id": "1905d7d0-a80f-4cef-9ca8-4eb31c5dc532"}, "b070ac7b-97b1-46cc-b8fe-4ba4845d713e": {"doc_hash": "b01915dc0a792c5bace90ac774249dea18ee25f58d35c6d57226f66e9bd25a45", "ref_doc_id": "1905d7d0-a80f-4cef-9ca8-4eb31c5dc532"}, "337567ca-c020-4f9e-b9e6-7502515db3c8": {"doc_hash": "c54c4fde88d284293bf4c6a23d663a97503ceeb8d05024a17b2b01daf714e05a", "ref_doc_id": "1905d7d0-a80f-4cef-9ca8-4eb31c5dc532"}, "9aeb7d4a-427e-4ba9-841b-4ee79d6481d0": {"doc_hash": "a6a91a45d1edb1573c501b2c81fa21685aaaf26b8dd3f79cfdc9b4967d412ca8", "ref_doc_id": "1905d7d0-a80f-4cef-9ca8-4eb31c5dc532"}, "8f7147c4-349c-4cb6-be89-06abe1e7fdaf": {"doc_hash": "eaf3f234b062bc90386b428d8e15ad5906ce8fd600622410449e36228772e50a", "ref_doc_id": "5efe65bf-40cb-4cd0-a14a-9e4fe1f2746e"}, "5c20aa77-80c1-4b94-8e56-6c5247fb45f6": {"doc_hash": "45d5dfb409d3cbaf7d1b71a4a1cb576326a9ce5aab0b19d9856e91010e5f94e8", "ref_doc_id": "5efe65bf-40cb-4cd0-a14a-9e4fe1f2746e"}, "1e7c880f-9a31-4786-92ee-36aef8a352f4": {"doc_hash": "cd26aa74cb9d302a381c64d1e4b198414d084c8a2a63264d06ea9b83923860f5", "ref_doc_id": "5efe65bf-40cb-4cd0-a14a-9e4fe1f2746e"}, "2a5265e7-146a-4567-ae42-ff2571be3d22": {"doc_hash": "b6b27bcac7bcd102d3f4f58ffd6c278077c6312dc0e6c6b197e469f52a0f90ed", "ref_doc_id": "5efe65bf-40cb-4cd0-a14a-9e4fe1f2746e"}, "85c0e1ab-d747-46c6-964b-9d7ff0e9d71e": {"doc_hash": "21c226f149e6dad53ec53e1f898ecda49907d28814664a9f572d2fcb5f81fc59", "ref_doc_id": "5efe65bf-40cb-4cd0-a14a-9e4fe1f2746e"}}, "docstore/data": {"9855d17c-b8ae-4979-812b-329858dda5c9": {"__data__": {"id_": "9855d17c-b8ae-4979-812b-329858dda5c9", "embedding": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1905d7d0-a80f-4cef-9ca8-4eb31c5dc532", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "hash": "739c3a27d31892fd7c84ca19c4dfbd1b8238c4e17fe1e0cdb6959ff00ccfe398"}, "3": {"node_id": "68f85f3f-a076-45fe-80a4-257d4f039d63", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "hash": "8f5aeff8fbd20df216cfcb35ba5fbd3116b9f1f560f032a44615851e1d1d0ee5"}}, "hash": "602a1cd65a6283fa8dd0c9f04e80e99518be90eebfd6e2d28dbedb2d5aa40d09", "text": "Blues Sparrow\u2122 Datasheet\n\nSparrow is a low-cost embeddable STM32WLE5-based microcontroller board designed to accelerate the development and deployment of battery-powered IoT solutions, utilizing its onboard LoRa Radio to create a hub-and-spoke network topology.\n\n \n\nSparrow's real power lies in it's sub-gigahertz radio communication. The sub-gigahertz radio band is especially good at travelling long distances in open-air conditions and penetrating barriers and obstacles in closed spaces.\n\nSparrow is an ideal solution for many projects which would greatly benefit from wireless communication, the cost of adding a cellular or Wi-Fi module to every sensing device is untenable.\n\nFunctional Description\n\nSparrow is based on the STM32WLE5 from STMicroelectronics. The device was built to extend the Notecard's device-to-cloud data pump approach into the low-cost IoT device space. Sparrow has onboard LoRa networking and is designed to serve as a reference toolkit so that developers can quickly get started creating a PoC or Prototype. The default hardware can support several GPIO activities like digital and analog I/O, I2C, UART, and SPI. The firmware provides a plug-n-play model for custom software development, and is built on top of, and controlled by, an underlying, low-power API.\n\nFeatures\nFeatures of the ST STM32WLE5+ microcontroller\n48MHz clock speed\n256KB Flash\n64KB of SRAM\nUltra-low-power comparators, DAC, POR/PDR and timers\n7x timers\n2x DMA controller (7 channels each) supporting ADC, DAC, SPI, I2C, LPUART, USART, AES and timers\nRich analog peripherals (down to 1.62V)\nTrue random number generator\nHardware encryption AES", "start_char_idx": 0, "end_char_idx": 1643, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "68f85f3f-a076-45fe-80a4-257d4f039d63": {"__data__": {"id_": "68f85f3f-a076-45fe-80a4-257d4f039d63", "embedding": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1905d7d0-a80f-4cef-9ca8-4eb31c5dc532", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "hash": "739c3a27d31892fd7c84ca19c4dfbd1b8238c4e17fe1e0cdb6959ff00ccfe398"}, "2": {"node_id": "9855d17c-b8ae-4979-812b-329858dda5c9", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "hash": "602a1cd65a6283fa8dd0c9f04e80e99518be90eebfd6e2d28dbedb2d5aa40d09"}, "3": {"node_id": "b070ac7b-97b1-46cc-b8fe-4ba4845d713e", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "hash": "b01915dc0a792c5bace90ac774249dea18ee25f58d35c6d57226f66e9bd25a45"}}, "hash": "8f5aeff8fbd20df216cfcb35ba5fbd3116b9f1f560f032a44615851e1d1d0ee5", "text": "(down to 1.62V)\nTrue random number generator\nHardware encryption AES 256-bit\nOnboard programmable momentary button (PAIR)\n3 programmable LEDs (red, blue, green)\nJTAG (SWD capable) debug jack\nBOOT and RESET buttons\nBreadboard compatible 0.1\" headers for easy wiring and debugging\nPackage Configuration\n\nAt its core, the Sparrow is a single piece of hardware, which is configured in one of three ways:\n\nSparrow Gateway\n\nA Sparrow Gateway can be constructed by connecting a Sparrow Essentials Board to a Notecarrier-A, using the Qwiic cable and Qwiic connectors. A Sparrow Gateway is designed to be powered via the Notecarrier-A (not the Sparrow Essentials Board), and the DIP switch on the Notecarrier-A must be set to 3V3.\n\nSparrow Reference Sensor Node\n\nJust add batteries and go. The reference sensor board comes with an integrated BME280 and PIR sensor. Once this device has been paired with a Gateway, then this device will start automatically capturing real data that you can work with while configuring your Notehub project.\n\nIt comes populated with the following items:\n\nBosch BME280 (temp/humidity/pressure) Sensor\nPIR (motion) Sensor\nCortex Debug Connector\nRESET/BOOT Buttons\n(2x) AAA Battery Holder\n\nSparrow Essentials Board\n\nDesigned for rapid prototyping, it comes populated with the following items:\n\nCortex Debug Connector\nFemale Pin Headers\nRESET/BOOT Buttons\nLiPo JST Connector\nQwiic Connector\nCoin-cell Battery Holder\n\nUnified Firmware, Split Personality\n\nAll the different Sparrow configurations run from the same firmware. Once the firmware boots, it looks for a Notecard (of any flavor) on the I2C bus. If the", "start_char_idx": 1583, "end_char_idx": 3211, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b070ac7b-97b1-46cc-b8fe-4ba4845d713e": {"__data__": {"id_": "b070ac7b-97b1-46cc-b8fe-4ba4845d713e", "embedding": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1905d7d0-a80f-4cef-9ca8-4eb31c5dc532", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "hash": "739c3a27d31892fd7c84ca19c4dfbd1b8238c4e17fe1e0cdb6959ff00ccfe398"}, "2": {"node_id": "68f85f3f-a076-45fe-80a4-257d4f039d63", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "hash": "8f5aeff8fbd20df216cfcb35ba5fbd3116b9f1f560f032a44615851e1d1d0ee5"}, "3": {"node_id": "337567ca-c020-4f9e-b9e6-7502515db3c8", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "hash": "c54c4fde88d284293bf4c6a23d663a97503ceeb8d05024a17b2b01daf714e05a"}}, "hash": "b01915dc0a792c5bace90ac774249dea18ee25f58d35c6d57226f66e9bd25a45", "text": "for a Notecard (of any flavor) on the I2C bus. If the firmware finds one, then it decides that it is wired up as part of a Sparrow Gateway. If not, it then looks for a BME280 environmental sensor on the I2C bus. If found, then the firmware decides it is a Reference Sensor Board. However, if it finds neither, then the firmware defaults to behaving as an Essentials Board.\n\nPin Information\n\nThe following tables contain pin definition mappings between the Sparrow headers and the pins from the STM32LE55 (the core MCU).\n\nSTM32 Mapping to Sparrow Header\nPin #\tHeader\tPin Description\t\tPin #\tHeader\tPin Description\nNRST\tRST#\tRESET Button\t\tPA7\tMOSI\tMain Out / Secondary In\nPH3-BOOT0\tBOOT\tBOOT Button\t\tPA6\tMISO\tMain In / Secondary Out\nVSS_EP\tGND\tGround\t\tPA5\tSCK\tSPI Clock\nPA2\tLPTX\tLow-Power UART Transmit\t\tPA4\tCS\tChip Select\nPA3\tLPRX\tLow-Power UART Receive\t\tPA11\tSDA\tI2C Data\nPB2\tA1\tAnalog Pin 1\t\tPA12\tSCL\tI2C Clock\nPA10\tA2\tAnalog Pin 2\t\tPA1\tBLU\tBlue LED\nPA15\tA3\tAnalog Pin 3\t\tPA0\tRED\tRed LED\nPA13\tSWDIO\tSingle-Wire Debug I/O\t\tPB12\tGRN\tGreen LED\nPA14\tSWCLK\tSingle-Wire Debug Clock\t\tPB7\tRX\tUART Receive\nPC13\tBTN#\tPAIR Button\t\tPB6\tTX\tUART Transmit\nVDD\t<VIO\tLogic-level Voltage\t\t--\tBAT\tDirect Battery Voltage\nSetting a Frequency", "start_char_idx": 3231, "end_char_idx": 4451, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "337567ca-c020-4f9e-b9e6-7502515db3c8": {"__data__": {"id_": "337567ca-c020-4f9e-b9e6-7502515db3c8", "embedding": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1905d7d0-a80f-4cef-9ca8-4eb31c5dc532", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "hash": "739c3a27d31892fd7c84ca19c4dfbd1b8238c4e17fe1e0cdb6959ff00ccfe398"}, "2": {"node_id": "b070ac7b-97b1-46cc-b8fe-4ba4845d713e", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "hash": "b01915dc0a792c5bace90ac774249dea18ee25f58d35c6d57226f66e9bd25a45"}, "3": {"node_id": "9aeb7d4a-427e-4ba9-841b-4ee79d6481d0", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "hash": "a6a91a45d1edb1573c501b2c81fa21685aaaf26b8dd3f79cfdc9b4967d412ca8"}}, "hash": "c54c4fde88d284293bf4c6a23d663a97503ceeb8d05024a17b2b01daf714e05a", "text": "Voltage\t\t--\tBAT\tDirect Battery Voltage\nSetting a Frequency Plan\n\nAll Sparrow boards have four DIP switches that control the frequency ranges that the device's LoRa radio operates within.\n\nThe pins allow you to set your board to multiple common LoRa frequency plans using the configuration shown below. If you're unsure what plan to use in your region, this guide to LoRa regional parameters is a good reference.\n\nPin 1\tPin 2\tPin 3\tPin 4\tFrequency Plan\nOFF\tOFF\tOFF\tOFF\tUS915\nOFF\tOFF\tOFF\tON\tAU915\nOFF\tOFF\tON\tOFF\tIN865\nOFF\tON\tOFF\tOFF\tKR920\nOFF\tON\tOFF\tON\tEU433\nOFF\tON\tON\tOFF\tRU864\nON\tOFF\tOFF\tOFF\tAS923\nON\tOFF\tOFF\tON\tCN470\nON\tOFF\tON\tOFF\tEU868\nNote\n\nRemember to set the switches on both your Sparrow Essentials Boards and Reference Sensor Boards, as the frequency plans on each must match for the boards to communicate successfully.\n\nFor production hardware we recommend setting the DIP switches at your product's factory to reflect the destination of the device. Alternatively, you may populate R27 / R28 / R29 / R30 (see schematic below) with zero-Ohm resistors as necessary to simulate DIP switches that are ON.\n\nAs one final option, the Sparrow firmware allows you to set a LoRa frequency in a way that overrides the hardware switches. If you're interested in this option see our guide on running custom Sparrow firmware, and then set the RF_FREQ value here to your desired frequency.\n\nSpecifications\nElectrical Characteristics\nDC Characteristics\nDescription\tMinimum\tMaximum\tUnit\nBAT Supply Voltage\t2.8\t5.5\tV\nSupply Current\t0.5\t2.0\tA\nAbsolute Maximum", "start_char_idx": 4440, "end_char_idx": 5988, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9aeb7d4a-427e-4ba9-841b-4ee79d6481d0": {"__data__": {"id_": "9aeb7d4a-427e-4ba9-841b-4ee79d6481d0", "embedding": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1905d7d0-a80f-4cef-9ca8-4eb31c5dc532", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "hash": "739c3a27d31892fd7c84ca19c4dfbd1b8238c4e17fe1e0cdb6959ff00ccfe398"}, "2": {"node_id": "337567ca-c020-4f9e-b9e6-7502515db3c8", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}, "hash": "c54c4fde88d284293bf4c6a23d663a97503ceeb8d05024a17b2b01daf714e05a"}}, "hash": "a6a91a45d1edb1573c501b2c81fa21685aaaf26b8dd3f79cfdc9b4967d412ca8", "text": "Current\t0.5\t2.0\tA\nAbsolute Maximum Ratings\nDescription\tMinimum\tMaximum\tUnit\nStorage temperature\t-35\t70\t\u00b0C\nOrdering Information\nPlease visit the Sparrow product page for ordering information.\nDesign Files\n\nOpen source hardware designs for the Sparrow and all Blues Hardware are maintained in the note-hardware GitHub repository, including:\n\nSparrow Essentials board BOM, schematic, 3D model, and Gerbers\nSparrow Reference Sensor board BOM, schematic, 3D Model, and Gerbers\nBoard Errata\n\nSome Sparrow Reference Sensor boards with a 1.1 marking on the serigraphy have an improperly mounted Cortex Debug connector which prevents using an external programmer (such as the STLINK-V3MINI included with the Sparrow Dev Kit) for interfacing with the board. A properly-mounted connector, as depicted below, has the single tab side of the debug connector oriented to the edge of the board. On improperly-mounted boards, this connector is reversed, with the double tab side oriented to the edge of the board. Please contact Blues if you wish to request a replacement.\n\nQualifications and Approvals\nCertification\tDate\nFCC\tPending\nTerms and Conditions\n\nVisit Blues Hardware Terms & Conditions.\n\nRevision History\nAuthor\tDate\tSummary\nZachary J. Fields\t10 AUG 2022\tDocument drafted\nTJ VanToll\t02 NOV 2022\tAdded frequency plan configuration\nBrandon Satrom\t30 JAN 2023\tAdded errata for Reference Sensor Cortex Debug connector\nContact Information\n\nFor other questions about the Sparrow, visit the Blues Forum.\n\nBlues Inc.\nhttps://blues.io\n50 Dunham Ridge Suite 1650\nBeverly, MA 01915\nsupport@blues.io\n\n\nCan we improve this page? Send us feedback", "start_char_idx": 6008, "end_char_idx": 7633, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8f7147c4-349c-4cb6-be89-06abe1e7fdaf": {"__data__": {"id_": "8f7147c4-349c-4cb6-be89-06abe1e7fdaf", "embedding": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5efe65bf-40cb-4cd0-a14a-9e4fe1f2746e", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "hash": "71eaa4c9d012b83e95c19f52baf7afd1cd43a2cdafa4df1ba38acbe0cfa4c00e"}, "3": {"node_id": "5c20aa77-80c1-4b94-8e56-6c5247fb45f6", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "hash": "45d5dfb409d3cbaf7d1b71a4a1cb576326a9ce5aab0b19d9856e91010e5f94e8"}}, "hash": "eaf3f234b062bc90386b428d8e15ad5906ce8fd600622410449e36228772e50a", "text": "Blues Sparrow\u2122 Datasheet\n\nSparrow is a low-cost embeddable STM32WLE5-based microcontroller board designed to accelerate the development and deployment of battery-powered IoT solutions, utilizing its onboard LoRa Radio to create a hub-and-spoke network topology.\n\n \n\nSparrow's real power lies in it's sub-gigahertz radio communication. The sub-gigahertz radio band is especially good at travelling long distances in open-air conditions and penetrating barriers and obstacles in closed spaces.\n\nSparrow is an ideal solution for many projects which would greatly benefit from wireless communication, the cost of adding a cellular or Wi-Fi module to every sensing device is untenable.\n\nFunctional Description\n\nSparrow is based on the STM32WLE5 from STMicroelectronics. The device was built to extend the Notecard's device-to-cloud data pump approach into the low-cost IoT device space. Sparrow has onboard LoRa networking and is designed to serve as a reference toolkit so that developers can quickly get started creating a PoC or Prototype. The default hardware can support several GPIO activities like digital and analog I/O, I2C, UART, and SPI. The firmware provides a plug-n-play model for custom software development, and is built on top of, and controlled by, an underlying, low-power API.\n\nFeatures\nFeatures of the ST STM32WLE5+ microcontroller\n48MHz clock speed\n256KB Flash\n64KB of SRAM\nUltra-low-power comparators, DAC, POR/PDR and timers\n7x timers\n2x DMA controller (7 channels each) supporting ADC, DAC, SPI, I2C, LPUART, USART, AES and timers\nRich analog peripherals (down to 1.62V)\nTrue random number generator\nHardware encryption AES", "start_char_idx": 0, "end_char_idx": 1643, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5c20aa77-80c1-4b94-8e56-6c5247fb45f6": {"__data__": {"id_": "5c20aa77-80c1-4b94-8e56-6c5247fb45f6", "embedding": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5efe65bf-40cb-4cd0-a14a-9e4fe1f2746e", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "hash": "71eaa4c9d012b83e95c19f52baf7afd1cd43a2cdafa4df1ba38acbe0cfa4c00e"}, "2": {"node_id": "8f7147c4-349c-4cb6-be89-06abe1e7fdaf", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "hash": "eaf3f234b062bc90386b428d8e15ad5906ce8fd600622410449e36228772e50a"}, "3": {"node_id": "1e7c880f-9a31-4786-92ee-36aef8a352f4", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "hash": "cd26aa74cb9d302a381c64d1e4b198414d084c8a2a63264d06ea9b83923860f5"}}, "hash": "45d5dfb409d3cbaf7d1b71a4a1cb576326a9ce5aab0b19d9856e91010e5f94e8", "text": "(down to 1.62V)\nTrue random number generator\nHardware encryption AES 256-bit\nOnboard programmable momentary button (PAIR)\n3 programmable LEDs (red, blue, green)\nJTAG (SWD capable) debug jack\nBOOT and RESET buttons\nBreadboard compatible 0.1\" headers for easy wiring and debugging\nPackage Configuration\n\nAt its core, the Sparrow is a single piece of hardware, which is configured in one of three ways:\n\nSparrow Gateway\n\nA Sparrow Gateway can be constructed by connecting a Sparrow Essentials Board to a Notecarrier-A, using the Qwiic cable and Qwiic connectors. A Sparrow Gateway is designed to be powered via the Notecarrier-A (not the Sparrow Essentials Board), and the DIP switch on the Notecarrier-A must be set to 3V3.\n\nSparrow Reference Sensor Node\n\nJust add batteries and go. The reference sensor board comes with an integrated BME280 and PIR sensor. Once this device has been paired with a Gateway, then this device will start automatically capturing real data that you can work with while configuring your Notehub project.\n\nIt comes populated with the following items:\n\nBosch BME280 (temp/humidity/pressure) Sensor\nPIR (motion) Sensor\nCortex Debug Connector\nRESET/BOOT Buttons\n(2x) AAA Battery Holder\n\nSparrow Essentials Board\n\nDesigned for rapid prototyping, it comes populated with the following items:\n\nCortex Debug Connector\nFemale Pin Headers\nRESET/BOOT Buttons\nLiPo JST Connector\nQwiic Connector\nCoin-cell Battery Holder\n\nUnified Firmware, Split Personality\n\nAll the different Sparrow configurations run from the same firmware. Once the firmware boots, it looks for a Notecard (of any flavor) on the I2C bus. If the", "start_char_idx": 1583, "end_char_idx": 3211, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1e7c880f-9a31-4786-92ee-36aef8a352f4": {"__data__": {"id_": "1e7c880f-9a31-4786-92ee-36aef8a352f4", "embedding": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5efe65bf-40cb-4cd0-a14a-9e4fe1f2746e", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "hash": "71eaa4c9d012b83e95c19f52baf7afd1cd43a2cdafa4df1ba38acbe0cfa4c00e"}, "2": {"node_id": "5c20aa77-80c1-4b94-8e56-6c5247fb45f6", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "hash": "45d5dfb409d3cbaf7d1b71a4a1cb576326a9ce5aab0b19d9856e91010e5f94e8"}, "3": {"node_id": "2a5265e7-146a-4567-ae42-ff2571be3d22", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "hash": "b6b27bcac7bcd102d3f4f58ffd6c278077c6312dc0e6c6b197e469f52a0f90ed"}}, "hash": "cd26aa74cb9d302a381c64d1e4b198414d084c8a2a63264d06ea9b83923860f5", "text": "for a Notecard (of any flavor) on the I2C bus. If the firmware finds one, then it decides that it is wired up as part of a Sparrow Gateway. If not, it then looks for a BME280 environmental sensor on the I2C bus. If found, then the firmware decides it is a Reference Sensor Board. However, if it finds neither, then the firmware defaults to behaving as an Essentials Board.\n\nPin Information\n\nThe following tables contain pin definition mappings between the Sparrow headers and the pins from the STM32LE55 (the core MCU).\n\nSTM32 Mapping to Sparrow Header\nPin #\tHeader\tPin Description\t\tPin #\tHeader\tPin Description\nNRST\tRST#\tRESET Button\t\tPA7\tMOSI\tMain Out / Secondary In\nPH3-BOOT0\tBOOT\tBOOT Button\t\tPA6\tMISO\tMain In / Secondary Out\nVSS_EP\tGND\tGround\t\tPA5\tSCK\tSPI Clock\nPA2\tLPTX\tLow-Power UART Transmit\t\tPA4\tCS\tChip Select\nPA3\tLPRX\tLow-Power UART Receive\t\tPA11\tSDA\tI2C Data\nPB2\tA1\tAnalog Pin 1\t\tPA12\tSCL\tI2C Clock\nPA10\tA2\tAnalog Pin 2\t\tPA1\tBLU\tBlue LED\nPA15\tA3\tAnalog Pin 3\t\tPA0\tRED\tRed LED\nPA13\tSWDIO\tSingle-Wire Debug I/O\t\tPB12\tGRN\tGreen LED\nPA14\tSWCLK\tSingle-Wire Debug Clock\t\tPB7\tRX\tUART Receive\nPC13\tBTN#\tPAIR Button\t\tPB6\tTX\tUART Transmit\nVDD\t<VIO\tLogic-level Voltage\t\t--\tBAT\tDirect Battery Voltage\nSetting a Frequency Plan\n\nAll", "start_char_idx": 3231, "end_char_idx": 4461, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2a5265e7-146a-4567-ae42-ff2571be3d22": {"__data__": {"id_": "2a5265e7-146a-4567-ae42-ff2571be3d22", "embedding": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5efe65bf-40cb-4cd0-a14a-9e4fe1f2746e", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "hash": "71eaa4c9d012b83e95c19f52baf7afd1cd43a2cdafa4df1ba38acbe0cfa4c00e"}, "2": {"node_id": "1e7c880f-9a31-4786-92ee-36aef8a352f4", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "hash": "cd26aa74cb9d302a381c64d1e4b198414d084c8a2a63264d06ea9b83923860f5"}, "3": {"node_id": "85c0e1ab-d747-46c6-964b-9d7ff0e9d71e", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "hash": "21c226f149e6dad53ec53e1f898ecda49907d28814664a9f572d2fcb5f81fc59"}}, "hash": "b6b27bcac7bcd102d3f4f58ffd6c278077c6312dc0e6c6b197e469f52a0f90ed", "text": "Battery Voltage\nSetting a Frequency Plan\n\nAll Sparrow boards have four DIP switches that control the frequency ranges that the device's LoRa radio operates within.\n\nThe pins allow you to set your board to multiple common LoRa frequency plans using the configuration shown below. If you're unsure what plan to use in your region, this guide to LoRa regional parameters is a good reference.\n\nPin 1\tPin 2\tPin 3\tPin 4\tFrequency Plan\nOFF\tOFF\tOFF\tOFF\tUS915\nOFF\tOFF\tOFF\tON\tAU915\nOFF\tOFF\tON\tOFF\tIN865\nOFF\tON\tOFF\tOFF\tKR920\nOFF\tON\tOFF\tON\tEU433\nOFF\tON\tON\tOFF\tRU864\nON\tOFF\tOFF\tOFF\tAS923\nON\tOFF\tOFF\tON\tCN470\nON\tOFF\tON\tOFF\tEU868\nNote\n\nRemember to set the switches on both your Sparrow Essentials Boards and Reference Sensor Boards, as the frequency plans on each must match for the boards to communicate successfully.\n\nFor production hardware we recommend setting the DIP switches at your product's factory to reflect the destination of the device. Alternatively, you may populate R27 / R28 / R29 / R30 (see schematic below) with zero-Ohm resistors as necessary to simulate DIP switches that are ON.\n\nAs one final option, the Sparrow firmware allows you to set a LoRa frequency in a way that overrides the hardware switches. If you're interested in this option see our guide on running custom Sparrow firmware, and then set the RF_FREQ value here to your desired frequency.\n\nSpecifications\nElectrical Characteristics\nDC Characteristics\nDescription\tMinimum\tMaximum\tUnit\nBAT Supply Voltage\t2.8\t5.5\tV\nSupply Current\t0.5\t2.0\tA\nAbsolute Maximum Ratings\nDescription\tMinimum\tMaximum\tUnit\nStorage", "start_char_idx": 4463, "end_char_idx": 6037, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "85c0e1ab-d747-46c6-964b-9d7ff0e9d71e": {"__data__": {"id_": "85c0e1ab-d747-46c6-964b-9d7ff0e9d71e", "embedding": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5efe65bf-40cb-4cd0-a14a-9e4fe1f2746e", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "hash": "71eaa4c9d012b83e95c19f52baf7afd1cd43a2cdafa4df1ba38acbe0cfa4c00e"}, "2": {"node_id": "2a5265e7-146a-4567-ae42-ff2571be3d22", "node_type": null, "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}, "hash": "b6b27bcac7bcd102d3f4f58ffd6c278077c6312dc0e6c6b197e469f52a0f90ed"}}, "hash": "21c226f149e6dad53ec53e1f898ecda49907d28814664a9f572d2fcb5f81fc59", "text": "Maximum Ratings\nDescription\tMinimum\tMaximum\tUnit\nStorage temperature\t-35\t70\t\u00b0C\nOrdering Information\nPlease visit the Sparrow product page for ordering information.\nDesign Files\n\nOpen source hardware designs for the Sparrow and all Blues Hardware are maintained in the note-hardware GitHub repository, including:\n\nSparrow Essentials board BOM, schematic, 3D model, and Gerbers\nSparrow Reference Sensor board BOM, schematic, 3D Model, and Gerbers\nBoard Errata\n\nSome Sparrow Reference Sensor boards with a 1.1 marking on the serigraphy have an improperly mounted Cortex Debug connector which prevents using an external programmer (such as the STLINK-V3MINI included with the Sparrow Dev Kit) for interfacing with the board. A properly-mounted connector, as depicted below, has the single tab side of the debug connector oriented to the edge of the board. On improperly-mounted boards, this connector is reversed, with the double tab side oriented to the edge of the board. Please contact Blues if you wish to request a replacement.\n\nQualifications and Approvals\nCertification\tDate\nFCC\tPending\nTerms and Conditions\n\nVisit Blues Hardware Terms & Conditions.\n\nRevision History\nAuthor\tDate\tSummary\nZachary J. Fields\t10 AUG 2022\tDocument drafted\nTJ VanToll\t02 NOV 2022\tAdded frequency plan configuration\nBrandon Satrom\t30 JAN 2023\tAdded errata for Reference Sensor Cortex Debug connector\nContact Information\n\nFor other questions about the Sparrow, visit the Blues Forum.\n\nBlues Inc.\nhttps://blues.io\n50 Dunham Ridge Suite 1650\nBeverly, MA 01915\nsupport@blues.io\n\n\nCan we improve this page? Send us feedback", "start_char_idx": 6022, "end_char_idx": 7620, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"1905d7d0-a80f-4cef-9ca8-4eb31c5dc532": {"node_ids": ["9855d17c-b8ae-4979-812b-329858dda5c9", "68f85f3f-a076-45fe-80a4-257d4f039d63", "b070ac7b-97b1-46cc-b8fe-4ba4845d713e", "337567ca-c020-4f9e-b9e6-7502515db3c8", "9aeb7d4a-427e-4ba9-841b-4ee79d6481d0"], "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/datasheets/sparrow-datasheet/"}}, "5efe65bf-40cb-4cd0-a14a-9e4fe1f2746e": {"node_ids": ["8f7147c4-349c-4cb6-be89-06abe1e7fdaf", "5c20aa77-80c1-4b94-8e56-6c5247fb45f6", "1e7c880f-9a31-4786-92ee-36aef8a352f4", "2a5265e7-146a-4567-ae42-ff2571be3d22", "85c0e1ab-d747-46c6-964b-9d7ff0e9d71e"], "metadata": {"title": "", "category": "Sparrow Datasheet", "url": "https://dev.blues.io/sparrow/sparrow-datasheet/"}}}}