{"docstore/metadata": {"f18492fc-2ce5-47cd-986c-92dcce8b2cff": {"doc_hash": "de8c88bf2b5f69b73991c64876f77aef195024024857c868bc3b89e2e8a7cc71"}, "e1dfc3e8-fb4d-4892-8ea6-7a7b7e998d32": {"doc_hash": "d5fc75fa063fb7f7a0b2de71621a8c0e4b675227d4a5ff4a1564d90df0c731f7", "ref_doc_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff"}, "ceddc14b-7088-43e3-b079-dad4dacdbc0c": {"doc_hash": "a8716dda5ac47212793f8ffdaa6180b79da2f79aff6017c49d025669c72a13c8", "ref_doc_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff"}, "1892323a-bdb4-438b-b200-7ad3e585113b": {"doc_hash": "f9c6cae32fe056f052fa843e938995403e131c406c4c11af259bf80a7d074374", "ref_doc_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff"}, "9bbdbff2-850b-4f0c-b590-a322e2d89e16": {"doc_hash": "81211d483692cff1056e282e58623511d1c232c80e035383e6cc14603fcf225f", "ref_doc_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff"}, "77784b29-f25e-4391-bdb9-6b737d5823f2": {"doc_hash": "4a04ee7039d5d48de4b530bdebe9da16abd414f9a148f8178bc9af7a04fa54f8", "ref_doc_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff"}, "0c30c21d-1e6b-4a8e-9279-3b2e9677c5cc": {"doc_hash": "ff665db89d1cf57323f531ce0bcbae456012dbab64ab3ecd939365f2bf7c4780", "ref_doc_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff"}, "4ad7bd47-b5b8-4316-9a01-887681b6d4d6": {"doc_hash": "66135590ee3698d7636d4151ad81f9c3349b10e92723c2744c8b387c36a9562b", "ref_doc_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff"}, "a2a9ae99-f2fe-4e18-8bcc-531b8d2af07b": {"doc_hash": "676238c6a9d0720157c763067d19c8c3e60acd60fa761c3d2d38fd71b48d5e55", "ref_doc_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff"}, "a861a8b0-0abd-4be5-ac1e-936fc9e1e131": {"doc_hash": "4dc26dbfd5cd2c8554c2692b75ef7fed64ca8951f35fa47e2f2434207ea6e4fa", "ref_doc_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff"}, "e084a1ad-5008-4019-86fa-207f6a48e586": {"doc_hash": "d2e4a5192b2ecb8acd0d02a7be9836dc2921255b3ad183c6780037fc56fb8327", "ref_doc_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff"}, "8a58831b-1774-490f-a2fa-11f62bca6394": {"doc_hash": "1194daa7680d59f87c9bb3f3fe64163e8532036b5552967e3cd362719d8a3e94", "ref_doc_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff"}, "4beb5687-ef06-4d2f-bfe1-c9cd138fe8a7": {"doc_hash": "4355c38417149d2a66f3a22cc9b654f309bea4747465a87cf5081b14fc8b0035", "ref_doc_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff"}, "4152e714-3d86-44f5-aaad-b717a986f78b": {"doc_hash": "e45e3293397f4436df2cdc39ffa18dee325a3e8fbb6552c1ea0eeb6b09cc71d0", "ref_doc_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff"}, "48ff92b5-efdc-4aeb-abf4-a637e49644ae": {"doc_hash": "45d13e9ba6e4a72d55e754d41086733c223d03cdddbddba8dc69559244f4a99c", "ref_doc_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff"}}, "docstore/data": {"e1dfc3e8-fb4d-4892-8ea6-7a7b7e998d32": {"__data__": {"id_": "e1dfc3e8-fb4d-4892-8ea6-7a7b7e998d32", "embedding": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "de8c88bf2b5f69b73991c64876f77aef195024024857c868bc3b89e2e8a7cc71"}, "3": {"node_id": "ceddc14b-7088-43e3-b079-dad4dacdbc0c", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "a8716dda5ac47212793f8ffdaa6180b79da2f79aff6017c49d025669c72a13c8"}}, "hash": "d5fc75fa063fb7f7a0b2de71621a8c0e4b675227d4a5ff4a1564d90df0c731f7", "text": "Low Power Design\n\nThe Notecard is designed to be battery operated, with low current consumption, making it an ideal choice for low power applications. Because of its low power design, in many applications, a host processor and its peripherals will be larger contributors to power drain.\n\nTo help designers and developers build low power applications, the Notecard implements two tools:\n\nA power management technique that allows firmware developers to regulate modem activity on the Notecard as a function of available energy.\nA design technique that allows the Notecard to shut the host processor down completely, for dramatic power savings.\nNote\n\nAs a low-power device (consuming only ~8uA when idle), the Notecard was built to be continuously powered. This is important to know because certain features of the Notecard require the current time, which is established upon the Notecard successfully connecting to a cellular network upon startup.\n\nModem Power Management\n\nIn battery-operated systems, and in particular those using energy harvesting approaches like solar power, the energy available to a processor and its peripherals rises and falls, sometimes between extreme levels. The Notecard is extremely low power in its idle state, and when staging data with note.add requests, but uses a nontrivial amount of energy when the modem is on and transmitting to and receiving data from a network.\n\nWhen designing a system that utilizes the Notecard, its a good idea to vary Notehub connection intervals based on the energy available to the system as monitored through a host's use of a fuel gauge or Power management integrated circuit (PMIC). Using the information available to the host, you can use hub.set to configure the Notecard's connection mode, as well as voltage-variable settings for inbound and outbound data synchronization.\n\nFor example, when ample energy is available in the system, you may prefer to sync outbound Notes each hour and process inbound data every two", "start_char_idx": 0, "end_char_idx": 1983, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ceddc14b-7088-43e3-b079-dad4dacdbc0c": {"__data__": {"id_": "ceddc14b-7088-43e3-b079-dad4dacdbc0c", "embedding": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "de8c88bf2b5f69b73991c64876f77aef195024024857c868bc3b89e2e8a7cc71"}, "2": {"node_id": "e1dfc3e8-fb4d-4892-8ea6-7a7b7e998d32", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "d5fc75fa063fb7f7a0b2de71621a8c0e4b675227d4a5ff4a1564d90df0c731f7"}, "3": {"node_id": "1892323a-bdb4-438b-b200-7ad3e585113b", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "f9c6cae32fe056f052fa843e938995403e131c406c4c11af259bf80a7d074374"}}, "hash": "a8716dda5ac47212793f8ffdaa6180b79da2f79aff6017c49d025669c72a13c8", "text": "system, you may prefer to sync outbound Notes each hour and process inbound data every two hours.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"mode\": \"periodic\",\n  \"outbound\": 60,\n  \"inbound\": 120\n}\n\nIn a hub.set request, the outbound is the maximum latency between changes made at the Notecard (Notes or environment variables), and when the Notecard attempts to sync changes to Notehub. inbound is the maximum latency between syncs with the Notehub to check for changes to Notefiles and environment variables that need to propagate to the Notecard.\n\nIf, as the product is running, the host detects that available energy is low, a subsequent hub.set request can be issued to adjust the inbound and outbound sync intervals accordingly. For instance, the following request instructs the Notecard to sync outbound Notes every eight hours, and process inbound data once per day.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"mode\": \"periodic\",\n  \"outbound\": 480,\n  \"inbound\": 1440\n}\n\nIn extreme cases, available power may be so low that you need to instruct the Notecard to keep the modem off completely, and until instructed otherwise. To do this, use the off mode.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"mode\": \"off\"\n}\nVoltage-Variable Sync Behavior\n\nEach of the examples above require the host to track power levels and manually intervene to instruct the Notecard to modify its sync behaviors. Alternatively, the Notecard can automatically adjust its sync behavior with voltage-variable arguments in a hub.set request. Instead of using outbound and inbound to specify sync intervals, you can use voutbound and", "start_char_idx": 1909, "end_char_idx": 3534, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1892323a-bdb4-438b-b200-7ad3e585113b": {"__data__": {"id_": "1892323a-bdb4-438b-b200-7ad3e585113b", "embedding": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "de8c88bf2b5f69b73991c64876f77aef195024024857c868bc3b89e2e8a7cc71"}, "2": {"node_id": "ceddc14b-7088-43e3-b079-dad4dacdbc0c", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "a8716dda5ac47212793f8ffdaa6180b79da2f79aff6017c49d025669c72a13c8"}, "3": {"node_id": "9bbdbff2-850b-4f0c-b590-a322e2d89e16", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "81211d483692cff1056e282e58623511d1c232c80e035383e6cc14603fcf225f"}}, "hash": "f9c6cae32fe056f052fa843e938995403e131c406c4c11af259bf80a7d074374", "text": "using outbound and inbound to specify sync intervals, you can use voutbound and vinbound.\n\nBoth arguments expect semicolon-delimited string values with intervals that correspond to a battery state. The pre-defined Notecard battery states are:\n\nusb\nhigh\nnormal\nlow\ndead\n\nWhen the Notecard's power source is in a given state, it will adjust the period based on the values defined in the voutbound and vinbound strings. Note: a 0 value for any state disables that timer as a trigger for sync activity.\n\nFor instance, if you wanted to sync outbound every 30 minutes and inbound every hour when the battery is at full strength, and throttle back as available power decreases, send a request like this:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"mode\": \"periodic\",\n  \"voutbound\": \"usb:30;high:60;normal:90;low:120;dead:0\",\n  \"vinbound\": \"usb:60;high:120;normal:240;low:480;dead:0\"\n}\n\nLikewise, you can use a shorter syntax to express \"if USB-powered, sync every 30 minutes, otherwise sync every 60 minutes\" with \"usb:30;60\".\n\nYou can confirm these settings with the response from a hub.get request:\n\nCOPY\n{\n \"voutbound\": \"usb:30;high:60;normal:90;low:120;dead:0\",\n \"vinbound\": \"usb:60;high:120;normal:240;low:480;dead:0\",\n \"mode\": \"periodic\",\n \"host\": \"a.notefile.net\",\n \"product\": \"com.your-company.your-name:your_product\",\n \"device\": \"dev:0000000000000\"\n}\nUSB/Line Power Variable Sync Behavior\n\nWhen in development, you may want to maintain a continuous connection to Notehub when your device", "start_char_idx": 3543, "end_char_idx": 5037, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9bbdbff2-850b-4f0c-b590-a322e2d89e16": {"__data__": {"id_": "9bbdbff2-850b-4f0c-b590-a322e2d89e16", "embedding": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "de8c88bf2b5f69b73991c64876f77aef195024024857c868bc3b89e2e8a7cc71"}, "2": {"node_id": "1892323a-bdb4-438b-b200-7ad3e585113b", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "f9c6cae32fe056f052fa843e938995403e131c406c4c11af259bf80a7d074374"}, "3": {"node_id": "77784b29-f25e-4391-bdb9-6b737d5823f2", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "4a04ee7039d5d48de4b530bdebe9da16abd414f9a148f8178bc9af7a04fa54f8"}}, "hash": "81211d483692cff1056e282e58623511d1c232c80e035383e6cc14603fcf225f", "text": "in development, you may want to maintain a continuous connection to Notehub when your device is USB/line-powered, but return to periodic, minimum, or off sync modes when USB/line power is disconnected. This capability is available as of the LTS 4.1.1 Notecard firmware release.\n\nFallback to Periodic Mode\n\nThe uperiodic argument in a hub.set request configures the Notecard to use periodic mode when USB/line power is disconnected.\n\nIn the following example, when the Notecard has USB/line power it operates in continuous mode, with inbound Notefiles synced immediately and outbound Notefiles synced every minute. If USB/line power is disconnected, the Notecard changes to periodic mode and syncs Notefiles every hour.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"mode\": \"continuous\",\n  \"sync\": true,\n  \"voutbound\": \"usb:1;60\",\n  \"uperiodic\": true\n}\nFallback to Minimum or Off Modes\n\nLikewise, you can fallback to minimum mode or off mode when USB/line power is disconnected with the umin or uoff arguments, respectively.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"mode\": \"continuous\",\n  \"sync\": true,\n  \"voutbound\": \"usb:1;60\",\n  \"umin\": true\n}\nHost Power Management\n\nIf needed in your design, the Notecard can also manage the power state of its host using the card.attn request.\n\nWarning\n\nAdditional Connection Required\n\nAs with the other uses of card.attn, this feature requires an additional physical connection between the Notecard and host beyond the default I2C or Serial connection for communication. In order to leverage the host power management feature described here, the Notecard ATTN pin must be wired to an EN or regulator", "start_char_idx": 5027, "end_char_idx": 6674, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "77784b29-f25e-4391-bdb9-6b737d5823f2": {"__data__": {"id_": "77784b29-f25e-4391-bdb9-6b737d5823f2", "embedding": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "de8c88bf2b5f69b73991c64876f77aef195024024857c868bc3b89e2e8a7cc71"}, "2": {"node_id": "9bbdbff2-850b-4f0c-b590-a322e2d89e16", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "81211d483692cff1056e282e58623511d1c232c80e035383e6cc14603fcf225f"}, "3": {"node_id": "0c30c21d-1e6b-4a8e-9279-3b2e9677c5cc", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "ff665db89d1cf57323f531ce0bcbae456012dbab64ab3ecd939365f2bf7c4780"}}, "hash": "4a04ee7039d5d48de4b530bdebe9da16abd414f9a148f8178bc9af7a04fa54f8", "text": "feature described here, the Notecard ATTN pin must be wired to an EN or regulator pin on the host.\n\nTo utilize this feature, upon each boot, the host sends card.attn request to determine if the host is in an initial boot, or is being awakened from sleep.\n\nFirst, the host configures this mode by passing sleep into the mode argument of a card.attn request, as well as a number of seconds to sleep.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.attn\",\n  \"mode\": \"sleep\",\n  \"seconds\": 3600\n}\n\nWhen this request is received, the Notecard pulls the ATTN pin LOW, and the host can respond by placing itself into a sleep or low power mode. After the seconds interval has elapsed, the ATTN pin is pulled HIGH. Upon restart, the host should send a no argument card.attn request. The response will include the value timeout to indicate a timeout as the reason for the pulling the pin HIGH.\n\nCOPY\n{\n \"files\": [\n  \"timeout\"\n ],\n \"set\": true\n}\n\nIf nonvolatile memory is at a premium or nonexistent on the host, the Notecard can hold data in memory on behalf of the host in the form of a Base64-encoded string. This string should be provided with a payload argument during the sleep mode call to card.attn.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.attn\",\n  \"mode\": \"sleep\",\n  \"seconds\": 3600,\n  \"payload\": \"ewogICJpbnRlcnZhbHMiOiI2MCwxMiwxNCIKfQ==\"\n}\n\nWhen the host reawakens, the payload is retrieved by setting start to true in a card.attn request.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\":", "start_char_idx": 6686, "end_char_idx": 8153, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0c30c21d-1e6b-4a8e-9279-3b2e9677c5cc": {"__data__": {"id_": "0c30c21d-1e6b-4a8e-9279-3b2e9677c5cc", "embedding": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "de8c88bf2b5f69b73991c64876f77aef195024024857c868bc3b89e2e8a7cc71"}, "2": {"node_id": "77784b29-f25e-4391-bdb9-6b737d5823f2", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "4a04ee7039d5d48de4b530bdebe9da16abd414f9a148f8178bc9af7a04fa54f8"}, "3": {"node_id": "4ad7bd47-b5b8-4316-9a01-887681b6d4d6", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "66135590ee3698d7636d4151ad81f9c3349b10e92723c2744c8b387c36a9562b"}}, "hash": "ff665db89d1cf57323f531ce0bcbae456012dbab64ab3ecd939365f2bf7c4780", "text": " \"req\": \"card.attn\",\n  \"start\": true\n}\n\nThe response object also includes the UNIX Epoch time at which the payload was stored.\n\nCOPY\n{\n \"payload\": \"ewogICJpbnRlcnZhbHMiOiI2MCwxMiwxNCIKfQ==\",\n \"files\": [\n  \"timeout\"\n ],\n \"time\": 1599064794,\n \"set\": true\n}\nVoltage Monitoring\n\nIn some hardware designs, the Notecard's V+ will be connected directly to a battery. This approach is ideal for ensuring that potential current spikes during wireless transmission are served directly from the product's power source. What's more, the low standby power draw of the Notecard minimizes the potential downsides of this approach.\n\nTo measure the voltage on the Notecard's V+ pin, and obtain historical voltage information, use the card.voltage request with \"mode\":\"?\".\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.voltage\",\n  \"mode\": \"?\"\n}\n\nThis request will return an object with the current power mode (or usb if the Notecard is being powered by a USB connection), the current voltage value, and the number of hours available for the Notecard to use for trend analysis. It will also return the minimum (vmin), maximum (vmax), and average (vavg) voltages during that time frame.\n\nAs of Notecard firmware v3.2.1, four additional boolean values may appear in the response if the Notecard is connected to USB power (\"usb\": true), the cellular modem is active (\"cell\": true), the Wi-Fi radio is active (\"wifi\": true), and/or the GPS module is active (\"gps\": true).\n\nFinally, the object includes values indicating the moving average in voltage over the past 24 hours (daily), 7 days (weekly), and", "start_char_idx": 8215, "end_char_idx": 9789, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4ad7bd47-b5b8-4316-9a01-887681b6d4d6": {"__data__": {"id_": "4ad7bd47-b5b8-4316-9a01-887681b6d4d6", "embedding": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "de8c88bf2b5f69b73991c64876f77aef195024024857c868bc3b89e2e8a7cc71"}, "2": {"node_id": "0c30c21d-1e6b-4a8e-9279-3b2e9677c5cc", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "ff665db89d1cf57323f531ce0bcbae456012dbab64ab3ecd939365f2bf7c4780"}, "3": {"node_id": "a2a9ae99-f2fe-4e18-8bcc-531b8d2af07b", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "676238c6a9d0720157c763067d19c8c3e60acd60fa761c3d2d38fd71b48d5e55"}}, "hash": "66135590ee3698d7636d4151ad81f9c3349b10e92723c2744c8b387c36a9562b", "text": "the moving average in voltage over the past 24 hours (daily), 7 days (weekly), and 30 days (monthly), if those values are relevant to the time period analyzed.\n\nCOPY\n{\n \"usb\": true,\n \"hours\": 120,\n \"mode\": \"usb\",\n \"value\": 5.112190219747135,\n \"vmin\": 4,\n \"vmax\": 4,\n \"vavg\": 4\n}\n\nA card.voltage request can be customized to analyze a developer-defined number of hours with the hours argument. This argument can be any whole number up to 720 (30 days) and it defaults to use all of the data available to the Notecard.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.voltage\",\n  \"hours\": 8\n}\n\nYou can also use the offset argument to instruct the Notecard to go back a set number of hours into the past before starting analysis.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.voltage\",\n  \"hours\": 24,\n  \"offset\": 48\n}\n\nFinally, you can use the vmax and vmin arguments to tell the Notecard to ignore voltage measurements above or below a certain level, respectively.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.voltage\",\n  \"hours\": 300,\n  \"vmax\": 4,\n  \"vmin\": 2.2\n}\nTemperature Monitoring\n\nSometimes a product will be deployed in environments where extreme temperatures may affect battery performance. In these situations, you may need to know the temperature within the electronics enclosure. The Notecard has a calibrated absolute temperature sensor that can be used to measure the temperature around the Notecard with a card.temp request.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\":", "start_char_idx": 9728, "end_char_idx": 11184, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a2a9ae99-f2fe-4e18-8bcc-531b8d2af07b": {"__data__": {"id_": "a2a9ae99-f2fe-4e18-8bcc-531b8d2af07b", "embedding": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "de8c88bf2b5f69b73991c64876f77aef195024024857c868bc3b89e2e8a7cc71"}, "2": {"node_id": "4ad7bd47-b5b8-4316-9a01-887681b6d4d6", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "66135590ee3698d7636d4151ad81f9c3349b10e92723c2744c8b387c36a9562b"}, "3": {"node_id": "a861a8b0-0abd-4be5-ac1e-936fc9e1e131", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "4dc26dbfd5cd2c8554c2692b75ef7fed64ca8951f35fa47e2f2434207ea6e4fa"}}, "hash": "676238c6a9d0720157c763067d19c8c3e60acd60fa761c3d2d38fd71b48d5e55", "text": " \"req\": \"card.temp\"\n}\n\nThis request returns an object with the temperature in degrees centigrade, and a calibration value. The calibration value, taken together with the temp value means that the Notecard measured a value of 29.3125, which was adjusted to 26.3125 before being returned.\n\nCOPY\n{\n \"value\": 26.3125,\n \"calibration\": -3\n}\nWarning\n\nNotecard temperature readings are performed by the device's onboard accelerometer. If the accelerometer is disabled with a card.motion.mode request, card.temp will return an error.\n\nCOPY\n{\n  \"err\": \"temperature is not available if accelerometer was disabled with card.motion.mode\"\n}\nMotion Monitoring\n\nThe Notecard includes a three-axis accelerometer that can be used to detect the orientation of the module or when the Notecard is in motion with a card.motion request.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.motion\"\n}\n\nWhen passed with no arguments, the Notecard responds with a count of the number of motion events since the last time the request was made, a motion field with the UNIX Epoch time of the last motion event, and an alert field if a free-fall was detected since the last call.\n\nThe response will also include the current device orientation in the status field. The orientation will be one of the following values:\n\nface-up\nface-down\nportrait-up\nportrait-down\nlandscape-right\nlandscape-left\nCOPY\n{\n  \"status\": \"face-down\",\n  \"motion\": 1599073299,\n  \"count\": 1\n}\nRetrieving Motion Results Over a Time Period\n\nBy default, card.motion returns a single orientation status and a count of motion events. You can also use the minutes argument to specify an amount of time to sample for", "start_char_idx": 11247, "end_char_idx": 12886, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a861a8b0-0abd-4be5-ac1e-936fc9e1e131": {"__data__": {"id_": "a861a8b0-0abd-4be5-ac1e-936fc9e1e131", "embedding": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "de8c88bf2b5f69b73991c64876f77aef195024024857c868bc3b89e2e8a7cc71"}, "2": {"node_id": "a2a9ae99-f2fe-4e18-8bcc-531b8d2af07b", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "676238c6a9d0720157c763067d19c8c3e60acd60fa761c3d2d38fd71b48d5e55"}, "3": {"node_id": "e084a1ad-5008-4019-86fa-207f6a48e586", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "d2e4a5192b2ecb8acd0d02a7be9836dc2921255b3ad183c6780037fc56fb8327"}}, "hash": "4dc26dbfd5cd2c8554c2692b75ef7fed64ca8951f35fa47e2f2434207ea6e4fa", "text": "events. You can also use the minutes argument to specify an amount of time to sample for buckets of movement.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.motion\",\n  \"minutes\": 5\n}\n\nWhen card.motion is used in this manner, the Notecard will return a movements field of movement buckets (up to 250 samples). Each character is a base 36 value (0-9, A-Z and * to indicate a value greater than 35) that shows the most-recent to least-recent number of movements for each bucket during the amount of time sampled. A seconds field, which signifies the size of each bucket, is also returned.\n\nCOPY\n{\n \"count\": 17,\n \"seconds\": 5,\n \"status\": \"face-up\",\n \"movements\": \"520000000000000000000A\",\n \"motion\": 1599074347\n}\n\nIn the example above, the Notecard detected five movements in the first (or, most-recent) bucket, two in the second, and ten in the last. No movement was detected for all of the other buckets.\n\nConfiguring Motion Monitoring\n\nIf you need finer-grained control over motion tracking on the Notecard, use the card.motion.mode request. With this request, you can stop motion monitoring with the stop argument. Once sent, subsequent calls to card.motion return an empty JSON object ({}).\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.motion.mode\",\n  \"stop\": true\n}\n\nUse the start argument to turn motion monitoring back on:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.motion.mode\",\n  \"start\": true\n}\nWarning\n\nThe Notecard uses its onboard accelerometer to perform temperature readings in response to card.temp requests. If you need this feature in your app, make", "start_char_idx": 12821, "end_char_idx": 14373, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e084a1ad-5008-4019-86fa-207f6a48e586": {"__data__": {"id_": "e084a1ad-5008-4019-86fa-207f6a48e586", "embedding": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "de8c88bf2b5f69b73991c64876f77aef195024024857c868bc3b89e2e8a7cc71"}, "2": {"node_id": "a861a8b0-0abd-4be5-ac1e-936fc9e1e131", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "4dc26dbfd5cd2c8554c2692b75ef7fed64ca8951f35fa47e2f2434207ea6e4fa"}, "3": {"node_id": "8a58831b-1774-490f-a2fa-11f62bca6394", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "1194daa7680d59f87c9bb3f3fe64163e8532036b5552967e3cd362719d8a3e94"}}, "hash": "d2e4a5192b2ecb8acd0d02a7be9836dc2921255b3ad183c6780037fc56fb8327", "text": "in response to card.temp requests. If you need this feature in your app, make sure that card.motion.mode is active or card.temp requests will return an error.\n\nYou can also use the seconds argument to specify a period for each bucket when using the minutes argument with card.motion. For instance, the following request sets the bucket size to 30 seconds:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.motion.mode\",\n  \"seconds\": 30\n}\n\nIf you then perform another request to card.motion and set the minutes argument to 2, the response will return a movements string with four characters, one for each 30 second bucket of motion.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.motion\",\n  \"minutes\": 2\n}\nCOPY\n{\n  \"seconds\": 30,\n  \"status\": \"face-up\",\n  \"movements\": \"1010\",\n  \"motion\": 1599074347\n}\n\nFinally, if you need to adjust the sensitivity of the accelerometer, use the sensitivity field. The default sample rate of 1.6Hz could miss short-duration accelerations (e.g. bumps and jolts), and free fall detection may not work reliably with short falls. The penalty for increasing the sample rate to 25Hz is increased current consumption by ~1.5uA relative to the default -1 setting.\n\n-1: 1.6Hz, +/-2G range, 1 milli-G sensitivity (default)\n1: 25Hz, +/- 16G range, 7.8 milli-G sensitivity\n2: 25Hz, +/- 8G range, 3.9 milli-G sensitivity\n3: 25Hz, +/- 4G range, 1.95 milli-G sensitivity\n4: 25Hz, +/- 2G range, 1 milli-G sensitivity\n5: 25Hz, +/- 2G range, 0.25 milli-G", "start_char_idx": 14382, "end_char_idx": 15835, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8a58831b-1774-490f-a2fa-11f62bca6394": {"__data__": {"id_": "8a58831b-1774-490f-a2fa-11f62bca6394", "embedding": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "de8c88bf2b5f69b73991c64876f77aef195024024857c868bc3b89e2e8a7cc71"}, "2": {"node_id": "e084a1ad-5008-4019-86fa-207f6a48e586", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "d2e4a5192b2ecb8acd0d02a7be9836dc2921255b3ad183c6780037fc56fb8327"}, "3": {"node_id": "4beb5687-ef06-4d2f-bfe1-c9cd138fe8a7", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "4355c38417149d2a66f3a22cc9b654f309bea4747465a87cf5081b14fc8b0035"}}, "hash": "1194daa7680d59f87c9bb3f3fe64163e8532036b5552967e3cd362719d8a3e94", "text": "25Hz, +/- 2G range, 0.25 milli-G sensitivity\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.motion.mode\",\n  \"sensitivity\": 3\n}\nAutomatic Motion Capture\n\nTo automatically store motion events as Notes in a Notefile, use the card.motion.track request and the start argument. If successful, calls to this request return an empty JSON object ({}).\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.motion.track\",\n  \"start\": true\n}\n\nBy default, the Notecard stores motion events in a Notefile called _motion.qo. You can specify your own Notefile with the file argument. You can also use the minutes to specify the maximum frequency at which Notes will be recorded, count for the number of most recent buckets to examine, and threshold to specify the number of buckets that must indicate motion in order for a tracking Note to be added.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.motion.track\",\n  \"start\": true,\n  \"minutes\": 5,\n  \"count\": 10,\n  \"threshold\": 2,\n  \"file\": \"movements.qo\"\n}\n\nWith the now argument set to true, the Notecard will immediately create a _motion.qo event if the orientation of the Notecard changes (overriding the minutes setting).\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.motion.track\",\n  \"start\": true,\n  \"minutes\": 5,\n  \"count\": 10,\n  \"threshold\": 2,\n  \"file\": \"movements.qo\",\n  \"now\": true\n}\n\nTo stop automatic motion capture, use the stop argument.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\":", "start_char_idx": 15873, "end_char_idx": 17261, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4beb5687-ef06-4d2f-bfe1-c9cd138fe8a7": {"__data__": {"id_": "4beb5687-ef06-4d2f-bfe1-c9cd138fe8a7", "embedding": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "de8c88bf2b5f69b73991c64876f77aef195024024857c868bc3b89e2e8a7cc71"}, "2": {"node_id": "8a58831b-1774-490f-a2fa-11f62bca6394", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "1194daa7680d59f87c9bb3f3fe64163e8532036b5552967e3cd362719d8a3e94"}, "3": {"node_id": "4152e714-3d86-44f5-aaad-b717a986f78b", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "e45e3293397f4436df2cdc39ffa18dee325a3e8fbb6552c1ea0eeb6b09cc71d0"}}, "hash": "4355c38417149d2a66f3a22cc9b654f309bea4747465a87cf5081b14fc8b0035", "text": " \"req\": \"card.motion.track\",\n  \"stop\": true\n}\nConfiguring Sync on Notecard Motion\n\nFinally, use the card.motion.sync to configure automatic syncs to Notehub based on Notecard movement. Use the start argument to turn this feature on:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.motion.sync\",\n  \"start\": true\n}\n\nAnd stop to turn it off:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.motion.sync\",\n  \"stop\": true\n}\n\nFor finer-grained control, use the minutes argument to specify the maximum frequency at which a sync will be initiated, count for the number of most recent buckets to examine, and threshold to specify the number of buckets that must indicate motion in order for sync to be triggered.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.motion.sync\",\n  \"start\": true,\n  \"minutes\": 20,\n  \"count\": 20,\n  \"threshold\": 5\n}\nCustomizing Voltage-Variable Behaviors\n\nA number of requests in the Notecard API, like hub.set and card.location can be configured to use voltage-variable behaviors to perform battery- intensive actions like a sync or tracking location with GPS. If your product battery (a LiPo, for instance) allows you to use voltage as a proxy for the available energy left in the battery, use the card.voltage API's mode argument to specify voltage values that correspond to the following battery states:\n\nusb\nhigh\nnormal\nlow\ndead\n\nFor instance, if powering a project with a LiPo battery, you'd use the following for the mode argument:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.voltage\",\n  \"mode\":", "start_char_idx": 17283, "end_char_idx": 18778, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4152e714-3d86-44f5-aaad-b717a986f78b": {"__data__": {"id_": "4152e714-3d86-44f5-aaad-b717a986f78b", "embedding": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "de8c88bf2b5f69b73991c64876f77aef195024024857c868bc3b89e2e8a7cc71"}, "2": {"node_id": "4beb5687-ef06-4d2f-bfe1-c9cd138fe8a7", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "4355c38417149d2a66f3a22cc9b654f309bea4747465a87cf5081b14fc8b0035"}, "3": {"node_id": "48ff92b5-efdc-4aeb-abf4-a637e49644ae", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "45d13e9ba6e4a72d55e754d41086733c223d03cdddbddba8dc69559244f4a99c"}}, "hash": "e45e3293397f4436df2cdc39ffa18dee325a3e8fbb6552c1ea0eeb6b09cc71d0", "text": " \"req\": \"card.voltage\",\n  \"mode\": \"lipo\"\n}\n\nConsult the card.voltage API docs for a complete listing of the mode options.\n\nIf you need to customize the battery state voltage levels, you can use the mode field as well.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.voltage\",\n  \"mode\": \"usb:4.6;high:4.2;normal:3.6;low:0\"\n}\n\nIf your application needs to use a similar approach for timing intervals against a connected sensor or peripheral, you can use the name argument to specify an environment variable. This variable can then be set in Notehub to override application default timing values.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.voltage\",\n  \"mode\": \"lipo\",\n  \"name\": \"sensor-timings\"\n}\nSampling at Voltage-variable Intervals\n\nIf the Notecard is sampling in periodic mode and you want to minimize the impact of GPS on the battery powering your project, use the vseconds argument to instruct the device to take the charge of your battery into consideration when obtaining GPS readings.\n\nThe vseconds argument should be a semicolon-delimited string that defines a period for each state of your battery. The pre-defined Notecard battery states are:\n\nusb\nhigh\nnormal\nlow\ndead\n\nWhen the Notecard's battery is in a given state, it will adjust the period based on the values defined in the vseconds string.\n\nFor instance, if you wanted to sample GPS once per hour when the battery is full, but scale back the sample rate as the power decreases, you'd provide a vseconds string like this:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.location.mode\",\n  \"mode\":", "start_char_idx": 18756, "end_char_idx": 20301, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "48ff92b5-efdc-4aeb-abf4-a637e49644ae": {"__data__": {"id_": "48ff92b5-efdc-4aeb-abf4-a637e49644ae", "embedding": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f18492fc-2ce5-47cd-986c-92dcce8b2cff", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "de8c88bf2b5f69b73991c64876f77aef195024024857c868bc3b89e2e8a7cc71"}, "2": {"node_id": "4152e714-3d86-44f5-aaad-b717a986f78b", "node_type": null, "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}, "hash": "e45e3293397f4436df2cdc39ffa18dee325a3e8fbb6552c1ea0eeb6b09cc71d0"}}, "hash": "45d13e9ba6e4a72d55e754d41086733c223d03cdddbddba8dc69559244f4a99c", "text": " \"req\": \"card.location.mode\",\n  \"mode\": \"periodic\",\n  \"vseconds\": \"usb:3600;high:14400;normal:43200;low:86400;dead:0\"\n}\n\nThis will return an object confirming that the Notecard is in periodic mode and that GPS should be sampled at a voltage-variable rate:\n\nCOPY\n{\n \"mode\": \"periodic\",\n \"vseconds\": \"usb:3600;high:14400;normal:43200;low:86400;dead:0\"\n}\n\nTo set the sample rate from a voltage variable rate back to a set rate, set vseconds to - and provide a new value for the seconds argument:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.location.mode\",\n  \"mode\": \"periodic\",\n  \"vseconds\": \"-\",\n  \"seconds\": 60\n}\n\nThis will return an object confirming that the Notecard is in periodic mode and sample GPS at a set rate:\n\nCOPY\n{\n \"mode\": \"periodic\",\n \"seconds\": 60\n}\nWeb Transactions\nLow Bandwidth Design\nCan we improve this page? Send us feedback", "start_char_idx": 20291, "end_char_idx": 21133, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"f18492fc-2ce5-47cd-986c-92dcce8b2cff": {"node_ids": ["e1dfc3e8-fb4d-4892-8ea6-7a7b7e998d32", "ceddc14b-7088-43e3-b079-dad4dacdbc0c", "1892323a-bdb4-438b-b200-7ad3e585113b", "9bbdbff2-850b-4f0c-b590-a322e2d89e16", "77784b29-f25e-4391-bdb9-6b737d5823f2", "0c30c21d-1e6b-4a8e-9279-3b2e9677c5cc", "4ad7bd47-b5b8-4316-9a01-887681b6d4d6", "a2a9ae99-f2fe-4e18-8bcc-531b8d2af07b", "a861a8b0-0abd-4be5-ac1e-936fc9e1e131", "e084a1ad-5008-4019-86fa-207f6a48e586", "8a58831b-1774-490f-a2fa-11f62bca6394", "4beb5687-ef06-4d2f-bfe1-c9cd138fe8a7", "4152e714-3d86-44f5-aaad-b717a986f78b", "48ff92b5-efdc-4aeb-abf4-a637e49644ae"], "metadata": {"title": "", "category": "Low Power Design", "url": "https://dev.blues.io/notecard/notecard-walkthrough/low-power-design/"}}}}