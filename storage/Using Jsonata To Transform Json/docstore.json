{"docstore/metadata": {"2f83afce-da0f-41a0-ac0c-aff5e36e2876": {"doc_hash": "961e3fa777a0a588119c880fdaac8a11d6122a1d38fc9c9d49f121a78b980977"}, "a20b8e1f-b840-4d87-bc4b-abba5b4f3376": {"doc_hash": "4f31773ec6363449911d320e2341979f7bcea796bd03944ea211ec4b6ec30a5d", "ref_doc_id": "2f83afce-da0f-41a0-ac0c-aff5e36e2876"}, "58255752-103e-457b-a131-289d4f914f10": {"doc_hash": "7097b5306e317d412ba8c7b58eda6198363711cf26f8a0d426b16850d2cd25bd", "ref_doc_id": "2f83afce-da0f-41a0-ac0c-aff5e36e2876"}, "d15a9930-873b-4343-8252-1d95d0defc71": {"doc_hash": "7c2e00beb6d512bf338415569ae5f979857de237f682c64e31472f164e43c820", "ref_doc_id": "2f83afce-da0f-41a0-ac0c-aff5e36e2876"}, "ef456a65-fd67-471c-accc-715cc905d0ef": {"doc_hash": "e2b55353533f8eb6a699b1c3e17cf25f6f8aeea985ae5e7b21082e7d73f27490", "ref_doc_id": "2f83afce-da0f-41a0-ac0c-aff5e36e2876"}, "cc43de60-086d-463f-97b1-3110d3434318": {"doc_hash": "8a78f22cd7f2bdb2346b37074e9eae998eec995fc79ee61e46cb691462db767e", "ref_doc_id": "2f83afce-da0f-41a0-ac0c-aff5e36e2876"}, "99bc3e80-0ecf-4bc1-a529-f5483ff28c81": {"doc_hash": "cfd4a44f069279e8a65c984c8362cfe4ccbcac83bb220f2ebd426ef567603478", "ref_doc_id": "2f83afce-da0f-41a0-ac0c-aff5e36e2876"}, "75fb8a56-9d66-4a29-9f65-8eb093d66d75": {"doc_hash": "ba1e14d8ac9ad96e9d0c4f99218550cadd26451d0fc62c0124332538b1835c59", "ref_doc_id": "2f83afce-da0f-41a0-ac0c-aff5e36e2876"}, "d635c3a9-a87a-4de5-8a73-b011a9370942": {"doc_hash": "afd61e1ff8aedc1a1baff80faea750e09d98735632de4b4201ffd98c5bf3c653", "ref_doc_id": "2f83afce-da0f-41a0-ac0c-aff5e36e2876"}}, "docstore/data": {"a20b8e1f-b840-4d87-bc4b-abba5b4f3376": {"__data__": {"id_": "a20b8e1f-b840-4d87-bc4b-abba5b4f3376", "embedding": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2f83afce-da0f-41a0-ac0c-aff5e36e2876", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "961e3fa777a0a588119c880fdaac8a11d6122a1d38fc9c9d49f121a78b980977"}, "3": {"node_id": "58255752-103e-457b-a131-289d4f914f10", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "7097b5306e317d412ba8c7b58eda6198363711cf26f8a0d426b16850d2cd25bd"}}, "hash": "4f31773ec6363449911d320e2341979f7bcea796bd03944ea211ec4b6ec30a5d", "text": "Using JSONata to Transform JSON\n\nJSONata is a JSON query and transformation language. In the context of Notehub, JSONata allows you to transform Notecard-generated JSON into a different structure before routing to external services.\n\nJSONata was inspired by XPath 3.1, so if you've performed XML querying or transformation in the past, JSONata will feel familiar to you. Even if you're unfamiliar, the syntax is simple and the documentation is comprehensive, so you'll find JSONata to be an easy way to transform your data.\n\nIn this guide you'll learn the basics of JSONata, how to test JSONata expressions, and how to create your own JSONata transformations in Notehub. Let's start by looking at how to test and experiment with JSONata.\n\nThe JSONata Exerciser\n\nJSONata provides a utility to practice creating well-formed JSONata expressions: the JSONata Exerciser. To use the JSONata Exerciser you place your input JSON in the left pane (see image below), and write a JSONata expression in the top-right pane. The Exerciser automatically applies the JSONata to the input JSON, and displays the result in the bottom-right pane.\n\nNote\n\nNotehub.io currently supports JSONata version 1.5.4 via our open-source jsonata-go library. To ensure that your transformations work in Notehub, you can change the target version number in the top-right dropdown of the JSONata exerciser to 1.5.4.\n\nCollect Notehub Event Data\n\nNow that you know how the JSONata explorer works, you'll next want to grab the JSON from a real Notehub event to use as your input.\n\nComplete the following steps to get a Notehub event's JSON.\n\nVisit Notehub and open the Notehub project that includes the device you're working with.\nOn your project's devices list, double click the device that is generating the data you want to transform.\nClick", "start_char_idx": 0, "end_char_idx": 1806, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "58255752-103e-457b-a131-289d4f914f10": {"__data__": {"id_": "58255752-103e-457b-a131-289d4f914f10", "embedding": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2f83afce-da0f-41a0-ac0c-aff5e36e2876", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "961e3fa777a0a588119c880fdaac8a11d6122a1d38fc9c9d49f121a78b980977"}, "2": {"node_id": "a20b8e1f-b840-4d87-bc4b-abba5b4f3376", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "4f31773ec6363449911d320e2341979f7bcea796bd03944ea211ec4b6ec30a5d"}, "3": {"node_id": "d15a9930-873b-4343-8252-1d95d0defc71", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "7c2e00beb6d512bf338415569ae5f979857de237f682c64e31472f164e43c820"}}, "hash": "7097b5306e317d412ba8c7b58eda6198363711cf26f8a0d426b16850d2cd25bd", "text": "devices list, double click the device that is generating the data you want to transform.\nClick the Events link in the top-right corner to view device-specific events.\nDouble click an event with a good sample of data.\nClick the event's JSON tab.\nCopy the JSON body of the event.\nPaste it into the JSONata Exerciser.\n\nYou can view these steps in action in the gif below.\n\nNow that you have your data pasted into the JSONata Exerciser, you can execute several methods of transformation. Let's see how it works.\n\nSimple Transformations\n\nBy default, nothing from the Event JSON appears in the JSONata output. This allows you to intentionally select properties and create your output.\n\nIn JSONata the input JSON's property names are available as variables without any special syntax. For example, suppose you wanted to send a JSON object that contains only an event's device to an external service. You can select the device field by referring to its name directly.\n\nCOPY\n{\n  \"device\": device\n}\n\nCreate Your Own JSON Structure\n\nBuilding on the previous example, sometimes you want to create your own JSON structure that includes a mix of data from your input JSON, and completely new properties. The following JSONata outputs a device property from the input JSON, and a newly created property and value.\n\nCOPY\n{\n  \"device\": device,\n  \"a_new_property\": \"a value\"\n}\n\nYou can also use JSONata to create a JSON object that uses a completely different structure than your input JSON. This can be useful if, for instance, you need send JSON to a system that expects JSON data in a completely different format.\n\nThe JSONata below creates a JSON object with a new data property that includes two properties from the input JSON.\n\nCOPY\n{\n  \"data\": {\n    \"device\": device,\n    \"when\": when\n  }\n}\n\nParsing", "start_char_idx": 1727, "end_char_idx": 3515, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d15a9930-873b-4343-8252-1d95d0defc71": {"__data__": {"id_": "d15a9930-873b-4343-8252-1d95d0defc71", "embedding": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2f83afce-da0f-41a0-ac0c-aff5e36e2876", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "961e3fa777a0a588119c880fdaac8a11d6122a1d38fc9c9d49f121a78b980977"}, "2": {"node_id": "58255752-103e-457b-a131-289d4f914f10", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "7097b5306e317d412ba8c7b58eda6198363711cf26f8a0d426b16850d2cd25bd"}, "3": {"node_id": "ef456a65-fd67-471c-accc-715cc905d0ef", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "e2b55353533f8eb6a699b1c3e17cf25f6f8aeea985ae5e7b21082e7d73f27490"}}, "hash": "7c2e00beb6d512bf338415569ae5f979857de237f682c64e31472f164e43c820", "text": "device,\n    \"when\": when\n  }\n}\n\nParsing with Built-in Functions\n\nIn addition to simple transformations, JSONata also offers several built-in functions that can help you parse data. Let's look a few examples of how you might use them in your own JSONata expressions.\n\nCurrently a Notehub event's JSON holds a cell tower's global identity, CGI, in a single field, tower_id.\n\nCOPY\n\"tower_id\": \"310,410,20483,185425416\",\n...\nSplit JSON Data\n\nLet's say you are sending the CGI to a service expecting a structure delineating each of the components. You can use JSONata's $split to break tower_id into its sub-components.\n\nCOPY\n{\n  \"tower\": {\n    \"cgi\": {\n      \"mobile_country_code\": $split(tower_id,\",\")[0],\n      \"mobile_network_code\": $split(tower_id,\",\")[1],\n      \"location_area_code\": $split(tower_id,\",\")[2],\n      \"cell_id\": $split(tower_id,\",\")[3]\n    },\n    \"city\": tower_location,\n    \"timezone\": tower_timezone\n  }\n}\n\nHere's what that looks like on the JSONata Exerciser. Note how the tower id is split into its constituent parts in the output.\n\nFormat a Date\n\nSuppose you are sending data to a service that expects a human readable date. You can use the JSONata fromMillis function to do that.\n\nCOPY\n{\n  \"time\": $fromMillis(when * 1000)\n}\n\nPerform Mathematical Operations\n\nIf you need to perform any mathematical operations on your JSON", "start_char_idx": 3564, "end_char_idx": 4907, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ef456a65-fd67-471c-accc-715cc905d0ef": {"__data__": {"id_": "ef456a65-fd67-471c-accc-715cc905d0ef", "embedding": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2f83afce-da0f-41a0-ac0c-aff5e36e2876", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "961e3fa777a0a588119c880fdaac8a11d6122a1d38fc9c9d49f121a78b980977"}, "2": {"node_id": "d15a9930-873b-4343-8252-1d95d0defc71", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "7c2e00beb6d512bf338415569ae5f979857de237f682c64e31472f164e43c820"}, "3": {"node_id": "cc43de60-086d-463f-97b1-3110d3434318", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "8a78f22cd7f2bdb2346b37074e9eae998eec995fc79ee61e46cb691462db767e"}}, "hash": "e2b55353533f8eb6a699b1c3e17cf25f6f8aeea985ae5e7b21082e7d73f27490", "text": "Operations\n\nIf you need to perform any mathematical operations on your JSON data, there are a variety of numeric functions available in JSONata. For example, you might want to use the $round() function to round your temperature values to the nearest whole number.\n\nCOPY\n{\n    \"temperature_rounded\": $round(body.temperature)\n}\n\nOther JSONata Functions\n\nThere are dozens of other built-in functions you might want to experiment with, including $trim() and $substring() for working with strings, or $floor() and $ceil() for working with numbers. Refer to the \u201cFunction Library\u201d section of the JSONata documentation for a full list.\n\nConditional Logic\n\nIn addition to functions, JSONata also allows you to perform conditional checks using the ternary operator.\n\nFor example, in an asset tracking scenario, you may want to route the location of the nearest cell tower, but only if the GPS location cannot be ascertained.\n\nThe following JSONata selects the GPS location (where_lat and where_lon) if it's available, and falls back to tower location (tower_lat and tower_lon) if it's not.\n\nCOPY\n{\n    \"position\": {\n      \"lat\": where_lat ? where_lat : tower_lat,\n      \"lng\": where_lon ? where_lon : tower_lon\n    }\n}\n\nCreating Custom Functions\n\nIf your logic is more advanced you can create reusable functions directly in JSONata.\n\nBefore you can define a custom function, you must introduce a scope using parenthesis ((,)). To declare either a function or a variable, you must use the colon-equal (:=) operator.\n\nFunctions themselves have additional rules to follow. First, you must identify a function using the function keyword, followed", "start_char_idx": 4875, "end_char_idx": 6508, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "cc43de60-086d-463f-97b1-3110d3434318": {"__data__": {"id_": "cc43de60-086d-463f-97b1-3110d3434318", "embedding": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2f83afce-da0f-41a0-ac0c-aff5e36e2876", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "961e3fa777a0a588119c880fdaac8a11d6122a1d38fc9c9d49f121a78b980977"}, "2": {"node_id": "ef456a65-fd67-471c-accc-715cc905d0ef", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "e2b55353533f8eb6a699b1c3e17cf25f6f8aeea985ae5e7b21082e7d73f27490"}, "3": {"node_id": "99bc3e80-0ecf-4bc1-a529-f5483ff28c81", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "cfd4a44f069279e8a65c984c8362cfe4ccbcac83bb220f2ebd426ef567603478"}}, "hash": "8a78f22cd7f2bdb2346b37074e9eae998eec995fc79ee61e46cb691462db767e", "text": "rules to follow. First, you must identify a function using the function keyword, followed by parenthesis with the names of the variables required by the function. If the function will be more than one line, then it must include an additional set of parenthesis inside the curly braces. Finally, each line of the function, as well as the function itself, should be followed by a semi-colon.\n\nCreating a Simple Custom Function\n\nA basic custom function in JSONata might involve simply adding two integers. In the following example, the $myAdd function accepts two arguments and adds them together.\n\nCOPY\n(\n    $myAdd := function($v1, $v2) {(\n        $v1 + $v2\n    )};\n    {\n        \"temp\": $myAdd(body.temperature, body.offset)\n    }\n)\n\nLocalizing Temperature Values\n\nSuppose you want to use the Notecard-reported temperature (temp in a _session.qo event), and localize the value to Celsius or Fahrenheit depending on the country.\n\nTo do that you can use the custom $localizeTemperature function below.\n\nCOPY\n(\n  $localizeTemperature := function($degrees_celsius, $country) {(\n    $conversion_ratio := (9 / 5);\n    ($country = \"US\" or $country = \"LR\")\n              ? (($degrees_celsius * $conversion_ratio) + 32)\n              : $degrees_celsius;\n  )};\n  {\n    \"temp\": $localizeTemperature(temp, tower_country)\n  }\n)\n\nNote that JSONata converted the temperature from Celsius to", "start_char_idx": 6498, "end_char_idx": 7873, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "99bc3e80-0ecf-4bc1-a529-f5483ff28c81": {"__data__": {"id_": "99bc3e80-0ecf-4bc1-a529-f5483ff28c81", "embedding": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2f83afce-da0f-41a0-ac0c-aff5e36e2876", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "961e3fa777a0a588119c880fdaac8a11d6122a1d38fc9c9d49f121a78b980977"}, "2": {"node_id": "cc43de60-086d-463f-97b1-3110d3434318", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "8a78f22cd7f2bdb2346b37074e9eae998eec995fc79ee61e46cb691462db767e"}, "3": {"node_id": "75fb8a56-9d66-4a29-9f65-8eb093d66d75", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "ba1e14d8ac9ad96e9d0c4f99218550cadd26451d0fc62c0124332538b1835c59"}}, "hash": "cfd4a44f069279e8a65c984c8362cfe4ccbcac83bb220f2ebd426ef567603478", "text": " }\n)\n\nNote that JSONata converted the temperature from Celsius to Fahrenheit because the tower_country was \"US\". You can modify the value of tower_country in your input JSON and watch the value switch back to Celsius.\n\nMerging Data with the Original JSON Structure\n\nIn some situations, you may want to write a custom function, but have it append data to the original JSON data structure (instead of replacing it completely). This is where the $merge() function is useful.\n\nIn this example, the pressure value is multiplied by a pressure_adjust value and merged with the body of the original JSON structure.\n\nCOPY\n(\n    $myMult := function($v1, $v2) {(\n        $v1 * $v2\n    )};\n    $merge([$, {\"body\": $merge([body, { \n        \"pressure_updated\": $myMult(body.pressure, body.pressure_adjust)\n    }])}])\n)\n\nSorting and Filtering JSON\n\nJSONata also allows you to sort and filter JSON data. For more information check out their order-by operator and filter operator.\n\nJSONata Transforms in Notehub Routes\n\nEverything covered so far in this guide apples to JSONata generically. Meaning, it's applicable to any program or service that utilizes JSONata. There are, however, some custom JSONata capabilities built into Notehub that allow you to create even more powerful JSONata expressions when you are transforming data in your Routes.\n\nConditionally Routing an Event\n\nIf you would like to conditionally route an Event based on a variable or a calculation, you may do so with the $doNotRoute() function.\n\nFor example, suppose you wish to route a temperature reading to an external service, but you only want to do so if a GPS location exists on the Event. You can", "start_char_idx": 7894, "end_char_idx": 9552, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "75fb8a56-9d66-4a29-9f65-8eb093d66d75": {"__data__": {"id_": "75fb8a56-9d66-4a29-9f65-8eb093d66d75", "embedding": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2f83afce-da0f-41a0-ac0c-aff5e36e2876", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "961e3fa777a0a588119c880fdaac8a11d6122a1d38fc9c9d49f121a78b980977"}, "2": {"node_id": "99bc3e80-0ecf-4bc1-a529-f5483ff28c81", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "cfd4a44f069279e8a65c984c8362cfe4ccbcac83bb220f2ebd426ef567603478"}, "3": {"node_id": "d635c3a9-a87a-4de5-8a73-b011a9370942", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "afd61e1ff8aedc1a1baff80faea750e09d98735632de4b4201ffd98c5bf3c653"}}, "hash": "ba1e14d8ac9ad96e9d0c4f99218550cadd26451d0fc62c0124332538b1835c59", "text": "but you only want to do so if a GPS location exists on the Event. You can do so with the following JSONata.\n\nCOPY\n(\n  $result := {\n    \"temp\": temp\n  };\n  $result := ($exists(where_location)) ?\n    $result : $doNotRoute();\n)\nNote\nJSONata exports the last declared variable in scope. This is why the value of $result becomes the output of the code above.\nBecause $doNotRoute() is a Notehub-specific function it does not exist in the JSONata Exerciser. You can still use the Exerciser for testing\u2014just expect a \u201cAttempted to invoke a non-function\u201d error if you hit a code path that invokes $doNotRoute().\n\nUsing Environment Variables\n\nEnvironment variables are a powerful way to manage state or configuration settings on a project, fleet, or device level. You can also access environment variables in JSONata expressions using JSONata's variable syntax of $.\n\nFor example, to read an environment variable named temperature_setting, you can use $temperature_setting in your JSONata expression.\n\nReturning a Custom Error Event\n\nIf routing data to a remote endpoint fails on the server side, an error icon will automatically appear next to the associated event in Notehub. You may also create a custom error that prevents the event from being routed, with the specified message appearing in the event pane.\n\nIn the following example, if the GPS location does not exist, a custom error event will be created:\n\nCOPY\n(\n  $result := {\n    \"temp\": temp\n  };\n  $result := ($exists(where_location)) ?\n    $result : $error(\"GPS location is missing!\");\n)\nComments\n\nWhile part of the JSONata standard, comments are not yet implemented in the jsonata-go library that powers JSONata expressions on", "start_char_idx": 9552, "end_char_idx": 11232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d635c3a9-a87a-4de5-8a73-b011a9370942": {"__data__": {"id_": "d635c3a9-a87a-4de5-8a73-b011a9370942", "embedding": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2f83afce-da0f-41a0-ac0c-aff5e36e2876", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "961e3fa777a0a588119c880fdaac8a11d6122a1d38fc9c9d49f121a78b980977"}, "2": {"node_id": "75fb8a56-9d66-4a29-9f65-8eb093d66d75", "node_type": null, "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}, "hash": "ba1e14d8ac9ad96e9d0c4f99218550cadd26451d0fc62c0124332538b1835c59"}}, "hash": "afd61e1ff8aedc1a1baff80faea750e09d98735632de4b4201ffd98c5bf3c653", "text": "are not yet implemented in the jsonata-go library that powers JSONata expressions on Notehub. However, they are enabled for use in JSONata expressions within Notehub with the /* */ syntax:\n\nCOPY\n/* this is a\n * multiline comment\n * in JSONata! */\nSummary\n\nBeing able to perform calculations in the cloud is an incredibly powerful feature. First, your original inputs are preserved as Events. Second, the transformations occur in the cloud and not in firmware. This allows you to modify the transformation without having to modify firmware.\n\nAll told, JSONata is a simple, powerful, and flexible tool, which comes in handy as you create Routes for your external services. To explore JSONata further, check out the docs at JSONata.org.\n\nAdditional Resources\nJSON.org\nJSONata.org\nJSONata Documentation\nNotehub Routing Tutorials\nJSONata-Go OSS Repository\nCan we improve this page? Send us feedback", "start_char_idx": 11205, "end_char_idx": 12098, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"2f83afce-da0f-41a0-ac0c-aff5e36e2876": {"node_ids": ["a20b8e1f-b840-4d87-bc4b-abba5b4f3376", "58255752-103e-457b-a131-289d4f914f10", "d15a9930-873b-4343-8252-1d95d0defc71", "ef456a65-fd67-471c-accc-715cc905d0ef", "cc43de60-086d-463f-97b1-3110d3434318", "99bc3e80-0ecf-4bc1-a529-f5483ff28c81", "75fb8a56-9d66-4a29-9f65-8eb093d66d75", "d635c3a9-a87a-4de5-8a73-b011a9370942"], "metadata": {"title": "", "category": "Using Jsonata To Transform Json", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/using-jsonata-to-transform-json/"}}}}