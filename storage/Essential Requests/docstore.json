{"docstore/metadata": {"fc70e665-e510-47c1-961b-64877535492c": {"doc_hash": "b322b1501b9a8fea00d4a1d9ccc6addd030fd1759eae6e37f3ebe750b1dea96d"}, "3d979570-6f17-424c-9490-070c7b4ffc95": {"doc_hash": "123028f51092a3f6c9002eded37b1879d82e4d5eed9c1d8593830fed042ed385", "ref_doc_id": "fc70e665-e510-47c1-961b-64877535492c"}, "a5d590eb-d08e-49a8-9ef2-27026b4e8767": {"doc_hash": "08bcabcdc500e0d780560d6523ec02d39b841506d65597b548b6b300b97b9078", "ref_doc_id": "fc70e665-e510-47c1-961b-64877535492c"}, "d6d67ff1-8782-4bf6-902d-a18e390f3bca": {"doc_hash": "7afb0e8acb80472ff7352ac21eab45cb6af500f788bf0ff525e99dc36e926bb5", "ref_doc_id": "fc70e665-e510-47c1-961b-64877535492c"}, "7dd0d731-7ba0-4cec-ad16-7416ffd2f077": {"doc_hash": "691ad51ea62b1b5bc285dc63cabed42cbda9736f4e54edeecb859ef95ac5d388", "ref_doc_id": "fc70e665-e510-47c1-961b-64877535492c"}, "daefa451-e5c6-4e37-8382-4b3303992522": {"doc_hash": "12dded6e5608b8a547f51b033f688c94ecf026e1917e1eb0fc4b982fb8fd6c3a", "ref_doc_id": "fc70e665-e510-47c1-961b-64877535492c"}, "45d00806-c6f8-4f43-bd16-641b9594b98e": {"doc_hash": "3487bc52444f9bb5f0f6d35290de1ee25855f3a0b0d145fa4d4210604ca7143b", "ref_doc_id": "fc70e665-e510-47c1-961b-64877535492c"}, "bea04f64-0a0b-41eb-b571-14db124f310b": {"doc_hash": "6a42d8d39463657ed0c3c16960fcb196356ab420bdc6c1f319b4d2cca0c934dc", "ref_doc_id": "fc70e665-e510-47c1-961b-64877535492c"}, "1ad39d27-3827-4468-a9b5-667545c0fd73": {"doc_hash": "40a0389880f62ce7e523eab12866ecf9d96ebfcd6f2f5790415df32d45dc6610", "ref_doc_id": "fc70e665-e510-47c1-961b-64877535492c"}, "09fb515e-c361-4cef-9bdf-d838aff42ab6": {"doc_hash": "eb4c03716012244b2bfe5f7f392adb8dffa38310f28af3ad288139c5bd387d0c", "ref_doc_id": "fc70e665-e510-47c1-961b-64877535492c"}, "85e710f1-c141-4210-82d0-b5e1d2b29b73": {"doc_hash": "63a37b96ec9485d2c350e768e7249d9c5162c600bb1c8ee025d1d16d1717c761", "ref_doc_id": "fc70e665-e510-47c1-961b-64877535492c"}, "b71f6045-5795-4b61-ac6b-d6fa9344fd3f": {"doc_hash": "f1a0ec2d74535ed0ab80f7fa397fae75c0281859cbd1294b18f3ecef8891024c", "ref_doc_id": "fc70e665-e510-47c1-961b-64877535492c"}, "01246087-99fa-47bc-bd8b-c8044fa7d9c7": {"doc_hash": "282682a491ba254229940b68d8d47b54a9d085fbe8def8c41616da1808467d4f", "ref_doc_id": "fc70e665-e510-47c1-961b-64877535492c"}, "1ae73b6c-61ae-44b8-aa0d-4a7b17d7a000": {"doc_hash": "9ba0ccee823ab6a65fbfddf4b8589cc4bd9c0a488a2bad29ac8ed64cddba4e86", "ref_doc_id": "fc70e665-e510-47c1-961b-64877535492c"}}, "docstore/data": {"3d979570-6f17-424c-9490-070c7b4ffc95": {"__data__": {"id_": "3d979570-6f17-424c-9490-070c7b4ffc95", "embedding": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc70e665-e510-47c1-961b-64877535492c", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "b322b1501b9a8fea00d4a1d9ccc6addd030fd1759eae6e37f3ebe750b1dea96d"}, "3": {"node_id": "a5d590eb-d08e-49a8-9ef2-27026b4e8767", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "08bcabcdc500e0d780560d6523ec02d39b841506d65597b548b6b300b97b9078"}}, "hash": "123028f51092a3f6c9002eded37b1879d82e4d5eed9c1d8593830fed042ed385", "text": "Essential Requests\n\nWhen building an embedded application with the Notecard, there are a number of essential API requests to know.\n\nNotehub Configuration hub.set\n\nEvery Notecard must be configured for your project before it can sync data to Notehub. The hub.set request is used to:\n\nAssign a Notehub ProductUID to the Notecard.\nOptionally set a Serial Number for the Notecard.\nConfigure the synchronization mode between the Notecard and Notehub.\nSetting a ProductUID & Serial Number\n\nMost of the time, your first request to the Notecard in a new application will be to set the ProductUID. This is done with the hub.set request and product argument, which will correspond to a ProductUID pre-configured in Notehub. If the Notecard attempts to sync with a missing ProductUID, the device will be rejected by Notehub.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"product\": \"your-productuid\"\n}\n\nOptionally, you can associate your product's serial number (as an arbitrary string) with the Notecard by using hub.set with the sn argument. This arbitrary field can be used to more easily identify devices in Notehub or your own cloud applications.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"product\": \"your-productuid\",\n  \"sn\": \"your-serial-number\"\n}\nConfiguring Synchronization Modes\n\nThe Notecard's connection to Notehub is configurable, and can be adjusted based on the battery and data needs of your application. The mode field of hub.set accepts the following values:\n\nperiodic - (Default) \"On demand\" mode. The Notecard will periodically power-on the modem and connect to Notehub whenever it needs to synchronize with the service, and will then power-off the modem when not in use.\ncontinuous -", "start_char_idx": 0, "end_char_idx": 1701, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a5d590eb-d08e-49a8-9ef2-27026b4e8767": {"__data__": {"id_": "a5d590eb-d08e-49a8-9ef2-27026b4e8767", "embedding": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc70e665-e510-47c1-961b-64877535492c", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "b322b1501b9a8fea00d4a1d9ccc6addd030fd1759eae6e37f3ebe750b1dea96d"}, "2": {"node_id": "3d979570-6f17-424c-9490-070c7b4ffc95", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "123028f51092a3f6c9002eded37b1879d82e4d5eed9c1d8593830fed042ed385"}, "3": {"node_id": "d6d67ff1-8782-4bf6-902d-a18e390f3bca", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "7afb0e8acb80472ff7352ac21eab45cb6af500f788bf0ff525e99dc36e926bb5"}}, "hash": "08bcabcdc500e0d780560d6523ec02d39b841506d65597b548b6b300b97b9078", "text": "service, and will then power-off the modem when not in use.\ncontinuous - Maintains an active network and Notehub connection. For Cellular Notecards this includes keeping the cellular modem powered on. For Wi-Fi Notecards this includes keeping an active connection to a Wi-Fi access point.\nminimum - Disables automatic connection to Notehub. In this mode, you will need to manually send a hub.sync request to trigger a sync.\noff - Disables both automatic and manual connection to Notehub. This is, in essence, the Notecard's \"airplane mode\" which ensures that the modem will not power-on under any circumstances.\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"mode\": \"minimum\"\n}\n\nIn the case of both periodic and continuous sync modes, the Notecard will periodically synchronize both outbound and inbound data with Notehub using a timing algorithm set by the configured outbound and inbound \"sync times\" (see below). If your application is using continuous mode and is expecting inbound data from the service where responsiveness is key, adding the sync flag will cause inbound data from Notehub to be synchronized to the Notecard as soon as it is detected.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"mode\": \"continuous\",\n  \"sync\": true\n}\nSetting Sync Times for Outbound and Inbound Data\n\nAfter setting the synchronization mode, tune the frequency of outbound and inbound sync requests using the outbound and inbound arguments. These values are required if operating in periodic or continuous mode.\n\nThe outbound argument configures the max wait time (in minutes) to sync outbound data, such as new Notes added by the host application. Data may sync more frequently, but the Notecard will never wait longer than this amount of time to initiate a sync, if data is awaiting upload. The", "start_char_idx": 1641, "end_char_idx": 3430, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d6d67ff1-8782-4bf6-902d-a18e390f3bca": {"__data__": {"id_": "d6d67ff1-8782-4bf6-902d-a18e390f3bca", "embedding": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc70e665-e510-47c1-961b-64877535492c", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "b322b1501b9a8fea00d4a1d9ccc6addd030fd1759eae6e37f3ebe750b1dea96d"}, "2": {"node_id": "a5d590eb-d08e-49a8-9ef2-27026b4e8767", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "08bcabcdc500e0d780560d6523ec02d39b841506d65597b548b6b300b97b9078"}, "3": {"node_id": "7dd0d731-7ba0-4cec-ad16-7416ffd2f077", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "691ad51ea62b1b5bc285dc63cabed42cbda9736f4e54edeecb859ef95ac5d388"}}, "hash": "7afb0e8acb80472ff7352ac21eab45cb6af500f788bf0ff525e99dc36e926bb5", "text": "than this amount of time to initiate a sync, if data is awaiting upload. The value passed into this field must be an integer.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"outbound\": 60\n}\n\nThe inbound field configures the max wait time (in minutes) to sync inbound data, such as environment variables or inbound Notes from Notehub. Data may sync more frequently, but the Notecard will never wait longer than this amount of time to initiate a sync. The value passed into this field must be an integer.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"inbound\": 120\n}\nConfiguring Session Duration in Continuous Mode\n\nWhen the Notecard establishes a new session with Notehub, it syncs information (for example, signal strength and device location) that is not included in every individual Note. When operating in continuous mode, the Notecard maintains a connection to Notehub and does not end or start new sessions as long as the device is powered. If you need to obtain session-specific data on a periodic basis, use the duration argument, and provide an integer value to represent the session duration, in minutes.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"mode\": \"continuous\",\n  \"duration\": 240\n}\n\nOnce set, after the duration period elapses, the Notecard will gracefully drop the current session and immediately establish a new one to sync session information.\n\nNote\n\nCombining Requests\n\nThe prior requests, and the majority of requests in this guide, do not need to be performed separately. For instance, it's common for a host application to set all of these parameters on boot. This can be performed with the following request:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\":", "start_char_idx": 3430, "end_char_idx": 5107, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7dd0d731-7ba0-4cec-ad16-7416ffd2f077": {"__data__": {"id_": "7dd0d731-7ba0-4cec-ad16-7416ffd2f077", "embedding": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc70e665-e510-47c1-961b-64877535492c", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "b322b1501b9a8fea00d4a1d9ccc6addd030fd1759eae6e37f3ebe750b1dea96d"}, "2": {"node_id": "d6d67ff1-8782-4bf6-902d-a18e390f3bca", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "7afb0e8acb80472ff7352ac21eab45cb6af500f788bf0ff525e99dc36e926bb5"}, "3": {"node_id": "daefa451-e5c6-4e37-8382-4b3303992522", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "12dded6e5608b8a547f51b033f688c94ecf026e1917e1eb0fc4b982fb8fd6c3a"}}, "hash": "691ad51ea62b1b5bc285dc63cabed42cbda9736f4e54edeecb859ef95ac5d388", "text": " \"req\": \"hub.set\",\n  \"product\": \"your-productuid\",\n  \"sn\": \"your-serial-number\",\n  \"mode\": \"continuous\",\n  \"outbound\": 60,\n  \"inbound\": 120,\n  \"duration\": 240,\n  \"sync\": true\n}\n\nThe result of all hub.set requests, if successful, is an empty JSON object ({}).\n\nAdding Notes to Notefiles note.add\n\nWhen you're ready to add data to your Notecard for synchronization, do so with the note.add request. This request adds a single Note with an arbitrary body or payload to a Notefile, which is an outbound queue of data to synchronize to Notehub.\n\nBy default, all Notes are added to the data.qo Notefile. The qo extension signifies that this is an outbound queue Notefile.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"note.add\",\n  \"body\": { \"foo\": \"bar\" }\n}\n\nThe body field of a note.add request must be a valid JSON object. The contents of that object are up to you and can be fully customized for your application.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"note.add\",\n  \"body\": {\n    \"foo\": \"bar\",\n    \"temp\": 23.134,\n    \"active\": true\n  }\n}\nAdding Notes to a Custom Notefile\n\nIf you wish to organize your Notes by function or type of data being captured, you can use the file field to specify a Notefile ID of your choosing, ending in a .qo extension.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"note.add\",\n  \"body\": { \"foo\": \"bar\" },\n  \"file\": \"sensors.qo\"\n}\nWarning\n\nA qo", "start_char_idx": 5164, "end_char_idx": 6511, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "daefa451-e5c6-4e37-8382-4b3303992522": {"__data__": {"id_": "daefa451-e5c6-4e37-8382-4b3303992522", "embedding": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc70e665-e510-47c1-961b-64877535492c", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "b322b1501b9a8fea00d4a1d9ccc6addd030fd1759eae6e37f3ebe750b1dea96d"}, "2": {"node_id": "7dd0d731-7ba0-4cec-ad16-7416ffd2f077", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "691ad51ea62b1b5bc285dc63cabed42cbda9736f4e54edeecb859ef95ac5d388"}, "3": {"node_id": "45d00806-c6f8-4f43-bd16-641b9594b98e", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "3487bc52444f9bb5f0f6d35290de1ee25855f3a0b0d145fa4d4210604ca7143b"}}, "hash": "12dded6e5608b8a547f51b033f688c94ecf026e1917e1eb0fc4b982fb8fd6c3a", "text": "\"file\": \"sensors.qo\"\n}\nWarning\n\nA qo or qos Notefile that does not use a Note Template is limited to 100 unsynced Notes. Attempting to add new Notes beyond this limit will result in this error:\n\nCOPY\n{\n \"err\": \"error adding note: can't exceed 100 notes per file (currently 100; see note.template)\"\n}\n\nThis limit does not apply to qo or qos Notefiles that have a template, since the Notecard uses much less memory to store and sync templated Notes.\n\nAdding Notes for Secure Transport\n\nIf you want to ensure that Notes are sent over encrypted TLS to Notehub, use the .qos extension. qos signifies that the Notefile is a secure outbound queue.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"note.add\",\n  \"body\": { \"foo\": \"bar\" },\n  \"file\": \"sensors.qos\"\n}\nAdding Payloads to Notes\n\nThe Notecard can be used to upload data generated by host firmware that encodes data in a binary format. These applications can easily attach the Base64-encoded binary data to a Note by using the payload field.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"note.add\",\n  \"payload\": \"ewogICAgInRlbXAiOiAyMy4xMzQKfQ==\"\n}\n\nIt's also possible to send both a body and a payload as a single Note.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"note.add\",\n  \"body\": { \"foo\": \"bar\" },\n  \"payload\": \"ewogICAgInRlbXAiOiAyMy4xMzQKfQ==\"\n}\nInitiating an Immediate Sync\n\nIf you want to initiate a sync immediately after adding a", "start_char_idx": 6484, "end_char_idx": 7844, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "45d00806-c6f8-4f43-bd16-641b9594b98e": {"__data__": {"id_": "45d00806-c6f8-4f43-bd16-641b9594b98e", "embedding": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc70e665-e510-47c1-961b-64877535492c", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "b322b1501b9a8fea00d4a1d9ccc6addd030fd1759eae6e37f3ebe750b1dea96d"}, "2": {"node_id": "daefa451-e5c6-4e37-8382-4b3303992522", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "12dded6e5608b8a547f51b033f688c94ecf026e1917e1eb0fc4b982fb8fd6c3a"}, "3": {"node_id": "bea04f64-0a0b-41eb-b571-14db124f310b", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "6a42d8d39463657ed0c3c16960fcb196356ab420bdc6c1f319b4d2cca0c934dc"}}, "hash": "3487bc52444f9bb5f0f6d35290de1ee25855f3a0b0d145fa4d4210604ca7143b", "text": "an Immediate Sync\n\nIf you want to initiate a sync immediately after adding a note, set the sync field to true.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"note.add\",\n  \"body\": { \"foo\": \"bar\" },\n  \"sync\": true\n}\n\nThe JSON response of all note.add requests, if successful, is the total number of Notes pending sync in the specified or default Notefile.\n\nCOPY\n{ \"total\": 3 }\nNote\n\nUse Templates for your production apps\n\nWorking with ad-hoc Notes is a great way to get started with and build your Notecard-based prototypes. However, as your project gets closer to deployment and as you're working with more data, you'll want to use Templates for Notes and Notefiles. Templates allow you to define a schema for Notes, which the Notecard then uses to store data in smaller chunks for storage and transfer.\n\nWorking with Environment Variables\n\nIn IoT applications, many products require configuration variables or settings that can be used on an end device, but managed and updated once the product is deployed in the field. In addition, these products often need the ability to manage these values at multiple levels, from the device to a fleet or even an entire product and all of its deployed devices.\n\nEnvironment variables are a Notecard and Notehub feature that enables settings synchronization that \"just work,\" with no special setup or configuration needed. These variables are key-value pairs, can be set in Notehub and propagate to devices in a project or fleet, or set on a Notecard directly using the same synchronization mechanism used for Notes and Notefiles.\n\nOn the Notecard, env.get is used to obtain one or more environment variables and env.set is used to set a variable on that Notecard only, overriding any Notehub setting of that variable. env.default is used to set default values, on that Notecard, that", "start_char_idx": 7815, "end_char_idx": 9628, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bea04f64-0a0b-41eb-b571-14db124f310b": {"__data__": {"id_": "bea04f64-0a0b-41eb-b571-14db124f310b", "embedding": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc70e665-e510-47c1-961b-64877535492c", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "b322b1501b9a8fea00d4a1d9ccc6addd030fd1759eae6e37f3ebe750b1dea96d"}, "2": {"node_id": "45d00806-c6f8-4f43-bd16-641b9594b98e", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "3487bc52444f9bb5f0f6d35290de1ee25855f3a0b0d145fa4d4210604ca7143b"}, "3": {"node_id": "1ad39d27-3827-4468-a9b5-667545c0fd73", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "40a0389880f62ce7e523eab12866ecf9d96ebfcd6f2f5790415df32d45dc6610"}}, "hash": "6a42d8d39463657ed0c3c16960fcb196356ab420bdc6c1f319b4d2cca0c934dc", "text": "that variable. env.default is used to set default values, on that Notecard, that are overwritten if that variable is also set at Notehub. Finally, env.modified is used to determine if any environment variables have changed.\n\nGetting Environment Variables\n\nUse the env.get request to retrieve all variables, a subset of variables or a single variable, by name. To get all variables, simply send an env.get request with no arguments.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"env.get\"\n}\n\nWhen requesting all variables, the Notecard returns each key-value pair in the body of the response object.\n\nCOPY\n{\n \"body\": {\n  \"monitor-pump\": \"true\",\n  \"_tags\": \"office\"\n },\n \"time\": \"1656315835\"\n}\n\nTo retrieve a group of named environment variables, use the names field, and provide an array of variable names.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"env.get\",\n  \"names\": [\"monitor-pump\", \"_tags\"]\n}\n\nTo retrieve a single environment variable, use the name field to specify the variable you want.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"env.get\",\n  \"name\": \"monitor-pump\"\n}\n\nWhen requesting a single variable, the Notecard returns an object with a key of text and value corresponding to the variable name provided.\n\nCOPY\n{\n \"text\": \"true\",\n \"time\": \"1656315835\"\n}\n\nIf the name provided does not match a known variable, or if no variables exist on the Notecard or Notehub, an empty JSON object ({}) is returned.\n\nTo retrieve a single, all, or a group of environment variables after a modified time, pass a UNIX Epoch time in the time field of a", "start_char_idx": 9625, "end_char_idx": 11144, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1ad39d27-3827-4468-a9b5-667545c0fd73": {"__data__": {"id_": "1ad39d27-3827-4468-a9b5-667545c0fd73", "embedding": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc70e665-e510-47c1-961b-64877535492c", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "b322b1501b9a8fea00d4a1d9ccc6addd030fd1759eae6e37f3ebe750b1dea96d"}, "2": {"node_id": "bea04f64-0a0b-41eb-b571-14db124f310b", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "6a42d8d39463657ed0c3c16960fcb196356ab420bdc6c1f319b4d2cca0c934dc"}, "3": {"node_id": "09fb515e-c361-4cef-9bdf-d838aff42ab6", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "eb4c03716012244b2bfe5f7f392adb8dffa38310f28af3ad288139c5bd387d0c"}}, "hash": "40a0389880f62ce7e523eab12866ecf9d96ebfcd6f2f5790415df32d45dc6610", "text": "variables after a modified time, pass a UNIX Epoch time in the time field of a env.get request.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"env.get\",\n  \"name\": \"monitor-pump\",\n  \"time\": \"1656315835\"\n}\n\nIf a variable or variables have changed, the Notecard will return them in the response. Otherwise, the Notecard will return an {env-not-modified} error.\n\nCOPY\n{\n  \"err\": \"environment hasn't been modified {env-not-modified}\"\n}\nNote\n\nThe Hierarchy of Environment Variables\n\nEnvironment variables can be defined in a number of locations, from the Notecard, to Notehub device settings, the device's Fleet, and the Notehub project. Variables set at different levels of this hierarchy can override one another. When obtaining an environment variable, the Notecard uses the following priority order, where the first matched result is returned:\n\nThe value set on that Notecard with the env.set request.\nThe value set in Notehub directly on Notehub's record for the Device.\nThe value set in Notehub on a Fleet to which the Device belongs.\nThe value set in Notehub on the Project to which the Device belongs.\nThe value set on that Notecard with the env.default request.\nSetting Environment Variable Defaults\n\nUse the env.default request to set a default value for the host. Once this value is set, it will be returned as defined by env.get unless the variable has been overridden by another env.set request or the Notehub.\n\nFor instance, assume that you need to create a variable to determine whether your Host MCU should monitor a connected pump, and that you want to be able to override this value from your Notehub project. To set a default, you'd send the following request:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"env.default\",\n ", "start_char_idx": 11150, "end_char_idx": 12864, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "09fb515e-c361-4cef-9bdf-d838aff42ab6": {"__data__": {"id_": "09fb515e-c361-4cef-9bdf-d838aff42ab6", "embedding": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc70e665-e510-47c1-961b-64877535492c", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "b322b1501b9a8fea00d4a1d9ccc6addd030fd1759eae6e37f3ebe750b1dea96d"}, "2": {"node_id": "1ad39d27-3827-4468-a9b5-667545c0fd73", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "40a0389880f62ce7e523eab12866ecf9d96ebfcd6f2f5790415df32d45dc6610"}, "3": {"node_id": "85e710f1-c141-4210-82d0-b5e1d2b29b73", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "63a37b96ec9485d2c350e768e7249d9c5162c600bb1c8ee025d1d16d1717c761"}}, "hash": "eb4c03716012244b2bfe5f7f392adb8dffa38310f28af3ad288139c5bd387d0c", "text": " \"req\": \"env.default\",\n  \"name\": \"monitor-pump\",\n  \"text\": \"true\"\n}\n\nThen, your host can obtain this value using env.get:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"env.get\",\n  \"name\": \"monitor-pump\"\n}\n\nWhich returns the following:\n\nCOPY\n{\"text\": \"true\"}\n\nIf, in the future, a Notehub administrator wishes to disable monitoring without having to directly update the Notecard, they can do so by setting the monitor-pump variable directly in the Notehub UI. After the next sync, a env.get request will return this overridden value, and your host MCU can respond accordingly.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"env.get\",\n  \"name\": \"monitor-pump\"\n}\n\nWhich returns the following:\n\nCOPY\n{\"text\": \"false\"}\n\nenv.default can also be used to remove environment variables. Simply provide the variable name, but omit the text field, and the variable will be removed from the Notecard's internal storage.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"env.default\",\n  \"name\": \"monitor-pump\"\n}\n\nThe result of all env.default requests, if successful, is an empty JSON object ({}).\n\nSetting Environment Variables on the Notecard\n\nUse the env.set request to set an environment variable only on the Notecard. This variable will be returned in env.get requests, and sent to Notehub in the next sync, but cannot be overridden by Notehub.\n\nTo set a variable, the name and text fields are used to set the variable name and value, respectively.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"env.set\",\n  \"name\":", "start_char_idx": 12907, "end_char_idx": 14367, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "85e710f1-c141-4210-82d0-b5e1d2b29b73": {"__data__": {"id_": "85e710f1-c141-4210-82d0-b5e1d2b29b73", "embedding": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc70e665-e510-47c1-961b-64877535492c", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "b322b1501b9a8fea00d4a1d9ccc6addd030fd1759eae6e37f3ebe750b1dea96d"}, "2": {"node_id": "09fb515e-c361-4cef-9bdf-d838aff42ab6", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "eb4c03716012244b2bfe5f7f392adb8dffa38310f28af3ad288139c5bd387d0c"}, "3": {"node_id": "b71f6045-5795-4b61-ac6b-d6fa9344fd3f", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "f1a0ec2d74535ed0ab80f7fa397fae75c0281859cbd1294b18f3ecef8891024c"}}, "hash": "63a37b96ec9485d2c350e768e7249d9c5162c600bb1c8ee025d1d16d1717c761", "text": " \"req\": \"env.set\",\n  \"name\": \"monitor-pump\",\n  \"text\": \"false\"\n}\n\nenv.set can also be used to remove environment variables. Simply provide the variable name, but omit the text field, and a locally-defined variable will be removed from the Notecard's internal storage.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"env.set\",\n  \"name\": \"monitor-pump\"\n}\n\nThe result of all env.set requests, if successful, is an empty JSON object, ({}).\n\nChecking for Environment Variable Changes\n\nWhen working with multiple environment variables on a device, it can become cumbersome for the host to continually check each variable to determine which values have changed. In these cases, use env.modified to obtain the time of the last update to any environment variable managed by the Notecard.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"env.modified\"\n}\n\nThe result, if successful, is an empty JSON object ({}) if the Notecard is not tracking any environment variables, or a UNIX epoch timestamp indicating the last time any environment variable was changed on the device.\n\nCOPY\n{\n  \"time\": 1605814493\n}\n\nWhen performing this request periodically, if the time value is unchanged between requests, it indicates that no environment variables have changed since the last request.\n\nAlternatively, you can supply a time field in an env.modified request to determine whether the Notecard has detected an environment variable change since a known epoch time.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"env.modified\",\n  \"time\": 1605814493\n}\n\nIn response, the Notecard will return either a response with the time of a change or an {env-not-modified} error.\n\nCOPY\n{\n  \"err\": \"environment", "start_char_idx": 14365, "end_char_idx": 16000, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b71f6045-5795-4b61-ac6b-d6fa9344fd3f": {"__data__": {"id_": "b71f6045-5795-4b61-ac6b-d6fa9344fd3f", "embedding": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc70e665-e510-47c1-961b-64877535492c", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "b322b1501b9a8fea00d4a1d9ccc6addd030fd1759eae6e37f3ebe750b1dea96d"}, "2": {"node_id": "85e710f1-c141-4210-82d0-b5e1d2b29b73", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "63a37b96ec9485d2c350e768e7249d9c5162c600bb1c8ee025d1d16d1717c761"}, "3": {"node_id": "01246087-99fa-47bc-bd8b-c8044fa7d9c7", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "282682a491ba254229940b68d8d47b54a9d085fbe8def8c41616da1808467d4f"}}, "hash": "f1a0ec2d74535ed0ab80f7fa397fae75c0281859cbd1294b18f3ecef8891024c", "text": "error.\n\nCOPY\n{\n  \"err\": \"environment hasn't been modified {env-not-modified}\"\n}\nNote\n\nenv.modified does not indicate which environment variable on the Notecard has changed, only that a local variable has been modified. Use env.get to retrieve the latest variable values after issuing this request, if needed.\n\nInteracting with Notehub\n\nIn addition to providing interfaces for setting synchronization settings on the Notecard, the hub API provides a number of requests for getting settings, initiating syncs and sending logs to Notehub.\n\nGetting Service Configuration Parameters\n\nTo check all of the current configuration parameters on the Notecard, use the hub.get request:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.get\"\n}\n\nThe Notecard will return an object with the DeviceUID, ProductUID, and Serial number of your Notecard, as well as the Notehub host, mode, outbound, and inbound max sync time values.\n\nCOPY\n{\n \"device\": \"dev:0000000000000000\",\n \"product\": \"com.your-company.your-name:your_product\",\n \"mode\": \"continuous\",\n \"outbound\": 60,\n \"inbound\": 120,\n \"host\": \"a.notefile.net\",\n \"sn\": \"your-serial-number\",\n \"sync\": true\n}\nGetting Service Connection Status\n\nIf you want to check on the status of your Notecard's connection to the network and Notehub, use the hub.status request:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.status\"\n}\n\nThis request will return an object with:\n\nstatus - The current status of the Notecard's network connection.\nconnected - A boolean indicating whether the Notecard is connected to Notehub.\nCOPY\n{\n \"status\": \"connected (session open) {connected}\",\n \"connected\": true\n}\nInitiating", "start_char_idx": 15992, "end_char_idx": 17606, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "01246087-99fa-47bc-bd8b-c8044fa7d9c7": {"__data__": {"id_": "01246087-99fa-47bc-bd8b-c8044fa7d9c7", "embedding": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc70e665-e510-47c1-961b-64877535492c", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "b322b1501b9a8fea00d4a1d9ccc6addd030fd1759eae6e37f3ebe750b1dea96d"}, "2": {"node_id": "b71f6045-5795-4b61-ac6b-d6fa9344fd3f", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "f1a0ec2d74535ed0ab80f7fa397fae75c0281859cbd1294b18f3ecef8891024c"}, "3": {"node_id": "1ae73b6c-61ae-44b8-aa0d-4a7b17d7a000", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "9ba0ccee823ab6a65fbfddf4b8589cc4bd9c0a488a2bad29ac8ed64cddba4e86"}}, "hash": "282682a491ba254229940b68d8d47b54a9d085fbe8def8c41616da1808467d4f", "text": "(session open) {connected}\",\n \"connected\": true\n}\nInitiating a Notehub Sync\n\nIf you need to manually initiate a sync between your Notecard and Notehub, you can do so with the hub.sync request. If your Notecard is set to minimum mode, this request must be issued to trigger a sync. If your Notecard is set to off mode, this request will be ignored.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.sync\"\n}\n\nThe result of a hub.sync request, if successful, is an empty JSON object ({}).\n\nIf you wish to check on the status of a recently triggered or previous sync, you can do so with the hub.sync.status request.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.sync.status\"\n}\n\nIn response, the Notecard will return an object that varies based on the conditions of the request.\n\nA sync in-progress will return the status of the sync, and the requested field, which represents the number of seconds since the sync was initiated.\n\nCOPY\n{\n \"status\": \"starting communications {wait-module} {connecting}\",\n \"requested\": 8\n}\n\nA successful sync will return the status, along with the Unix epoch time when the sync was completed, and the completed field to represent the number of seconds since the sync completed:\n\nCOPY\n{\n \"status\": \"completed {sync-end}\",\n \"time\": 1598367163,\n \"completed\": 1648\n}\n\nIf the sync was triggered manually, the sync field will be returned and set to true:\n\nCOPY\n{\n \"status\": \"completed {sync-end}\",\n \"time\": 1598367163,\n \"sync\": true,\n \"completed\": 1648\n}\n\nIf an error occurs during a sync, the alert field is returned and set to", "start_char_idx": 17584, "end_char_idx": 19115, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1ae73b6c-61ae-44b8-aa0d-4a7b17d7a000": {"__data__": {"id_": "1ae73b6c-61ae-44b8-aa0d-4a7b17d7a000", "embedding": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc70e665-e510-47c1-961b-64877535492c", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "b322b1501b9a8fea00d4a1d9ccc6addd030fd1759eae6e37f3ebe750b1dea96d"}, "2": {"node_id": "01246087-99fa-47bc-bd8b-c8044fa7d9c7", "node_type": null, "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}, "hash": "282682a491ba254229940b68d8d47b54a9d085fbe8def8c41616da1808467d4f"}}, "hash": "9ba0ccee823ab6a65fbfddf4b8589cc4bd9c0a488a2bad29ac8ed64cddba4e86", "text": "an error occurs during a sync, the alert field is returned and set to true.\n\nCOPY\n{\n \"status\": \"merge notefile: sensors.qo\",\n \"time\": 1598371227,\n \"alert\": true,\n \"completed\": 37\n}\n\nYou can also trigger a sync through a call to hub.sync.status by setting the sync field to true. This auto-initiates the sync if the Notecard has pending outbound data.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.sync.status\",\n  \"sync\": true\n}\nSending Log Messages to Notehub\n\nIf you need to send log messages from the Notecard to Notehub, you can do so with the hub.log request. These messages are added as Notes in a special _health.qo Notefile and sent to Notehub on the next sync.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.log\",\n  \"text\": \"Hello World!\"\n}\n\nTo mark the message as urgent, use the alert field:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.log\",\n  \"text\": \"something is wrong!\",\n  \"alert\": true\n}\n\nIf you need to trigger a sync immediately after queueing the message, set the sync field to true:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.log\",\n  \"text\": \"something is wrong!\",\n  \"alert\": true,\n  \"sync\": true\n}\n\nThe result of a hub.log request, if successful, is an empty JSON object ({}).\n\nNotecard Interfaces\nTime & Location Requests\nCan we improve this page? Send us feedback", "start_char_idx": 19102, "end_char_idx": 20367, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"fc70e665-e510-47c1-961b-64877535492c": {"node_ids": ["3d979570-6f17-424c-9490-070c7b4ffc95", "a5d590eb-d08e-49a8-9ef2-27026b4e8767", "d6d67ff1-8782-4bf6-902d-a18e390f3bca", "7dd0d731-7ba0-4cec-ad16-7416ffd2f077", "daefa451-e5c6-4e37-8382-4b3303992522", "45d00806-c6f8-4f43-bd16-641b9594b98e", "bea04f64-0a0b-41eb-b571-14db124f310b", "1ad39d27-3827-4468-a9b5-667545c0fd73", "09fb515e-c361-4cef-9bdf-d838aff42ab6", "85e710f1-c141-4210-82d0-b5e1d2b29b73", "b71f6045-5795-4b61-ac6b-d6fa9344fd3f", "01246087-99fa-47bc-bd8b-c8044fa7d9c7", "1ae73b6c-61ae-44b8-aa0d-4a7b17d7a000"], "metadata": {"title": "", "category": "Essential Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/essential-requests/"}}}}