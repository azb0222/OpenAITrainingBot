{"docstore/metadata": {"3a8ceab6-70b8-4960-a6ff-503cd4b2dba0": {"doc_hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "3a02a4b2-b042-4746-8186-258e4d106119": {"doc_hash": "5ec9306d710653b38cc1d98499de0869621384adda7982a6db61859ea504de62", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "b9189d9c-09e9-48fa-9be4-8ccf050b88a2": {"doc_hash": "7bf116f38e7028567579be10da65510f0ba5f0e4370b7b271db58c3a3aab3e84", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "4e83bf23-6c5f-41f6-83bc-ea2bdb29c3f7": {"doc_hash": "7641f92360b85495236d7521b666816bc99a64ec928822ade322c7b3b8e55285", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "88a931e6-38c4-4b32-8c14-31c2d61a8c41": {"doc_hash": "127fd004689ae1f5f3333a804b80dfecf4ae49ea8c10384e41b99f103620af53", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "11e97f73-b59c-4030-a735-577baca1ddf6": {"doc_hash": "aa525f24b0bfa3485af3447729affe48a790ce3d67a37b2d5aec6f50acbae412", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "76f4d8f8-3991-42c3-a2f3-1dbba54c571b": {"doc_hash": "433cba7b19692462df34a001d2c38010f50f65948e5c96a516381c07296398ec", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "5fa59b06-75d4-4685-9c87-ffbd280ad94e": {"doc_hash": "8833663ce7cf6b2c849b7b9c8bb22c33b86d5c117e3fba3898c2cb01338121ff", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "5872ec0e-2ded-4feb-a051-06795259c02f": {"doc_hash": "681ab4a3bc4542eb728ebe8515042cfca43965bfd3dc9e0d9362e0b9e2638737", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "c66e0336-93af-465f-867f-4f99bd4b1d4d": {"doc_hash": "00819ac56314bb1443bbb9bfd562e80fece671675c4b45bdba78a8afc87e1ca3", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "4e7da2d5-7bd5-4970-878b-faa5c4a03a45": {"doc_hash": "c48ed92e55ca45d86501bde2a57323b154458401f2759fe21e1e5b2ef84eb3f3", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "c55a4bf7-dff7-4424-89f1-f3757a4b5bc9": {"doc_hash": "cc909e9a13cf527408a70093b06e97544a7632c6db857a6e6c91b23b14992358", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "a92ed935-5a77-4467-b518-1cf00e9178b3": {"doc_hash": "13d9316be97aca1327677450322584959d1ae48c77e3930834a50480fcd4d1ff", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "b4a87c6f-5a76-4352-8fae-0521e66d9739": {"doc_hash": "f181d54fa96b5460f1c5a92b4db9d09934daec8f1dd8ec3dbbf0cfcd6da71797", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "e806c525-5f4e-4bda-a567-b739514b7518": {"doc_hash": "5f3666c333b0c665c80d965acb5007b49726402c35bb3b4f2fe25f7579e73022", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "59b5b16b-7e56-4e73-afe4-473f049d4579": {"doc_hash": "c3dbb3f8b9a20efec3b4817ed829939862417918ea2059793ea1c5ef231d2aee", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "ee098aa4-3014-4197-8494-78eac680f38d": {"doc_hash": "8c762abf4e011735ce2e98c4e3566724cc866f605372a6956d4972b86adfd831", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "5f48e9aa-8de1-42d4-9ef0-2dd2d196ad4f": {"doc_hash": "a5c0f98b19e8e87ce7f00984aa087aae771e032117e6e0e7f00feae2fdecf0fd", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "48690a55-cddf-4787-83c4-8b08e270f825": {"doc_hash": "b61f32defc632c1a23c97b2a83983b5c2c2eafe9e38e8dbe300612ceecbeffbc", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "b379f5e9-b578-4bc8-b5ac-8df8221c06fe": {"doc_hash": "f97b61bd076afa20d0c7beee4f010c7719225d73aa86aa2713d86060251dbbb8", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "4aab2b14-38cb-4b23-9b13-6ff16b2ce918": {"doc_hash": "71ea6816c70543303f5a2fcd3f2d9e2a48316bf29a025f15be2d5ac34cee4324", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "6de9c5e1-69ec-4745-8465-8e750dede57d": {"doc_hash": "f521f2b09f4194032d1c6cb025548e0ada961caad40709ca9d2ac1e32db9f9f1", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}, "655b5b28-ae06-4f89-9f28-98fba9264dd8": {"doc_hash": "c9ce02fc211eeecde05414cd0c5aae4de8721d0f6dd510d60d064b04c5ce60c0", "ref_doc_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0"}}, "docstore/data": {"3a02a4b2-b042-4746-8186-258e4d106119": {"__data__": {"id_": "3a02a4b2-b042-4746-8186-258e4d106119", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "3": {"node_id": "b9189d9c-09e9-48fa-9be4-8ccf050b88a2", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "7bf116f38e7028567579be10da65510f0ba5f0e4370b7b271db58c3a3aab3e84"}}, "hash": "5ec9306d710653b38cc1d98499de0869621384adda7982a6db61859ea504de62", "text": "Python Library\n\nnote-python is the official Python library for communicating with the Notecard over serial or I2C. This library works in a desktop setting, on single-board computers like the Raspberry Pi, and on microcontrollers with MicroPython or CircuitPython support.\n\nNote\n\nThis library is supported in Python 3.5 and above. The library may work, but is not supported, in Python 2.x environments.\n\nInstallation\nPC and Single-Board Computer Use\n\nWith pip via PyPi:\n\nCOPY\n$ pip install note-python\n\nor\n\nCOPY\n$ pip3 install note-python\nCircuitPython & MicroPython\n\nFor use with MicroPython or CircuitPython, clone the note-python repo to your computer. Then, copy the contents of the notecard directory into the lib directory of your device.\n\nUsage\n\nTo use note-python, start by importing it at the top of any Python file.\n\nCOPY\nimport notecard\n\nThe note-python library requires a pointer to a serial or i2c object that you initialize and pass into the library. This object differs based on your platform or device.\n\nPC & Single-Board Computer Configuration\n\nTo communicate with the Notecard from a PC or Single-Board Computer, you'll need to first install python-periphery.\n\nCOPY\n$ pip install python-periphery\nSerial Configuration\n\nTo initialize the Notecard over Serial, configure a PySerial Serial object and use the OpenSerial method. This method returns a notecard object that can be used to perform Notecard requests.\n\nCOPY\n# Use pySerial on a PC or SBC\nimport serial\nport = serial.Serial(\"/dev/serial0\", 9600)\n\nnCard = notecard.OpenSerial(port)\nI2C Configuration\n\nTo initialize the Notecard over I2C, configure a Periphery I2C object and use the OpenI2C method. This method returns a notecard object that", "start_char_idx": 0, "end_char_idx": 1714, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b9189d9c-09e9-48fa-9be4-8ccf050b88a2": {"__data__": {"id_": "b9189d9c-09e9-48fa-9be4-8ccf050b88a2", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "3a02a4b2-b042-4746-8186-258e4d106119", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "5ec9306d710653b38cc1d98499de0869621384adda7982a6db61859ea504de62"}, "3": {"node_id": "4e83bf23-6c5f-41f6-83bc-ea2bdb29c3f7", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "7641f92360b85495236d7521b666816bc99a64ec928822ade322c7b3b8e55285"}}, "hash": "7bf116f38e7028567579be10da65510f0ba5f0e4370b7b271db58c3a3aab3e84", "text": "object and use the OpenI2C method. This method returns a notecard object that can be used to perform Notecard requests.\n\nCOPY\n# Use python-periphery on a PC or SBC\nfrom periphery import I2C\nport = I2C(\"/dev/i2c-1\")\n\nnCard = notecard.OpenI2C(port, 0, 0)\nCircuitPython Configuration\n\nBoth Serial and I2C are accessible in CircuitPython using the built-in busio and boards library, which should be imported at the top of your Python file.\n\nCOPY\nimport board\nimport busio\nSerial Configuration\n\nTo initialize the Notecard over Serial, configure a busio UART object with the TX and RX pins on the device, and use the OpenSerial method. This method returns a notecard object that can be used to perform Notecard requests.\n\nCOPY\n# Use busio on a CircuitPython Device\nport = busio.UART(board.TX, board.RX, baudrate=9600)\n\nnCard = notecard.OpenSerial(port)\nI2C Configuration\n\nTo initialize the Notecard over I2C, configure a busio I2C object with the SCL and SDA pins on the device, and use the OpenI2C method. This method returns a notecard object that can be used to perform Notecard requests.\n\nCOPY\n# Use busio on a CircuitPython Device\nport = busio.I2C(board.SCL, board.SDA)\n\nnCard = notecard.OpenI2C(port, 0, 0)\nMicroPython Configuration\n\nBoth Serial and I2C are accessible in MicroPython using the built-in machine library.\n\nSerial Configuration\n\nTo initialize the Notecard over Serial, configure a machine UART object and use the OpenSerial method. This method returns a notecard object that can be used to perform Notecard", "start_char_idx": 1650, "end_char_idx": 3170, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4e83bf23-6c5f-41f6-83bc-ea2bdb29c3f7": {"__data__": {"id_": "4e83bf23-6c5f-41f6-83bc-ea2bdb29c3f7", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "b9189d9c-09e9-48fa-9be4-8ccf050b88a2", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "7bf116f38e7028567579be10da65510f0ba5f0e4370b7b271db58c3a3aab3e84"}, "3": {"node_id": "88a931e6-38c4-4b32-8c14-31c2d61a8c41", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "127fd004689ae1f5f3333a804b80dfecf4ae49ea8c10384e41b99f103620af53"}}, "hash": "7641f92360b85495236d7521b666816bc99a64ec928822ade322c7b3b8e55285", "text": "This method returns a notecard object that can be used to perform Notecard requests.\n\nCOPY\n# Use busio on a MicroPython Device\nfrom machine import UART\nport = UART(2, 9600)\nport.init(9600, bits=8, parity=None, stop=1)\n\nnCard = notecard.OpenSerial(port)\nI2C Configuration\n\nTo initialize the Notecard over I2C, configure a machine I2C object and use the OpenI2C method. This method returns a notecard object that can be used to perform Notecard requests.\n\nCOPY\n# Use busio on a MicroPython Device\nfrom machine import I2C\nport = I2C()\n\nnCard = notecard.OpenI2C(port, 0, 0)\nDebug Mode\n\nIf you're connected to a Python terminal, you can put the Notecard library in debug mode, which will output raw JSON requests and responses. Set debug to True when initializing the Notecard with OpenSerial or OpenI2C:\n\nCOPY\nnCard = notecard.OpenI2C(port, 0, 0, debug=True)\nSending Notecard Requests\n\nWhether using Serial or I2C, sending Notecard requests and reading responses follows the same pattern:\n\nCreate a JSON object that includes a valid Notecard API Request.\nCall one of the notecard methods and pass in the request JSON object.\nIf you called a method that returns a response, make sure the response contains the data you need.\nCOPY\n# Construct a JSON Object to add a Note to the Notecard\nreq = {\"req\": \"note.add\"}\nreq[\"body\"] = {\"temp\": 18.6}\n\nrsp = nCard.Transaction(req)\nprint(rsp) # {\"total\":1}\nnotecard Methods\n\nThe Notecard provides two methods for performing requests, depending on whether you need a response from the", "start_char_idx": 3174, "end_char_idx": 4691, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "88a931e6-38c4-4b32-8c14-31c2d61a8c41": {"__data__": {"id_": "88a931e6-38c4-4b32-8c14-31c2d61a8c41", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "4e83bf23-6c5f-41f6-83bc-ea2bdb29c3f7", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "7641f92360b85495236d7521b666816bc99a64ec928822ade322c7b3b8e55285"}, "3": {"node_id": "11e97f73-b59c-4030-a735-577baca1ddf6", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "aa525f24b0bfa3485af3447729affe48a790ce3d67a37b2d5aec6f50acbae412"}}, "hash": "127fd004689ae1f5f3333a804b80dfecf4ae49ea8c10384e41b99f103620af53", "text": "provides two methods for performing requests, depending on whether you need a response from the Notecard.\n\nTransaction() should be used if you need a response from the Notecard after a request is executed. All requests made with this method should include the req key.\nCOPY\nreq = {\"req\": \"card.status\"}\n\nrsp = nCard.Transaction(req)\nprint(rsp)\nCommand() should be used if you do not need a response from the Notecard after a request is executed. All requests made with this method should include the cmd key.\nCOPY\ncmd = {\"cmd\": \"hub.sync\"}\n\nnCard.Command(req)\nUsing the Library Fluent API\n\nThe notecard class allows complete access to the Notecard API via manual JSON object construction and the Transaction, Command methods. Alternatively, you can import one or more Fluent API helpers to work with common aspects of the Notecard API without having to author JSON objects, by hand.\n\nNote\n\nNot all aspects of the Notecard API are available using these helpers. For a complete list of supported helpers, see the detailed reference below.\n\nHere's an example that uses the hub helper to set the Notecard Product UID in CircuitPython:\n\nCOPY\nimport board\nimport busio\n\nimport notecard\nfrom notecard import hub\n\nport = busio.I2C(board.SCL, board.SDA)\nnCard = notecard.OpenI2C(port, 0, 0, debug=True)\n\nproductUID = \"com.your-company.your-name:your_product\"\nrsp = hub.set(nCard, productUID, mode=\"continuous\", sync=True)\n\nprint(rsp) # {}\nDetailed Reference\nLibrary Classes\nClass\tUsage\tDescription\nnotecard\timport notecard\tMain Library class for initializing Notecard connections and performing requests.\ncard\tfrom notecard import card\tFluent API Class for card.*", "start_char_idx": 4673, "end_char_idx": 6327, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "11e97f73-b59c-4030-a735-577baca1ddf6": {"__data__": {"id_": "11e97f73-b59c-4030-a735-577baca1ddf6", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "88a931e6-38c4-4b32-8c14-31c2d61a8c41", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "127fd004689ae1f5f3333a804b80dfecf4ae49ea8c10384e41b99f103620af53"}, "3": {"node_id": "76f4d8f8-3991-42c3-a2f3-1dbba54c571b", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "433cba7b19692462df34a001d2c38010f50f65948e5c96a516381c07296398ec"}}, "hash": "aa525f24b0bfa3485af3447729affe48a790ce3d67a37b2d5aec6f50acbae412", "text": "requests.\ncard\tfrom notecard import card\tFluent API Class for card.* requests.\nenv\tfrom notecard import env\tFluent API Class for env.* requests.\nfile\tfrom notecard import file\tFluent API Class for file.* requests.\nhub\tfrom notecard import hub\tFluent API Class for hub.* requests.\nnote\tfrom notecard import note\tFluent API Class for note.* requests.\nnotecard Class Reference\nMembers\nMember\tDescription\ndef serialReadByte(port)\tRead a single byte from a Notecard. Internal method utilized by class methods.\ndef serialReset(port)\tSend a reset command to a Notecard. Internal method utilized by class methods.\ndef serialTransaction(port,req,debug)\tPerform a single write to and read from a Notecard. Internal method utilized by class methods.\ndef serialCommand(port,req,debug)\tPerform a single write to and read from a Notecard. Internal method utilized by class methods.\nclass notecard::Notecard\tBase Notecard class.\nclass notecard::OpenI2C\tNotecard class for I2C communication.\nclass notecard::OpenSerial\tNotecard class for Serial communication.\nNotecard Class\n\nBase Notecard class. Provides a shared init to reset the Notecard via Serial or I2C.\n\nMethod\tDescription\npublic def __init__(self)\tInitialize the Notecard through a reset.\nOpenI2C Class\n\nNotecard subclass for I2C communication.\n\nMember\tDescription\npublic i2c\tAn instance of the host (PC, MCU) I2C bus controller.\npublic addr\tThe I2C Address to use for Notecard communications.\npublic max\tMaximum length of I2C data segments.\npublic def __init__(self,i2c,address,max_transfer,debug)\tInitialize the Notecard over I2C.\npublic def", "start_char_idx": 6348, "end_char_idx": 7934, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "76f4d8f8-3991-42c3-a2f3-1dbba54c571b": {"__data__": {"id_": "76f4d8f8-3991-42c3-a2f3-1dbba54c571b", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "11e97f73-b59c-4030-a735-577baca1ddf6", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "aa525f24b0bfa3485af3447729affe48a790ce3d67a37b2d5aec6f50acbae412"}, "3": {"node_id": "5fa59b06-75d4-4685-9c87-ffbd280ad94e", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "8833663ce7cf6b2c849b7b9c8bb22c33b86d5c117e3fba3898c2cb01338121ff"}}, "hash": "433cba7b19692462df34a001d2c38010f50f65948e5c96a516381c07296398ec", "text": "the Notecard over I2C.\npublic def Transaction(self,req)\tPerform a Notecard transaction and return the result.\npublic def Command(self,req)\tPerform a Notecard command and exit with no response.\npublic def Reset(self)\tReset the Notecard.\npublic def lock(self)\tLock the I2C port so the host can interact with the Notecard. Internal method utilized by class methods.\npublic def unlock(self)\tUnlock the I2C port. Internal method utilized by class methods.\n__init__\n\nInitialize the Notecard over I2C.\n\nCOPY\nfrom periphery import I2C\nport = I2C(\"/dev/i2c-1\")\n\nnCard = notecard.OpenI2C(port, 0, 0, debug=True)\nTransaction\n\nPerform a Notecard transaction and return the result.\n\nCOPY\nreq = {\"req\": \"note.add\"}\nreq[\"body\"] = {\"temp\": 18.6}\n\nrsp = nCard.Transaction(req)\nprint(rsp) # {\"total\":1}\nCommand\n\nPerform a Notecard command and exit with no response.\n\nCOPY\nreq = {\"cmd\": \"note.add\"}\nreq[\"body\"] = {\"temp\": 18.6}\n\nnCard.Command(req)\nReset\n\nReset the Notecard.\n\nCOPY\nnCard.Reset()\nOpenSerial\n\nNotecard class for Serial communication.\n\nMembers\tDescriptions\npublic uart\tAn instance of the host (PC, MCU) UART bus controller.\npublic lock\tA filelock object for locking access to the Serial port in a PC or SBC environment.\npublic def __init__(self,uart_id,debug)\tInitialize the Notecard before a reset.\npublic def Command(self,req)\tPerform a Notecard command and exit with no response.\npublic def", "start_char_idx": 7967, "end_char_idx": 9354, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5fa59b06-75d4-4685-9c87-ffbd280ad94e": {"__data__": {"id_": "5fa59b06-75d4-4685-9c87-ffbd280ad94e", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "76f4d8f8-3991-42c3-a2f3-1dbba54c571b", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "433cba7b19692462df34a001d2c38010f50f65948e5c96a516381c07296398ec"}, "3": {"node_id": "5872ec0e-2ded-4feb-a051-06795259c02f", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "681ab4a3bc4542eb728ebe8515042cfca43965bfd3dc9e0d9362e0b9e2638737"}}, "hash": "8833663ce7cf6b2c849b7b9c8bb22c33b86d5c117e3fba3898c2cb01338121ff", "text": "a Notecard command and exit with no response.\npublic def Transaction(self,req)\tPerform a Notecard transaction and return the result.\npublic def Reset(self)\tReset the Notecard.\n__init__\n\nInitialize the Notecard over Serial.\n\nCOPY\nimport serial\nport = serial.Serial(\"/dev/serial0\", 9600)\n\nnCard = notecard.OpenSerial(port, debug=True)\nTransaction\n\nPerform a Notecard transaction and return the result.\n\nCOPY\nreq = {\"req\": \"note.add\"}\nreq[\"body\"] = {\"temp\": 18.6}\n\nrsp = nCard.Transaction(req)\nprint(rsp) # {\"total\":1}\nCommand\n\nPerform a Notecard command and exit with no response.\n\nCOPY\nreq = {\"cmd\": \"note.add\"}\nreq[\"body\"] = {\"temp\": 18.6}\n\nnCard.Command(req)\nReset\n\nReset the Notecard.\n\nCOPY\nnCard.Reset()\ncard Class Reference\nPublic Methods\nMethod\tDescription\npublic def attn(card,mode,files,seconds,payload,start)\tConfigure interrupt detection between a host and Notecard.\npublic def time(card)\tRetrieve the current time and date from the Notecard.\npublic def status(card)\tRetrieve the status of the Notecard.\npublic def temp(card,minutes)\tRetrieve the current temperature from the Notecard.\npublic def version(card)\tRetrieve firmware version information from the Notecard.\npublic def voltage(card,hours,offset,vmax,vmin)\tRetrieve current and historical voltage info from the Notecard.\npublic def wireless(card,mode,apn)\tRetrieve wireless modem info or customize modem behavior.\nattn()\n\nConfigure interrupt detection between a host and Notecard. See card.attn in", "start_char_idx": 9336, "end_char_idx": 10801, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5872ec0e-2ded-4feb-a051-06795259c02f": {"__data__": {"id_": "5872ec0e-2ded-4feb-a051-06795259c02f", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "5fa59b06-75d4-4685-9c87-ffbd280ad94e", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "8833663ce7cf6b2c849b7b9c8bb22c33b86d5c117e3fba3898c2cb01338121ff"}, "3": {"node_id": "c66e0336-93af-465f-867f-4f99bd4b1d4d", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "00819ac56314bb1443bbb9bfd562e80fece671675c4b45bdba78a8afc87e1ca3"}}, "hash": "681ab4a3bc4542eb728ebe8515042cfca43965bfd3dc9e0d9362e0b9e2638737", "text": "interrupt detection between a host and Notecard. See card.attn in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nmode\n\nstring\n\nThe attn mode to set.\n\nfiles\n\narray (optional)\n\nA collection of notefiles to watch.\n\nseconds\n\nint (optional)\n\nA timeout to use when arming attn mode.\n\npayload\n\nstring (optional)\n\nWhen using sleep mode, a payload of data from the host that the Notecard should hold in memory until retrieved by the host.\n\nstart\n\nboolean (optional)\n\nWhen using sleep mode and the host has reawakened, request the Notecard to return the stored payload.\n\nCOPY\nrsp = card.attn(nCard,\n                mode=\"arm, files\",\n                files=[\"data.qi\"])\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"files\": [\"data.qi\", \"modified\"],\n  \"set\": true\n}\ntime()\n\nRetrieve the current time and date from the Notecard. See card.time in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nCOPY\nrsp = card.time(nCard)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"time\": 1599769214,\n  \"area\": \"Beverly, MA\",\n  \"zone\": \"CDT,America/New York\",\n  \"minutes\": -300,\n  \"lat\": 42.5776,\n  \"lon\": -70.87134,\n  \"country\":", "start_char_idx": 10794, "end_char_idx": 12105, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c66e0336-93af-465f-867f-4f99bd4b1d4d": {"__data__": {"id_": "c66e0336-93af-465f-867f-4f99bd4b1d4d", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "5872ec0e-2ded-4feb-a051-06795259c02f", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "681ab4a3bc4542eb728ebe8515042cfca43965bfd3dc9e0d9362e0b9e2638737"}, "3": {"node_id": "4e7da2d5-7bd5-4970-878b-faa5c4a03a45", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "c48ed92e55ca45d86501bde2a57323b154458401f2759fe21e1e5b2ef84eb3f3"}}, "hash": "00819ac56314bb1443bbb9bfd562e80fece671675c4b45bdba78a8afc87e1ca3", "text": " \"lon\": -70.87134,\n  \"country\": \"US\"\n}\nstatus()\n\nRetrieve the status of the Notecard. See card.status in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nCOPY\nrsp = card.status(nCard)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"status\": \"{normal}\",\n  \"usb\": true,\n  \"storage\": 8,\n  \"time\": 1599684765,\n  \"connected\": \"true\"\n}\ntemp()\n\nRetrieve the current temperature from the Notecard. See card.temp in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nminutes\n\n_integer (optional)\n\nIf specified, creates a templated _temp.qo file that gathers Notecard temperature value at the specified interval.\n\nCOPY\nrsp = card.temp(nCard, minutes=10)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"value\": 27.625,\n  \"calibration\": -3.0\n}\nversion()\n\nRetrieve firmware version information from the Notecard. See card.version in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nCOPY\nrsp = card.version(nCard, minutes=10)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"body\": {\n    \"org\": \"Blues Wireless\",\n    \"product\": \"Notecard\",\n    \"version\":", "start_char_idx": 12135, "end_char_idx": 13475, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4e7da2d5-7bd5-4970-878b-faa5c4a03a45": {"__data__": {"id_": "4e7da2d5-7bd5-4970-878b-faa5c4a03a45", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "c66e0336-93af-465f-867f-4f99bd4b1d4d", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "00819ac56314bb1443bbb9bfd562e80fece671675c4b45bdba78a8afc87e1ca3"}, "3": {"node_id": "c55a4bf7-dff7-4424-89f1-f3757a4b5bc9", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "cc909e9a13cf527408a70093b06e97544a7632c6db857a6e6c91b23b14992358"}}, "hash": "c48ed92e55ca45d86501bde2a57323b154458401f2759fe21e1e5b2ef84eb3f3", "text": "   \"product\": \"Notecard\",\n    \"version\": \"notecard-1.6.0\",\n    \"ver_major\": 1,\n    \"ver_minor\": 6,\n    \"ver_patch\": 0,\n    \"ver_build\": 12200,\n    \"built\": \"Jan 2 2021 08:45:10\"\n  },\n  \"version\": \"notecard-1.6.0.12200\",\n  \"device\": \"dev:000000000000000\",\n  \"name\": \"Blues Wireless Notecard\",\n  \"type\": 11,\n  \"sku\": \"NOTE-WBNA500\"\n}\nvoltage()\n\nRetrieve current and historical voltage info from the Notecard. See card.voltage in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nhours\n\nint (optional)\n\nNumber of hours to analyze.\n\noffset\n\nint (optional)\n\nNumber of hours to offset.\n\nvmax\n\nint (optional)\n\nMaximum voltage level to report.\n\nvmin\n\nint (optional)\n\nMinimum voltage level to report.\n\nCOPY\nrsp = card.voltage(nCard,\n                   hours=120,\n                   offset=24,\n                   vmax=4.3,\n                   vmin=2.7)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"mode\": \"usb\",\n  \"value\": 5.2791994059442461,\n  \"hours\": 772,\n  \"vmin\":", "start_char_idx": 13471, "end_char_idx": 14531, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c55a4bf7-dff7-4424-89f1-f3757a4b5bc9": {"__data__": {"id_": "c55a4bf7-dff7-4424-89f1-f3757a4b5bc9", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "4e7da2d5-7bd5-4970-878b-faa5c4a03a45", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "c48ed92e55ca45d86501bde2a57323b154458401f2759fe21e1e5b2ef84eb3f3"}, "3": {"node_id": "a92ed935-5a77-4467-b518-1cf00e9178b3", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "13d9316be97aca1327677450322584959d1ae48c77e3930834a50480fcd4d1ff"}}, "hash": "cc909e9a13cf527408a70093b06e97544a7632c6db857a6e6c91b23b14992358", "text": " \"hours\": 772,\n  \"vmin\": 4.48,\n  \"vmax\": 5.28,\n  \"vavg\": 4.9106748466257669,\n  \"daily\": 0.13,\n  \"weekly\": 0.12,\n  \"monthly\": 0.11\n}\nwireless()\n\nRetrieve wireless modem info or customize modem behavior. See card.wireless in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nmode\n\nstring\n\nThe wireless module mode to set.\n\napn\n\nstring (optional)\n\nAccess Point Name (APN) when using an external SIM.\n\nCOPY\nrsp = card.wireless(nCard, mode=\"nb\")\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"status\": \"{modem-off}\",\n  \"count\": 1,\n  \"net\": {\n    \"iccid\": \"00000000000000000000\",\n    \"imsi\": \"000000000000000\",\n    \"imei\": \"000000000000000\",\n    \"modem\": \"EG91NAXGAR07A03M1G_BETA0415_01.001.01.001\",\n    \"band\": \"LTE BAND 2\",\n    \"rat\": \"lte\",\n    \"rssir\": -69,\n    \"rssi\": -70,\n    \"rsrp\": -105,\n    \"sinr\": 86,\n    \"rsrq\": -17,\n    \"bars\": 1,\n    \"mcc\": 310,\n    \"mnc\": 410,\n    \"lac\": 28681,\n    \"cid\": 211150856,\n    \"updated\": 1599225076\n  }\n}\nenv Class Reference\nPublic", "start_char_idx": 14544, "end_char_idx": 15614, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a92ed935-5a77-4467-b518-1cf00e9178b3": {"__data__": {"id_": "a92ed935-5a77-4467-b518-1cf00e9178b3", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "c55a4bf7-dff7-4424-89f1-f3757a4b5bc9", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "cc909e9a13cf527408a70093b06e97544a7632c6db857a6e6c91b23b14992358"}, "3": {"node_id": "b4a87c6f-5a76-4352-8fae-0521e66d9739", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "f181d54fa96b5460f1c5a92b4db9d09934daec8f1dd8ec3dbbf0cfcd6da71797"}}, "hash": "13d9316be97aca1327677450322584959d1ae48c77e3930834a50480fcd4d1ff", "text": " \"updated\": 1599225076\n  }\n}\nenv Class Reference\nPublic Methods\nMethod\tDescription\npublic def default(card,name,text)\tPerform an env.default request against a Notecard.\npublic def get(card,name)\tPerform an env.get request against a Notecard.\npublic def modified(card)\tPerform an env.modified request against a Notecard.\npublic def set(card,name,text)\tPerform an env.set request against a Notecard.\ndefault()\n\nPerform an env.default request against a Notecard. See env.default in the Complete API Reference\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nname\n\nstring\n\nThe name of an environment var to set a default for.\n\ntext\n\nstring (optional)\n\nThe default value. Omit to delete the default.\n\nCOPY\nrsp = env.default(nCard,\n                  name=\"monitor-pump\",\n                  text=\"true\")\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{}\nget()\n\nPerform an env.get request against a Notecard. See env.get in the Complete API Reference\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nname\n\nstring\n\nThe name of an environment to get.\n\nCOPY\nrsp = env.get(nCard,\n              name=\"monitor-pump\")\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"text\": \"true\"\n}\nmodified()\n\nPerform an env.modified request against a Notecard. See env.modified", "start_char_idx": 15586, "end_char_idx": 16974, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b4a87c6f-5a76-4352-8fae-0521e66d9739": {"__data__": {"id_": "b4a87c6f-5a76-4352-8fae-0521e66d9739", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "a92ed935-5a77-4467-b518-1cf00e9178b3", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "13d9316be97aca1327677450322584959d1ae48c77e3930834a50480fcd4d1ff"}, "3": {"node_id": "e806c525-5f4e-4bda-a567-b739514b7518", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "5f3666c333b0c665c80d965acb5007b49726402c35bb3b4f2fe25f7579e73022"}}, "hash": "f181d54fa96b5460f1c5a92b4db9d09934daec8f1dd8ec3dbbf0cfcd6da71797", "text": "an env.modified request against a Notecard. See env.modified in the Complete API Reference\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nCOPY\nrsp = env.modified(nCard)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"time\": 1605814493\n}\nset()\n\nPerform an env.set request against a Notecard. See env.set in the Complete API Reference\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nname\n\nstring\n\nThe name of an environment var to set.\n\ntext\n\nstring (optional)\n\nThe value. Omit to delete.\n\nCOPY\nrsp = env.set(nCard,\n              name=\"monitor-pump\"\n              text=\"false\")\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{}\nfile Class Reference\nPublic Methods\nMethod\tDescription\npublic def changes(card,tracker,files)\tPerform individual or batch queries on Notefiles.\npublic def delete(card,files)\tDelete individual notefiles and their contents.\npublic def pendingChanges(card)\tRetrieve information about pending Notehub changes.\npublic def stats(card)\tObtain statistics about local notefiles.\nchanges()\n\nPerform individual or batch queries on Notefiles. See file.changes in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\ntracker\n\nstring\n\nA developer-defined tracker ID.\n\nfiles\n\narray (optional)\n\nA list of Notefiles to retrieve changes for.\n\nCOPY\nrsp =", "start_char_idx": 16971, "end_char_idx": 18424, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e806c525-5f4e-4bda-a567-b739514b7518": {"__data__": {"id_": "e806c525-5f4e-4bda-a567-b739514b7518", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "b4a87c6f-5a76-4352-8fae-0521e66d9739", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "f181d54fa96b5460f1c5a92b4db9d09934daec8f1dd8ec3dbbf0cfcd6da71797"}, "3": {"node_id": "59b5b16b-7e56-4e73-afe4-473f049d4579", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "c3dbb3f8b9a20efec3b4817ed829939862417918ea2059793ea1c5ef231d2aee"}}, "hash": "5f3666c333b0c665c80d965acb5007b49726402c35bb3b4f2fe25f7579e73022", "text": "list of Notefiles to retrieve changes for.\n\nCOPY\nrsp = file.changes(nCard,\n                   tracker=\"multi-file-tracker\",\n                   files=[\"my-settings.db\", \"other-settings.db\"])\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"changes\": 5,\n  \"total\": 5,\n  \"info\": {\n    \"my-settings.db\": { \"changes\": 3, \"total\": 3 },\n    \"other-settings.db\": { \"changes\": 2, \"total\": 2 }\n  }\n}\ndelete()\n\nDelete individual notefiles and their contents. See file.delete in the Complete API Reference\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nfiles\n\narray (optional)\n\nA list of Notefiles to delete.\n\nCOPY\nrsp = file.delete(nCard,\n                  files=[\"my-settings.db\"])\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{}\npendingChanges\n\nRetrieve information about pending Notehub changes. See file.changes.pending in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nCOPY\nrsp = file.pendingChanges(nCard)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"total\": 3,\n  \"changes\": 3,\n  \"pending\": true,\n  \"info\": {\n   ", "start_char_idx": 18431, "end_char_idx": 19666, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "59b5b16b-7e56-4e73-afe4-473f049d4579": {"__data__": {"id_": "59b5b16b-7e56-4e73-afe4-473f049d4579", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "e806c525-5f4e-4bda-a567-b739514b7518", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "5f3666c333b0c665c80d965acb5007b49726402c35bb3b4f2fe25f7579e73022"}, "3": {"node_id": "ee098aa4-3014-4197-8494-78eac680f38d", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "8c762abf4e011735ce2e98c4e3566724cc866f605372a6956d4972b86adfd831"}}, "hash": "c3dbb3f8b9a20efec3b4817ed829939862417918ea2059793ea1c5ef231d2aee", "text": "3,\n  \"pending\": true,\n  \"info\": {\n    \"sensors.qo\": { \"changes\": 3, \"total\": 3 }\n  }\n}\nstats()\n\nObtain statistics about local notefiles. See file.stats in the Complete API Reference\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nCOPY\nrsp = file.stats(nCard)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"total\": 83,\n  \"changes\": 78,\n  \"sync\": true\n}\nhub Class Reference\nPublic Methods\nMethod\tDescription\npublic def get(card)\tRetrieve the current Notehub configuration parameters.\npublic def log(card,text,alert,sync)\tSend a log request to the Notecard.\npublic def set(card,product,sn,mode,outbound,inbound, duration,sync,align,voutbound,vinbound,host)\tConfigure Notehub behavior on the Notecard.\npublic def status(card)\tRetrieve the status of the Notecard's connection.\npublic def sync(card)\tInitiate a sync of the Notecard to Notehub.\npublic def syncStatus(card,sync)\tRetrieve the status of a sync request.\nget()\n\nRetrieve the current Notehub configuration parameters. See hub.get in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nCOPY\nrsp = hub.get(nCard)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"device\": \"dev:000000000000000\",\n  \"product\": \"com.your-company.your-name:your_product\",\n  \"mode\": \"periodic\",\n  \"outbound\": 60,\n  \"inbound\":", "start_char_idx": 19686, "end_char_idx": 21112, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ee098aa4-3014-4197-8494-78eac680f38d": {"__data__": {"id_": "ee098aa4-3014-4197-8494-78eac680f38d", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "59b5b16b-7e56-4e73-afe4-473f049d4579", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "c3dbb3f8b9a20efec3b4817ed829939862417918ea2059793ea1c5ef231d2aee"}, "3": {"node_id": "5f48e9aa-8de1-42d4-9ef0-2dd2d196ad4f", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "a5c0f98b19e8e87ce7f00984aa087aae771e032117e6e0e7f00feae2fdecf0fd"}}, "hash": "8c762abf4e011735ce2e98c4e3566724cc866f605372a6956d4972b86adfd831", "text": "\"periodic\",\n  \"outbound\": 60,\n  \"inbound\": 240,\n  \"host\": \"a.notefile.net\",\n  \"sn\": \"your-serial-number\"\n}\nlog()\n\nSend a log request to the Notecard. See hub.log in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\ntext\n\nThe text of the log message.\n\nalert\n\nboolean\n\nTrue if the message is urgent.\n\nsync\n\nboolean\n\nWhether to sync right away.\n\nCOPY\nrsp = hub.log(nCard\n              text=\"something is wrong!\",\n              alert=True,\n              sync=True)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{}\nset()\n\nConfigure Notehub behavior on the Notecard. See hub.set in the Complete API Reference\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nproduct\n\nstring (optional)\n\nThe ProductUID of the project.\n\nsn\n\nstring (optional)\n\nThe Serial Number of the device.\n\nmode\n\nstring (optional)\n\nThe sync mode to use.\n\noutbound\n\nint (optional)\n\nMax time to wait to sync outgoing data.\n\ninbound\n\nint (optional)\n\nMax time to wait to sync incoming data.\n\nduration\n\nint (optional)\n\nIf in continuous mode, the amount of time, in minutes, of each session.\n\nsync\n\nboolean (optional)\n\nIf in continuous mode, whether to automatically sync each time a change is detected on the device or Notehub.\n\nalign\n\nboolean (optional)\n\nTo align syncs to", "start_char_idx": 21104, "end_char_idx": 22454, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5f48e9aa-8de1-42d4-9ef0-2dd2d196ad4f": {"__data__": {"id_": "5f48e9aa-8de1-42d4-9ef0-2dd2d196ad4f", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "ee098aa4-3014-4197-8494-78eac680f38d", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "8c762abf4e011735ce2e98c4e3566724cc866f605372a6956d4972b86adfd831"}, "3": {"node_id": "48690a55-cddf-4787-83c4-8b08e270f825", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "b61f32defc632c1a23c97b2a83983b5c2c2eafe9e38e8dbe300612ceecbeffbc"}}, "hash": "a5c0f98b19e8e87ce7f00984aa087aae771e032117e6e0e7f00feae2fdecf0fd", "text": "Notehub.\n\nalign\n\nboolean (optional)\n\nTo align syncs to a regular time-interval, as opposed to using max time values.\n\nvoutbound\n\nstring (optional)\n\nOverrides \"outbound\" with a voltage-variable value.\n\nvinbound\n\nstring (optional)\n\nOverrides \"inbound\" with a voltage-variable value.\n\nhost\n\nstring (optional)\n\nURL of an alternative or private Notehub instance.\n\nCOPY\nrsp = hub.set(nCard,\n              mode=\"continuous\",\n              outbound=30,\n              inbound=120,\n              duration=240,\n              sync=True)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{}\nstatus()\n\nRetrieve the status of the Notecard's connection. See hub.status in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nCOPY\nrsp = hub.status(nCard)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"status\": \"connected (session open) {connected}\",\n  \"connected\": true\n}\nsync()\n\nInitiate a sync of the Notecard to Notehub. See hub.sync in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nCOPY\nrsp = hub.sync(nCard)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample", "start_char_idx": 22442, "end_char_idx": 23712, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "48690a55-cddf-4787-83c4-8b08e270f825": {"__data__": {"id_": "48690a55-cddf-4787-83c4-8b08e270f825", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "5f48e9aa-8de1-42d4-9ef0-2dd2d196ad4f", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "a5c0f98b19e8e87ce7f00984aa087aae771e032117e6e0e7f00feae2fdecf0fd"}, "3": {"node_id": "b379f5e9-b578-4bc8-b5ac-8df8221c06fe", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "f97b61bd076afa20d0c7beee4f010c7719225d73aa86aa2713d86060251dbbb8"}}, "hash": "b61f32defc632c1a23c97b2a83983b5c2c2eafe9e38e8dbe300612ceecbeffbc", "text": "JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{}\nsyncStatus()\n\nRetrieve the status of a sync request. See hub.sync.status in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nsync\n\nboolean (optional)\n\nTrue if sync should be auto-initiated pending outbound data.\n\nCOPY\nrsp = hub.syncStatus(nCard, sync=True)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"status\": \"completed {sync-end}\",\n  \"time\": 1598367163,\n  \"sync\": true,\n  \"completed\": 1648\n}\nnote Class Reference\nPublic Methods\nMethod\tDescription\npublic def add(card,file,body,sync)\tAdd Note to a Notefile.\npublic def changes(card,file,tracker,maximum,start,stop,deleted,delete)\tIncrementally retrieve changes within a Notefile.\npublic def delete(card,file,note_id)\tDelete a DB note in a Notefile by its ID.\npublic def get(card,file,note_id,delete,deleted)\tRetrieve a note from an inbound or DB Notefile.\npublic def template(card,file,body,length)\tCreate a template for new Notes in a Notefile.\npublic def update(card,file,note_id,body,payload)\tUpdate a note in a DB Notefile by ID.\nadd()\n\nAdd a Note to a Notefile. See note.add in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nfile\n\nstring (optional)\n\nName of a Notefile in which to place the Note.\n\nnote\n\nstring (optional)\n\nIf the Notefile has a .db or .dbx", "start_char_idx": 23713, "end_char_idx": 25156, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b379f5e9-b578-4bc8-b5ac-8df8221c06fe": {"__data__": {"id_": "b379f5e9-b578-4bc8-b5ac-8df8221c06fe", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "48690a55-cddf-4787-83c4-8b08e270f825", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "b61f32defc632c1a23c97b2a83983b5c2c2eafe9e38e8dbe300612ceecbeffbc"}, "3": {"node_id": "4aab2b14-38cb-4b23-9b13-6ff16b2ce918", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "71ea6816c70543303f5a2fcd3f2d9e2a48316bf29a025f15be2d5ac34cee4324"}}, "hash": "f97b61bd076afa20d0c7beee4f010c7719225d73aa86aa2713d86060251dbbb8", "text": "(optional)\n\nIf the Notefile has a .db or .dbx extension, specifies a unique Note ID.\n\nbody\n\nJSON Object (optional)\n\nA JSON object to be enqueued.\n\npayload\n\nbase64 string (optional)\n\nA base64-encoded binary payload\n\nsync\n\nboolean (optional)\n\nTrue to sync immediately.\n\nCOPY\nrsp = note.add(nCard,\n               file=\"sensors.qo\",\n               body={\"temp\":72.22},\n               sync=True)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{ \"total\": 12 }\nchanges()\n\nIncrementally retrieve changes within a Notefile. See note.changes in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nfile\n\nstring (optional)\n\nThe notefile to inspect for changes.\n\ntracker\n\nstring (optional)\n\nA developer-defined tracker ID.\n\nmaximum\n\ninteger (optional)\n\nMaximum number of notes to return.\n\nstart\n\nboolean (optional)\n\nTrue to reset the tracker to the beginning before a get.\n\nstop\n\nboolean (optional)\n\nTrue to delete the tracker after get.\n\ndeleted\n\nboolean (optional)\n\nTrue if deleted Notes should be returned.\n\ndelete\n\nboolean (optional)\n\nTrue if Notes in the response should be auto-deleted.\n\nCOPY\nrsp = note.changes(nCard,\n                   file=\"my-settings.db\",\n              ", "start_char_idx": 25169, "end_char_idx": 26431, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4aab2b14-38cb-4b23-9b13-6ff16b2ce918": {"__data__": {"id_": "4aab2b14-38cb-4b23-9b13-6ff16b2ce918", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "b379f5e9-b578-4bc8-b5ac-8df8221c06fe", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "f97b61bd076afa20d0c7beee4f010c7719225d73aa86aa2713d86060251dbbb8"}, "3": {"node_id": "6de9c5e1-69ec-4745-8465-8e750dede57d", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "f521f2b09f4194032d1c6cb025548e0ada961caad40709ca9d2ac1e32db9f9f1"}}, "hash": "71ea6816c70543303f5a2fcd3f2d9e2a48316bf29a025f15be2d5ac34cee4324", "text": "                  tracker=\"inbound-tracker\",\n                   start=True)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"changes\":4,\n  \"total\":4\n  \"notes\":{\n    \"setting-one\":   {\"body\":{\"foo\": \"bar\"},\"time\":1598918235},\n    \"setting-two\":   {\"body\":{\"foo\": \"bat\"},\"time\":1598918245},\n    \"setting-three\": {\"body\":{\"foo\": \"baz\"},\"time\":1598918225},\n    \"setting-four\":  {\"body\":{\"foo\": \"foo\"},\"time\":1598910532}\n  }\n}\ndelete()\n\nDelete a DB note in a Notefile by its ID. See note.delete in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nfile\n\nstring\n\nThe file name of the DB notefile.\n\nnote_id\n\nstring\n\nThe id of the note to delete.\n\nCOPY\nrsp = note.delete(nCard,\n                 file=\"my-settings.db\",\n                 note=\"measurements\")\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{}\nget()\n\nRetrieve a note from an inbound or DB Notefile. See note.get in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nfile\n\nstring\n\nThe inbound or DB notefile to retrieve a Notefile", "start_char_idx": 26470, "end_char_idx": 27647, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6de9c5e1-69ec-4745-8465-8e750dede57d": {"__data__": {"id_": "6de9c5e1-69ec-4745-8465-8e750dede57d", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "4aab2b14-38cb-4b23-9b13-6ff16b2ce918", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "71ea6816c70543303f5a2fcd3f2d9e2a48316bf29a025f15be2d5ac34cee4324"}, "3": {"node_id": "655b5b28-ae06-4f89-9f28-98fba9264dd8", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "c9ce02fc211eeecde05414cd0c5aae4de8721d0f6dd510d60d064b04c5ce60c0"}}, "hash": "f521f2b09f4194032d1c6cb025548e0ada961caad40709ca9d2ac1e32db9f9f1", "text": "inbound or DB notefile to retrieve a Notefile from.\n\nnote_id\n\nstring\n\n(DB files only) The ID of the note to retrieve.\n\ndelete\n\nboolean (optional)\n\nTrue to delete the note after retrieval.\n\ndeleted\n\nboolean (optional)\n\nTrue to allow retrieval of a deleted note.\n\nCOPY\nrsp = note.get(nCard,\n              file=\"requests.qi\",\n              )\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"body\": {\n    \"api-key1\": \"api-val1\"\n  },\n  \"time\": 1598909219\n}\ntemplate()\n\nCreate a template for new Notes in a Notefile. See note.template in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nfile\n\nstring\n\nThe file name of the Notefile on which to set a template.\n\nbody\n\n_JSON object (optional)\n\nA sample JSON body that specifies field names and values as \"hints\" for the data type.\n\nlength\n\ninteger (optional)\n\nIf provided, the maximum length of a payload that can be sent in Notes for the template Notefile.\n\nCOPY\nrsp = note.template(nCard,\n                   file=\"readings.qo\",\n                   body={\"new_vals\": true,\"temperature\": 1.1,\"humidity\": 1,\"pump_state\": \"aaaa\"},\n                  ", "start_char_idx": 27610, "end_char_idx": 28797, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "655b5b28-ae06-4f89-9f28-98fba9264dd8": {"__data__": {"id_": "655b5b28-ae06-4f89-9f28-98fba9264dd8", "embedding": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a8ceab6-70b8-4960-a6ff-503cd4b2dba0", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "1235c31bcb38cf1a4ed0ffbecc1d4873ca26986488bafa0fbdd5ef621f19b3f8"}, "2": {"node_id": "6de9c5e1-69ec-4745-8465-8e750dede57d", "node_type": null, "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}, "hash": "f521f2b09f4194032d1c6cb025548e0ada961caad40709ca9d2ac1e32db9f9f1"}}, "hash": "c9ce02fc211eeecde05414cd0c5aae4de8721d0f6dd510d60d064b04c5ce60c0", "text": "                  length=32)\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{\n  \"bytes\": 40\n}\nupdate()\n\nUpdate a note in a DB Notefile by ID. See note.update in the Complete API Reference.\n\nArguments\ncard\n\nnotecard class instance\n\nThe current Notecard object.\n\nfile\n\nstring\n\nThe file name of the DB notefile.\n\nnote_id\n\nstring (optional)\n\nThe id of the note to update.\n\nbody\n\nJSON object (optional)\n\nThe JSON object to add to the note.\n\npayload\n\nbase64 string (optional)\n\nThe base64-encoded JSON payload to add to the note.\n\nCOPY\nrsp = note.update(nCard,\n                  file=\"my-settings.db\",\n                  note_id=\"measurements\",\n                  body={\"internal\":60})\n\nprint(rsp)\nReturns\n\nA JSON payload containing the Notecard response.\n\nExample Response\nCOPY\n{}\nCan we improve this page? Send us feedback", "start_char_idx": 28818, "end_char_idx": 29679, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"3a8ceab6-70b8-4960-a6ff-503cd4b2dba0": {"node_ids": ["3a02a4b2-b042-4746-8186-258e4d106119", "b9189d9c-09e9-48fa-9be4-8ccf050b88a2", "4e83bf23-6c5f-41f6-83bc-ea2bdb29c3f7", "88a931e6-38c4-4b32-8c14-31c2d61a8c41", "11e97f73-b59c-4030-a735-577baca1ddf6", "76f4d8f8-3991-42c3-a2f3-1dbba54c571b", "5fa59b06-75d4-4685-9c87-ffbd280ad94e", "5872ec0e-2ded-4feb-a051-06795259c02f", "c66e0336-93af-465f-867f-4f99bd4b1d4d", "4e7da2d5-7bd5-4970-878b-faa5c4a03a45", "c55a4bf7-dff7-4424-89f1-f3757a4b5bc9", "a92ed935-5a77-4467-b518-1cf00e9178b3", "b4a87c6f-5a76-4352-8fae-0521e66d9739", "e806c525-5f4e-4bda-a567-b739514b7518", "59b5b16b-7e56-4e73-afe4-473f049d4579", "ee098aa4-3014-4197-8494-78eac680f38d", "5f48e9aa-8de1-42d4-9ef0-2dd2d196ad4f", "48690a55-cddf-4787-83c4-8b08e270f825", "b379f5e9-b578-4bc8-b5ac-8df8221c06fe", "4aab2b14-38cb-4b23-9b13-6ff16b2ce918", "6de9c5e1-69ec-4745-8465-8e750dede57d", "655b5b28-ae06-4f89-9f28-98fba9264dd8"], "metadata": {"title": "", "category": "Python Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/python-library/"}}}}