{"docstore/metadata": {"bf85da0a-1022-4f9d-b2f8-5b1d12476556": {"doc_hash": "563ea57f77269f53718c4d70586bd02bb0bc713e673a9f7ed5cc81ac63b38cbb"}, "c0401221-2a2d-4211-832c-5f9194283943": {"doc_hash": "292ecac6c3c55f72398914df9c3daa896245bcfefa8b037ace127b1e6070ac16", "ref_doc_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556"}, "718548a6-b4db-47d9-b9d5-60a2410e5d4f": {"doc_hash": "64adfe04602f4b435a27a6423ecbbf34f463e1ae8f2b8b89895c81882a3d4322", "ref_doc_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556"}, "63318537-234c-4eb9-85d8-08cf8bc1e398": {"doc_hash": "926f0bed2a5e55988f3765a4323c4a17fe30bd4a3457bfb58c570c80d2b73cbc", "ref_doc_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556"}, "46d1e2a3-abf2-4c79-b3cc-028c146aecff": {"doc_hash": "0742e23f32e913717a1186fec793864b447e0a2381d0ab6806dd15fd9fd94bd5", "ref_doc_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556"}, "7a7c8c0d-6804-4820-a320-bae0665931b6": {"doc_hash": "fb3b126e4822be14895cf78b7a450c0c4d7a9c8c473441a4590855102b583de3", "ref_doc_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556"}, "293fe20e-c129-4475-b20d-2aed5c3e040f": {"doc_hash": "b1e0145f4721d9b007b0b417394f78071bc7943332ecd73d7bc9f865d2b4f97d", "ref_doc_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556"}, "c51109ff-d5b4-41ed-898d-17076c5dff5f": {"doc_hash": "172b6bda8db86932519a8ae997474d3135dc0e51095ea2902e088c4f0221a326", "ref_doc_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556"}, "e9c0cd96-a68c-44c9-b33b-74dbbfbf34cd": {"doc_hash": "c40e16a1e4f0be5a961c7214328ad076ab1d9a17d8d34bf7c0af2019b37ee23d", "ref_doc_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556"}, "f14bbfc5-e159-44fd-9e2f-d58fdce3d6b6": {"doc_hash": "3e8fe5d60b598097964fac617421ce98cb596aafccd8e46995d03fb527b262de", "ref_doc_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556"}}, "docstore/data": {"c0401221-2a2d-4211-832c-5f9194283943": {"__data__": {"id_": "c0401221-2a2d-4211-832c-5f9194283943", "embedding": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "563ea57f77269f53718c4d70586bd02bb0bc713e673a9f7ed5cc81ac63b38cbb"}, "3": {"node_id": "718548a6-b4db-47d9-b9d5-60a2410e5d4f", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "64adfe04602f4b435a27a6423ecbbf34f463e1ae8f2b8b89895c81882a3d4322"}}, "hash": "292ecac6c3c55f72398914df9c3daa896245bcfefa8b037ace127b1e6070ac16", "text": "note Requests\n\nThe note requests enable the quick creation and management of Notes in Notefiles. The requests in this section are available on the Notecard API and Notehub API.\n\nnote.add \n\nAdds a Note to a Notefile, creating the Notefile if it doesn't yet exist.\n\nWhen sending this request to the Notecard, if a Notefile name is specified, the file must either be a DB Notefile or outbound queue file (see file argument below).\nWhen sending this request to Notehub, the file must either be a DB Notefile or an inbound queue file (see file argument below).\nArguments\nfile\n\nstring (Default: data.qo or data.qi)\n\nOn the Notecard, the Notefile name must end in one of:\n\n.qo for a queue outgoing (Notecard to Notehub) with plaintext transport\n\n.qos for a queue outgoing with encrypted transport\n\n.db for a bidirectionally synchronized database with plaintext transport\n\n.dbs for a bidirectionally synchronized database with encrypted transport\n\n.dbx for a local-only database\n\nWhen used to add notes to Notehub, the Notefile must end in one of:\n\n.qi for an incoming queue (Notehub to Notecard) with plaintext transport\n\n.qis for an incoming queue (Notehub to Notecard) with encrypted transport\n\n.db for a bidirectionally synchronized database with plaintext transport\n\n.dbs for a bidirectionally synchronized database with encrypted transport\n\nnote\n\nstring (optional)\n\nIf the Notefile has a .db/.dbs/.dbx extension, specifies a unique Note ID.\n\nIf note string is \"?\", then a random unique Note ID is generated and returned as {\"note\":\"xxx\"}. (Added in v1.5.6)\n\nIf this argument is provided for a .qi or .qo Notefile, an error is returned.\n\nbody\n\nJSON object", "start_char_idx": 0, "end_char_idx": 1652, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "718548a6-b4db-47d9-b9d5-60a2410e5d4f": {"__data__": {"id_": "718548a6-b4db-47d9-b9d5-60a2410e5d4f", "embedding": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "563ea57f77269f53718c4d70586bd02bb0bc713e673a9f7ed5cc81ac63b38cbb"}, "2": {"node_id": "c0401221-2a2d-4211-832c-5f9194283943", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "292ecac6c3c55f72398914df9c3daa896245bcfefa8b037ace127b1e6070ac16"}, "3": {"node_id": "63318537-234c-4eb9-85d8-08cf8bc1e398", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "926f0bed2a5e55988f3765a4323c4a17fe30bd4a3457bfb58c570c80d2b73cbc"}}, "hash": "64adfe04602f4b435a27a6423ecbbf34f463e1ae8f2b8b89895c81882a3d4322", "text": ".qo Notefile, an error is returned.\n\nbody\n\nJSON object (optional)\n\nA JSON object to be enqueued. A note must have either a body or a payload, and can have both.\n\npayload\n\nbase64 string (optional)\n\nA base64-encoded binary payload. A note must have either a body or a payload, and can have both. If a Note template is not in use, payloads are limited to 250 bytes.\n\nsync\n\nboolean (optional)\n\nSet to true to sync immediately. Only applies to outgoing Notecard requests, and only guarantees syncing the specified Notefile. Auto-syncing incoming Notes from Notehub is set on the Notecard with {\"req\": \"hub.set\", \"mode\":\"continuous\", \"sync\": true}.\n\nkey (Added in v1.5.5)\n\nstring (optional)\n\nThe name of an environment variable in your Notehub.io project that contains the contents of an RSA public key. Used when encrypting the Note body for transport. Only applies to Notecard requests.\n\nverify (Added in v1.5.6)\n\nboolean (optional)\n\nIf set to true and using a templated Notefile, the Notefile will be written to flash immediately, rather than being cached in RAM and written to flash later.\n\naccess_token\n\nstring (Notehub curl requests only)\n\nA Notehub API bearer token.\n\nprojectUID\n\nstring (Notehub curl requests only)\n\nThe ProjectUID of a Notehub project.\n\ndeviceUID\n\nstring (Notehub curl requests only)\n\nThe globally-unique DeviceUID of a device that currently exists within the specified ProjectUID.\n\nYou may alternatively provide a device serial number by prefixing this argument with sn:, for example sn:my-device.\n\nExample\nJSON\nC/C++\nPython\nBash\nCOPY\n{\n  \"req\":", "start_char_idx": 1605, "end_char_idx": 3170, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "63318537-234c-4eb9-85d8-08cf8bc1e398": {"__data__": {"id_": "63318537-234c-4eb9-85d8-08cf8bc1e398", "embedding": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "563ea57f77269f53718c4d70586bd02bb0bc713e673a9f7ed5cc81ac63b38cbb"}, "2": {"node_id": "718548a6-b4db-47d9-b9d5-60a2410e5d4f", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "64adfe04602f4b435a27a6423ecbbf34f463e1ae8f2b8b89895c81882a3d4322"}, "3": {"node_id": "46d1e2a3-abf2-4c79-b3cc-028c146aecff", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "0742e23f32e913717a1186fec793864b447e0a2381d0ab6806dd15fd9fd94bd5"}}, "hash": "926f0bed2a5e55988f3765a4323c4a17fe30bd4a3457bfb58c570c80d2b73cbc", "text": " \"req\": \"note.add\",\n  \"file\": \"sensors.qo\",\n  \"body\": { \"temp\": 72.22 },\n  \"sync\": true\n}\nResponse Members\ntotal\n\nThe total number of Notes in the Notefile.\n\ntemplate\n\ntrue when a template is active on the Notefile.\n\nExample Response\nCOPY\n{ \"total\": 12 }\nMore information:\nEncrypting Data with the Notecard\nnote.changes \n\nUsed to incrementally retrieve changes within a specific Notefile.\n\nArguments\nfile\n\nstring\n\nThe Notefile ID.\n\ntracker\n\nstring (optional)\n\nThe change tracker ID. This value is developer-defined and can be used across both the note.changes and file.changes requests.\n\nmax\n\ninteger (optional)\n\nThe maximum number of Notes to return in the request.\n\nstart\n\nboolean (optional)\n\ntrue to reset the tracker to the beginning.\n\nstop\n\nboolean (optional)\n\ntrue to delete the tracker.\n\ndeleted\n\nboolean (optional)\n\ntrue to return deleted Notes with this request. Deleted notes are only persisted in a database notefile (.db/.dbs) between the time of note deletion on the Notecard and the time that a sync with notehub takes place. As such, this boolean will have no effect after a sync or on queue notefiles (.q*).\n\ndelete\n\nboolean (optional)\n\ntrue to delete the Notes returned by the request.\n\nreset\n\nboolean (optional)\n\ntrue to reset a change tracker.\n\naccess_token\n\nstring (Notehub curl requests only)\n\nA Notehub API bearer token.\n\nprojectUID\n\nstring (Notehub curl requests only)\n\nThe ProjectUID of a Notehub project.\n\ndeviceUID\n\nstring (Notehub curl requests only)\n\nThe globally-unique DeviceUID of a device that currently", "start_char_idx": 3213, "end_char_idx": 4748, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "46d1e2a3-abf2-4c79-b3cc-028c146aecff": {"__data__": {"id_": "46d1e2a3-abf2-4c79-b3cc-028c146aecff", "embedding": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "563ea57f77269f53718c4d70586bd02bb0bc713e673a9f7ed5cc81ac63b38cbb"}, "2": {"node_id": "63318537-234c-4eb9-85d8-08cf8bc1e398", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "926f0bed2a5e55988f3765a4323c4a17fe30bd4a3457bfb58c570c80d2b73cbc"}, "3": {"node_id": "7a7c8c0d-6804-4820-a320-bae0665931b6", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "fb3b126e4822be14895cf78b7a450c0c4d7a9c8c473441a4590855102b583de3"}}, "hash": "0742e23f32e913717a1186fec793864b447e0a2381d0ab6806dd15fd9fd94bd5", "text": "requests only)\n\nThe globally-unique DeviceUID of a device that currently exists within the specified ProjectUID.\n\nYou may alternatively provide a device serial number by prefixing this argument with sn:, for example sn:my-device.\n\nExample Peek\nExample Pop\nJSON\nC/C++\nPython\nBash\nCOPY\n{\n  \"req\": \"note.changes\",\n  \"file\": \"my-settings.db\",\n  \"tracker\": \"inbound-tracker\",\n  \"start\": true\n}\nResponse Members\ntotal\n\ninteger\n\nThe total number of Notes in the Notefile.\n\nchanges\n\ninteger\n\nThe number of pending changes in the Notefile.\n\nnotes\n\nJSON object\n\nAn object with a key for each Note (for instance, the Note ID in a DB Notefile; For .qo and .qi Notes, these IDs are generated for internal management) and value object with the body of each Note and the Time the Note was added.\n\nExample Response\nCOPY\n{\n  \"changes\": 4,\n  \"total\": 4,\n  \"notes\": {\n    \"setting-one\": { \"body\": { \"foo\": \"bar\" }, \"time\": 1598918235 },\n    \"setting-two\": { \"body\": { \"foo\": \"bat\" }, \"time\": 1598918245 },\n    \"setting-three\": { \"body\": { \"foo\": \"baz\" }, \"time\": 1598918225 },\n    \"setting-four\": { \"body\": { \"foo\": \"foo\" }, \"time\": 1598910532 }\n  }\n}\nMore information:\nUsing Change Trackers With Inbound Data\nnote.delete \n\nDeletes Notefiles from a DB Notefile by its Note ID. To delete Notes from a .qi Notefile, use note.get or note.changes with delete:true.\n\nArguments\nfile\n\nstring\n\nThe Notefile from which to delete a Note. Must be a Notefile with a .db or", "start_char_idx": 4691, "end_char_idx": 6132, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7a7c8c0d-6804-4820-a320-bae0665931b6": {"__data__": {"id_": "7a7c8c0d-6804-4820-a320-bae0665931b6", "embedding": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "563ea57f77269f53718c4d70586bd02bb0bc713e673a9f7ed5cc81ac63b38cbb"}, "2": {"node_id": "46d1e2a3-abf2-4c79-b3cc-028c146aecff", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "0742e23f32e913717a1186fec793864b447e0a2381d0ab6806dd15fd9fd94bd5"}, "3": {"node_id": "293fe20e-c129-4475-b20d-2aed5c3e040f", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "b1e0145f4721d9b007b0b417394f78071bc7943332ecd73d7bc9f865d2b4f97d"}}, "hash": "fb3b126e4822be14895cf78b7a450c0c4d7a9c8c473441a4590855102b583de3", "text": "from which to delete a Note. Must be a Notefile with a .db or .dbx extension.\n\nnote\n\nstring\n\nThe Note ID of the Note to delete.\n\nverify (Added in v1.5.6)\n\nboolean (optional)\n\nIf set to true and using a templated Notefile, the Notefile will be written to flash immediately, rather than being cached in RAM and written to flash later.\n\naccess_token\n\nstring (Notehub curl requests only)\n\nA Notehub API bearer token.\n\nprojectUID\n\nstring (Notehub curl requests only)\n\nThe ProjectUID of a Notehub project.\n\ndeviceUID\n\nstring (Notehub curl requests only)\n\nThe globally-unique DeviceUID of a device that currently exists within the specified ProjectUID.\n\nYou may alternatively provide a device serial number by prefixing this argument with sn:, for example sn:my-device.\n\nExample\nJSON\nC/C++\nPython\nBash\nCOPY\n{\n  \"req\": \"note.delete\",\n  \"file\": \"my-settings.db\",\n  \"note\": \"measurements\"\n}\nResponse Members\nNone: an empty object {} means success.\nnote.get \n\nRetrieves a Note from a Notefile.\n\nWhen sending this request to the Notecard, the file must either be a DB Notefile or inbound queue file (see file argument below).\nWhen sending this request to Notehub, the file must be a DB Notefile (see file argument below).\n\n.qo/.qos Notes must be read from the Notehub event table using the Notehub Event API.\n\nArguments\nfile\n\nstring (Default: data.qi or data.qo)\n\nOn the Notecard, the notefile name must end in .qi (for plaintext transport), .qis (for encrypted transport), .db or .dbx (for local-only Database Notefiles).\n\nOn Notehub, the", "start_char_idx": 6149, "end_char_idx": 7676, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "293fe20e-c129-4475-b20d-2aed5c3e040f": {"__data__": {"id_": "293fe20e-c129-4475-b20d-2aed5c3e040f", "embedding": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "563ea57f77269f53718c4d70586bd02bb0bc713e673a9f7ed5cc81ac63b38cbb"}, "2": {"node_id": "7a7c8c0d-6804-4820-a320-bae0665931b6", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "fb3b126e4822be14895cf78b7a450c0c4d7a9c8c473441a4590855102b583de3"}, "3": {"node_id": "c51109ff-d5b4-41ed-898d-17076c5dff5f", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "172b6bda8db86932519a8ae997474d3135dc0e51095ea2902e088c4f0221a326"}}, "hash": "b1e0145f4721d9b007b0b417394f78071bc7943332ecd73d7bc9f865d2b4f97d", "text": ".dbx (for local-only Database Notefiles).\n\nOn Notehub, the Notefile must end in .db.\n\nnote\n\nstring (optional)\n\nIf the Notefile has a .db or .dbx extension, specifies a unique Note ID. Not applicable to .qi and .qo Notefiles.\n\ndelete\n\nboolean (optional)\n\ntrue to delete the Note after retrieving it.\n\nAdd as a URL parameter if using with a Notehub curl request (e.g. ?delete=true).\n\ndeleted\n\nboolean (optional)\n\ntrue to allow retrieval of a deleted Note.\n\nAdd as a URL parameter if using with a Notehub curl request (e.g. ?deleted=true).\n\naccess_token\n\nstring (Notehub curl requests only)\n\nA Notehub API bearer token.\n\nprojectUID\n\nstring (Notehub curl requests only)\n\nThe ProjectUID of a Notehub project.\n\ndeviceUID\n\nstring (Notehub curl requests only)\n\nThe globally-unique DeviceUID of a device that currently exists within the specified ProjectUID.\n\nYou may alternatively provide a device serial number by prefixing this argument with sn:, for example sn:my-device.\n\nPop From QI\nRead from DB\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"note.get\",\n  \"file\": \"requests.qi\",\n  \"delete\": true\n}\nResponse Members\nbody\n\nJSON object\n\nThe JSON body, if contained in the Note.\n\npayload\n\nbase64 string\n\nThe payload, if contained in the Note.\n\ntime\n\nUNIX Epoch time\n\nThe time the Note was added to the Notecard or Notehub.\n\nExample Response\nCOPY\n{\n  \"body\": {\n    \"api-key1\": \"api-val1\"\n  },\n  \"time\": 1598909219\n}\nnote.update", "start_char_idx": 7673, "end_char_idx": 9080, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c51109ff-d5b4-41ed-898d-17076c5dff5f": {"__data__": {"id_": "c51109ff-d5b4-41ed-898d-17076c5dff5f", "embedding": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "563ea57f77269f53718c4d70586bd02bb0bc713e673a9f7ed5cc81ac63b38cbb"}, "2": {"node_id": "293fe20e-c129-4475-b20d-2aed5c3e040f", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "b1e0145f4721d9b007b0b417394f78071bc7943332ecd73d7bc9f865d2b4f97d"}, "3": {"node_id": "e9c0cd96-a68c-44c9-b33b-74dbbfbf34cd", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "c40e16a1e4f0be5a961c7214328ad076ab1d9a17d8d34bf7c0af2019b37ee23d"}}, "hash": "172b6bda8db86932519a8ae997474d3135dc0e51095ea2902e088c4f0221a326", "text": " },\n  \"time\": 1598909219\n}\nnote.update \n\nUpdates a Note in a DB Notefile by its ID, replacing the existing body and/or payload.\n\nArguments\nfile\n\nstring\n\nThe name of the DB Notefile that contains the Note to update.\n\nnote\n\nstring\n\nThe unique Note ID.\n\nbody\n\nJSON object\n\nA JSON object to add to the Note. A Note must have either a body or payload, and can have both.\n\npayload\n\nbase64 string\n\nA base64-encoded binary payload. A Note must have either a body or payload, and can have both.\n\nverify (Added in v1.5.6)\n\nboolean (optional)\n\nIf set to true and using a templated Notefile, the Notefile will be written to flash immediately, rather than being cached in RAM and written to flash later.\n\naccess_token\n\nstring (Notehub curl requests only)\n\nA Notehub API bearer token.\n\nprojectUID\n\nstring (Notehub curl requests only)\n\nThe ProjectUID of a Notehub project.\n\ndeviceUID\n\nstring (Notehub curl requests only)\n\nThe globally-unique DeviceUID of a device that currently exists within the specified ProjectUID.\n\nYou may alternatively provide a device serial number by prefixing this argument with sn:, for example sn:my-device.\n\nExample\nJSON\nC/C++\nPython\nBash\nCOPY\n{\n  \"req\": \"note.update\",\n  \"file\": \"my-settings.db\",\n  \"note\": \"measurements\",\n  \"body\": { \"interval\": 60 }\n}\nResponse Members\nNone: an empty object {} means success.\nnote.template \n\nUsing the note.template request command with any .qo/.qos Notefile, developers can provide the Notecard with a schema of sorts to apply to future Notes added to the Notefile. This", "start_char_idx": 9099, "end_char_idx": 10620, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e9c0cd96-a68c-44c9-b33b-74dbbfbf34cd": {"__data__": {"id_": "e9c0cd96-a68c-44c9-b33b-74dbbfbf34cd", "embedding": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "563ea57f77269f53718c4d70586bd02bb0bc713e673a9f7ed5cc81ac63b38cbb"}, "2": {"node_id": "c51109ff-d5b4-41ed-898d-17076c5dff5f", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "172b6bda8db86932519a8ae997474d3135dc0e51095ea2902e088c4f0221a326"}, "3": {"node_id": "f14bbfc5-e159-44fd-9e2f-d58fdce3d6b6", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "3e8fe5d60b598097964fac617421ce98cb596aafccd8e46995d03fb527b262de"}}, "hash": "c40e16a1e4f0be5a961c7214328ad076ab1d9a17d8d34bf7c0af2019b37ee23d", "text": "with a schema of sorts to apply to future Notes added to the Notefile. This template acts as a hint to the Notecard that allows it to internally store data as fixed-length binary records rather than as flexible JSON objects which require much more memory. Using templated Notes in place of regular Notes increases the storage and sync capability of the Notecard by an order of magnitude.\n\nRead about Working with Note Templates for additional information.\n\nArguments\nfile\n\nstring\n\nThe name of the Notefile to which the template will be applied.\n\nbody\n\nJSON object (optional)\n\nA sample JSON body that specifies field names and values as \"hints\" for the data type. Possible data types are: boolean, integer, float, and string. See Understanding Template Data Types for an explanation of type hints and explanations.\n\nlength\n\ninteger (optional)\n\nThe maximum length of a payload (in bytes) that can be sent in Notes for the template Notefile. As of v3.2.1, length is no longer required, and payloads can be added to any template-based Note without specifying the payload length.\n\nverify (Added in v3.2.1)\n\nboolean (optional)\n\nIf true, returns the current template set on a given Notefile.\n\nProvide Schema\nRequest Note Size\nRequest Current Template\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"note.template\",\n  \"file\": \"readings.qo\",\n  \"body\": {\n    \"new_vals\": true,\n    \"temperature\": 12.1,\n    \"humidity\": 11,\n    \"pump_state\": \"4\"\n  },\n  \"length\": 32\n}\nResponse Members\nbytes\n\ninteger\n\nThe number of bytes that will be transmitted to Notehub, per Note, before compression.\n\ntemplate (Added in v3.2.1)\n\nboolean\n\ntrue if", "start_char_idx": 10594, "end_char_idx": 12202, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f14bbfc5-e159-44fd-9e2f-d58fdce3d6b6": {"__data__": {"id_": "f14bbfc5-e159-44fd-9e2f-d58fdce3d6b6", "embedding": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf85da0a-1022-4f9d-b2f8-5b1d12476556", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "563ea57f77269f53718c4d70586bd02bb0bc713e673a9f7ed5cc81ac63b38cbb"}, "2": {"node_id": "e9c0cd96-a68c-44c9-b33b-74dbbfbf34cd", "node_type": null, "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}, "hash": "c40e16a1e4f0be5a961c7214328ad076ab1d9a17d8d34bf7c0af2019b37ee23d"}}, "hash": "3e8fe5d60b598097964fac617421ce98cb596aafccd8e46995d03fb527b262de", "text": "(Added in v3.2.1)\n\nboolean\n\ntrue if an active template exists on the Notefile.\n\nbody (Added in v3.2.1)\n\nIf the verify argument is provided and the Notefile has an active template, the template body\n\nlength (Added in v3.2.1)\n\nIf the verify argument is provided and the Notefile has an active template with a payload, the payload length.\n\nExample Response\nCOPY\n{\n  \"bytes\": 40\n}\nMore information:\n\nWorking With Note Templates\n\nUnderstanding Template Data Types\n\nhub Requests\nweb Requests\nCan we improve this page? Send us feedback", "start_char_idx": 12228, "end_char_idx": 12756, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"bf85da0a-1022-4f9d-b2f8-5b1d12476556": {"node_ids": ["c0401221-2a2d-4211-832c-5f9194283943", "718548a6-b4db-47d9-b9d5-60a2410e5d4f", "63318537-234c-4eb9-85d8-08cf8bc1e398", "46d1e2a3-abf2-4c79-b3cc-028c146aecff", "7a7c8c0d-6804-4820-a320-bae0665931b6", "293fe20e-c129-4475-b20d-2aed5c3e040f", "c51109ff-d5b4-41ed-898d-17076c5dff5f", "e9c0cd96-a68c-44c9-b33b-74dbbfbf34cd", "f14bbfc5-e159-44fd-9e2f-d58fdce3d6b6"], "metadata": {"title": "", "category": "Note Requests", "url": "https://dev.blues.io/api-reference/notecard-api/note-requests/"}}}}