{"docstore/metadata": {"ed8375d0-2842-4794-9fcb-ec5dcab41db3": {"doc_hash": "27eb6b92a85d3baf55ca1f5bfd46bf5746615e70a6ea143e33a45a12ddd4046e"}, "94bed744-492d-4c65-aeb7-cca0af2e8332": {"doc_hash": "3d9092e8dc596522313cc4be3c8dd69068f63671dc303c8d2d4018c53747798e", "ref_doc_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3"}, "91a04e9e-7660-4fce-8d4d-50437e385acd": {"doc_hash": "778ea157e307a854bbd815c30c302f830814f92350e124891790c604f5231038", "ref_doc_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3"}, "12a26d67-1cb5-4717-a4b0-42148d9cac2a": {"doc_hash": "2c3515b09f22047e59fd73b84f345587809a7b738de99ead3ac5777da9f999fe", "ref_doc_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3"}, "0ef0d1d9-4ae9-451c-9e12-4c28e4b043dc": {"doc_hash": "11bcb55d7ca9bcf967ce1176c12052836dc0d38c12d0e9f7503a541e7f8a712f", "ref_doc_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3"}, "7ce6c727-eb41-482f-8ec9-668920b58ffb": {"doc_hash": "8ec0e228f7920871df9616cda470d8c01630942cfbd5bc60a3f9d96e637e915a", "ref_doc_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3"}, "35ae1b1d-603d-4c5d-91db-a91fb35d0025": {"doc_hash": "d1c8e5e44faad4affc5cb746993b7da37b05e3ec4cd22b47be2ce66f71ffebe4", "ref_doc_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3"}, "f9b712f1-ba26-4fe9-a036-b5eb073f8b7d": {"doc_hash": "db29979416bf799d9f0df92ad50898b332b9b6e4d80fbbdaf3fb13135e80b7a8", "ref_doc_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3"}, "baf88276-76ed-46ba-b03b-a04eb8a17370": {"doc_hash": "360c95c8add33f4a5286d47eb789f4a7bb0f6055ca7ed233480ee23f3bf49666", "ref_doc_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3"}, "d5f77945-5a83-4279-8712-798f3aec2bdb": {"doc_hash": "d1f2152fa49453b604a49a1703701076ddd3a9a9b230c0bbb86d488f7edf12b9", "ref_doc_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3"}, "dfe8f350-8cda-43f2-be2f-7739258d7541": {"doc_hash": "b348c7ad988aeac655763af5a60580678da2ea1ca127440f98568d5fec524c1a", "ref_doc_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3"}, "ddd64170-f847-46ef-ac7f-d99b03d95ccb": {"doc_hash": "1fbd2718a1b6295a958ee1a42f4f7f233ce737a38d4ed434b74373290bf30f6f", "ref_doc_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3"}, "58a0c330-f9a2-4753-b038-161e3dc3b973": {"doc_hash": "ae824be7e19a95a8b69075ea09fbb63462fa2969e0bf89a3e4ea9b9238e87801", "ref_doc_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3"}, "788e30cc-72ad-4177-b9f7-23aefb478f64": {"doc_hash": "a90c7363694f12cd241a0636f1ffa2f01f6ce79532a9cc0148ef564b0e178aae", "ref_doc_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3"}, "c967a865-68d9-4d41-adb6-86ffa3b78494": {"doc_hash": "11a9a86f5d5c649c5742fc9a7d16e9ebd941cf76d9d724da680637747c5ef556", "ref_doc_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3"}, "9e0a2152-14ca-4fcb-a591-be03143d7219": {"doc_hash": "45e5ccc305385d60063b3363dd15f202e6252570a96cff63e2cff06dd1ccd813", "ref_doc_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3"}}, "docstore/data": {"94bed744-492d-4c65-aeb7-cca0af2e8332": {"__data__": {"id_": "94bed744-492d-4c65-aeb7-cca0af2e8332", "embedding": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "27eb6b92a85d3baf55ca1f5bfd46bf5746615e70a6ea143e33a45a12ddd4046e"}, "3": {"node_id": "91a04e9e-7660-4fce-8d4d-50437e385acd", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "778ea157e307a854bbd815c30c302f830814f92350e124891790c604f5231038"}}, "hash": "3d9092e8dc596522313cc4be3c8dd69068f63671dc303c8d2d4018c53747798e", "text": "Building Edge ML Applications\nGet started with:\nBlues Swan\n\nIn this tutorial, you'll learn how to build an edge machine learning (ML) application. Edge ML applications run at the \"edge\" of a network rather than on a centralized server, and are appealing for their cost savings (no need for a server), speed, and privacy friendly approach.\n\nFor this tutorial you'll build an ML model using Edge Impulse, and you'll deploy that model to run on a Blues Swan. The instructions detail the creation of a \"magic wand\" that can recognize gestures using an accelerometer and an ML classification model\u2014but, feel free to adapt the instructions to work with other types of sensors.\n\nNote\n\nYou can find the complete source for this guide on GitHub. Specifically, we provide an accelerometer data collector sketch, an example edge ML model, and a data classification sketch.\n\nBefore You Start\n\nLet's start by looking at the hardware, setup steps, and libraries you need to complete this guide.\n\nHardware\n\nIf you wish to follow along with this guide you'll need the following hardware:\n\nA Swan MCU.\nA triple axis accelerometer. We used the Adafruit LIS3DH for this example.\nSetup\n\nYou'll also need to perform the following setup:\n\nComplete the Swan Quickstart for PlatformIO (recommended) or the Swan Quickstart for Arduino IDE.\nSet up a new project to consume accelerometer data within Edge Impulse Studio.\nFollow Edge Impulse's instructions to install the Edge Impulse CLI.\nLibraries\n\nFinally, you need to install the appropriate library for your accelerometer in your preferred editor.\n\nArduino IDE\n\nIf you're using Arduino IDE, you need to install the accelerometer's library from the Arduino Library Manager. To do so, open the Tools > Manage Libraries... menu, search for Adafruit LIS3DH and click", "start_char_idx": 0, "end_char_idx": 1789, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "91a04e9e-7660-4fce-8d4d-50437e385acd": {"__data__": {"id_": "91a04e9e-7660-4fce-8d4d-50437e385acd", "embedding": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "27eb6b92a85d3baf55ca1f5bfd46bf5746615e70a6ea143e33a45a12ddd4046e"}, "2": {"node_id": "94bed744-492d-4c65-aeb7-cca0af2e8332", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "3d9092e8dc596522313cc4be3c8dd69068f63671dc303c8d2d4018c53747798e"}, "3": {"node_id": "12a26d67-1cb5-4717-a4b0-42148d9cac2a", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "2c3515b09f22047e59fd73b84f345587809a7b738de99ead3ac5777da9f999fe"}}, "hash": "778ea157e307a854bbd815c30c302f830814f92350e124891790c604f5231038", "text": "Tools > Manage Libraries... menu, search for Adafruit LIS3DH and click Install.\n\nPlatformIO\n\nIf you're using PlatformIO, add adafruit/Adafruit LIS3DH@^1.2.4 to the lib_deps section of your platformio.ini file.\n\nForwarding Data to Edge Impulse\n\nFor this example, we will create a simple classification model with an accelerometer designed to analyze movement over a brief period of time (2 seconds) and infer how the motion correlates to one of the following three states:\n\nIdle (no motion)\nChop (motioning away and back towards your body)\nWave (motioning side-to-side across your body)\n\nThe first step in building any ML model is data acquisition and labeling, and Edge Impulse makes this simple with the data forwarder and Edge Impulse Studio.\n\nTo get started collecting data from your accelerometer, you'll load a program to the device that streams X, Y, and Z values from the accelerometer to the serial port on your Blues Swan. Edge Impulse's data forwarder can then read the output of your device and forward it to Edge Impulse studio, where you can label the data and build up a dataset for training.\n\nIn your preferred IDE, create a new sketch that will serve as the data acquisition program:\n\nCOPY\n#include <Arduino.h>\n#include <Adafruit_LIS3DH.h>\n\nAdafruit_LIS3DH lis = Adafruit_LIS3DH();\n\nvoid setup(void)\n{\n  Serial.begin(115200);\n  lis.begin(0x18);\n}\n\nvoid loop()\n{\n  lis.read(); // get x,y,z data at once\n  Serial.print(lis.x);\n  Serial.print(\"\\t\");\n  Serial.print(lis.y);\n  Serial.print(\"\\t\");\n ", "start_char_idx": 1730, "end_char_idx": 3239, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "12a26d67-1cb5-4717-a4b0-42148d9cac2a": {"__data__": {"id_": "12a26d67-1cb5-4717-a4b0-42148d9cac2a", "embedding": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "27eb6b92a85d3baf55ca1f5bfd46bf5746615e70a6ea143e33a45a12ddd4046e"}, "2": {"node_id": "91a04e9e-7660-4fce-8d4d-50437e385acd", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "778ea157e307a854bbd815c30c302f830814f92350e124891790c604f5231038"}, "3": {"node_id": "0ef0d1d9-4ae9-451c-9e12-4c28e4b043dc", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "11bcb55d7ca9bcf967ce1176c12052836dc0d38c12d0e9f7503a541e7f8a712f"}}, "hash": "2c3515b09f22047e59fd73b84f345587809a7b738de99ead3ac5777da9f999fe", "text": " Serial.print(lis.y);\n  Serial.print(\"\\t\");\n  Serial.print(lis.z);\n  Serial.println();\n}\n\nAfter initializing the accelerometer, this example sketch will output raw accelerometer data to the serial console.\n\nRun this program on your Swan, using the Upload button in the Arduino IDE or Upload function in PlatformIO.\n\nNote\n\nIf you're having trouble uploading code to your Swan, refer back to the Swan quickstart guide for help.\n\nOnce running, you can connect to the serial monitor to verify that the program is running and outputting a stream of accelerometer values, like so:\n\nCOPY\n-224    -528    16192\n-320    -528    16192\n112     -624    15792\n112     -624    15792\n304     -496    16160\n304     -496    16160\n80      -640    16384\n80      -640    16384\n-112    -640    16384\n\nOnce your MCU is emitting accelerometer values, the next step is to capture readings while performing the gestures you want to classify, and forward these to Edge Impulse Studio.\n\nTo start the forwarder, make sure you've closed your serial monitor and run the following from a terminal:\n\nCOPY\nedge-impulse-data-forwarder\n\nFollow the prompts to log into your Edge Impulse account, select a project, and assign names to the X, Y, and Z values from your accelerometer.\n\nOnce instructed to do so, use the URL provided by the forwarder to open Edge Impulse Studio and start capturing data.\n\nIn the \"Record new data\" form, make sure your device is selected, set a label for the gesture you plan to perform, and set the", "start_char_idx": 3259, "end_char_idx": 4751, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0ef0d1d9-4ae9-451c-9e12-4c28e4b043dc": {"__data__": {"id_": "0ef0d1d9-4ae9-451c-9e12-4c28e4b043dc", "embedding": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "27eb6b92a85d3baf55ca1f5bfd46bf5746615e70a6ea143e33a45a12ddd4046e"}, "2": {"node_id": "12a26d67-1cb5-4717-a4b0-42148d9cac2a", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "2c3515b09f22047e59fd73b84f345587809a7b738de99ead3ac5777da9f999fe"}, "3": {"node_id": "7ce6c727-eb41-482f-8ec9-668920b58ffb", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "8ec0e228f7920871df9616cda470d8c01630942cfbd5bc60a3f9d96e637e915a"}}, "hash": "11bcb55d7ca9bcf967ce1176c12052836dc0d38c12d0e9f7503a541e7f8a712f", "text": "device is selected, set a label for the gesture you plan to perform, and set the sample length to 10000 ms (10 seconds). Then, click \"Start sampling\".\n\nAt this point, Edge Impulse Studio will send a message to the forwarder running on your computer and instruct it to capture a ten second sample from the accelerometer. Once the capture starts, perform a gesture you wish to classify repeatedly for the entire ten seconds.\n\nAfter the sample is captured, it's uploaded to Edge Impulse Studio, where you can see a visual view of the accelerometer data captured by the forwarder.\n\nNow comes the fun part! To get a solid cross-section of data for your model, you'll want to repeat this process multiple times for each gesture you want to classify in your application.\n\nThe more data you capture, the better your model will be, so take the time to record at least a few minutes worth of data for each gesture.\n\nFinally, allocate 10-20% of your captured data to your test set. This data will be set aside and not used to training your model. Doing so will allow you to more accurately test your model before deploying it.\n\nBuild and Train an ML Model\n\nOnce you've captured enough data from the accelerometer, you're ready to move on to designing and building your model. In the left-side menu of Edge Impulse Studio, click \"Create impulse\" under the Impulse Design menu. Based on the data you collected, Edge Impulse Studio will recognize that your source data set is a time series and will make some recommendations for the window size and increase to use, which you are free to adjust as you test and iterate on the model.\n\nNext, click on the \"Add a processing block\" button and add a \"Spectral Analysis\" block.\n\nThen, click the \"Add a learning block\" button and select the \"Classification (Keras)\" block.\n\nFinally, click \"Save Impulse\".\n\nOn the next screen, \"Spectral", "start_char_idx": 4728, "end_char_idx": 6592, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7ce6c727-eb41-482f-8ec9-668920b58ffb": {"__data__": {"id_": "7ce6c727-eb41-482f-8ec9-668920b58ffb", "embedding": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "27eb6b92a85d3baf55ca1f5bfd46bf5746615e70a6ea143e33a45a12ddd4046e"}, "2": {"node_id": "0ef0d1d9-4ae9-451c-9e12-4c28e4b043dc", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "11bcb55d7ca9bcf967ce1176c12052836dc0d38c12d0e9f7503a541e7f8a712f"}, "3": {"node_id": "35ae1b1d-603d-4c5d-91db-a91fb35d0025", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "d1c8e5e44faad4affc5cb746993b7da37b05e3ec4cd22b47be2ce66f71ffebe4"}}, "hash": "8ec0e228f7920871df9616cda470d8c01630942cfbd5bc60a3f9d96e637e915a", "text": "click \"Save Impulse\".\n\nOn the next screen, \"Spectral features\", you can adjust and tune parameters if you wish, or keep the defaults.\n\nClick \"Save parameters\" when done and you'll be taken to the \"Generate features\" screen.\n\nClick the \"Generate features\" button and, once the job completes, you'll get some estimates of on-device inference performance and a feature explorer that shows how your gestures are clustering on their x, y, and z axes.\n\nYou can pan, zoom and scroll around in that view to drill into your sensor data.\n\nOnce you're done playing with the feature explorer, click on the \"NN Classifier\" item in the left nav, and adjust the number of training cycles to 300 and learning rate to 0.0005. Then, click \"Start training\" and grab a cup of coffee while Edge Impulse trains your model.\n\nAfter training is complete, Edge Impulse Studio will display the performance of the model, a confusion matrix, feature explorer, and on-device performance details.\n\nTest the Model\n\nThere are two different ways to test your model in Edge Impulse Studio before you deploy it to your board: \"Live Classification\" and \"Model Testing\".\n\nLive Classification\n\nYou can use the Edge Impulse data forwarder to perform live classification against the model you've just trained. First, make sure your Blues Swan is connected to your computer and start the Edge Impulse data forwarder:\n\nCOPY\nedge-impulse-data-forwarder\n\nNext, in Edge Impulse Studio, click the \"Live classification\" menu item in the left nav. Make sure your device is selected and click \"Start sampling.\"\n\nAfter the initialization delay, perform the gesture you want to classify. Once captured from the device, Edge Impulse runs the raw data against the model and displays the classification results. Using the UI, you can set the expected outcome and even move results into your training set for model refinement.\n\nModel", "start_char_idx": 6612, "end_char_idx": 8489, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "35ae1b1d-603d-4c5d-91db-a91fb35d0025": {"__data__": {"id_": "35ae1b1d-603d-4c5d-91db-a91fb35d0025", "embedding": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "27eb6b92a85d3baf55ca1f5bfd46bf5746615e70a6ea143e33a45a12ddd4046e"}, "2": {"node_id": "7ce6c727-eb41-482f-8ec9-668920b58ffb", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "8ec0e228f7920871df9616cda470d8c01630942cfbd5bc60a3f9d96e637e915a"}, "3": {"node_id": "f9b712f1-ba26-4fe9-a036-b5eb073f8b7d", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "db29979416bf799d9f0df92ad50898b332b9b6e4d80fbbdaf3fb13135e80b7a8"}}, "hash": "d1c8e5e44faad4affc5cb746993b7da37b05e3ec4cd22b47be2ce66f71ffebe4", "text": "the expected outcome and even move results into your training set for model refinement.\n\nModel Testing\n\nRecall when we earlier set aside a small percentage of data samples in the test set? Click on the \"Model testing\" menu item. You'll see all of your test samples and have the ability to \"Classify all\" which will run each sample through the classifier.\n\nDeploy the Model\n\nOnce you're happy with the performance of your model, it's time to deploy it to your device!\n\nTo do so click the the \"Deployment\" menu item in Edge Impulse Studio, and then click the \"Arduino library\" button.\n\nUnder the \"Select optimizations\" section, you can select either a quantized model or unoptimized, depending on your needs.\n\nThe Swan has plenty of RAM and Flash, so you can choose the unoptimized model if it provides better performance without sacrificing too much speed.\n\nOnce you've selected a model, click Build. Edge Impulse Studio will build a model package and deliver a zip archive for you to download.\n\nArduino IDE\nPlatformIO\nUsing Arduino IDE?\n\nYou'll need to include this library in Arduino IDE, so that your program your program can reference the model and SDK. To do so, open a new Arduino Sketch, click the Sketch menu then Include Library > Add .ZIP Library...\n\nNavigate to the .zip file you just download and select it.\n\nAfter Arduino IDE processes the library, open the Sketch > Include Library, menu, and under Contributed libraries choose the name of the folder you selected. This will add the appropriate include statement to your sketch.\n\nWrite Your Sketch\n\nWith the library installed in your project, you're ready to perform edge inferencing!\n\nYou can use the following sketch and customize it for your needs.\n\nCOPY\n#include <Arduino.h>\n#include <Adafruit_LIS3DH.h>\n#include", "start_char_idx": 8455, "end_char_idx": 10234, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f9b712f1-ba26-4fe9-a036-b5eb073f8b7d": {"__data__": {"id_": "f9b712f1-ba26-4fe9-a036-b5eb073f8b7d", "embedding": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "27eb6b92a85d3baf55ca1f5bfd46bf5746615e70a6ea143e33a45a12ddd4046e"}, "2": {"node_id": "35ae1b1d-603d-4c5d-91db-a91fb35d0025", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "d1c8e5e44faad4affc5cb746993b7da37b05e3ec4cd22b47be2ce66f71ffebe4"}, "3": {"node_id": "baf88276-76ed-46ba-b03b-a04eb8a17370", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "360c95c8add33f4a5286d47eb789f4a7bb0f6055ca7ed233480ee23f3bf49666"}}, "hash": "db29979416bf799d9f0df92ad50898b332b9b6e4d80fbbdaf3fb13135e80b7a8", "text": "<Adafruit_LIS3DH.h>\n#include <Blues_Hammer.h> // **replace this with reference to YOUR model!**\n\nstatic bool debug_nn = false; // Set this to true to see features generated from raw signal\n\nAdafruit_LIS3DH lis = Adafruit_LIS3DH();\n\nvoid setup()\n{\n    Serial.begin(115200);\n    lis.begin(0x18);\n\n    if (EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME != 3)\n    {\n        ei_printf(\"ERR: EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME should be equal to 3 (the 3 sensor axes)\\n\");\n        return;\n    }\n}\n\nvoid loop()\n{\n    ei_printf(\"\\nStarting inferencing in 2 seconds...\\n\");\n    delay(2000);\n    ei_printf(\"Sampling...\\n\");\n\n    // Allocate a buffer here for the values we'll read from the IMU\n    float buffer[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE] = {0};\n\n    for (size_t ix = 0; ix < EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE; ix += 3)\n    {\n        // Determine the next tick (and then sleep later)\n        uint64_t next_tick = micros() + (EI_CLASSIFIER_INTERVAL_MS * 1000);\n\n        lis.read();\n        buffer[ix] = lis.x;\n        buffer[ix + 1] = lis.y;\n        buffer[ix + 2] =", "start_char_idx": 10288, "end_char_idx": 11342, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "baf88276-76ed-46ba-b03b-a04eb8a17370": {"__data__": {"id_": "baf88276-76ed-46ba-b03b-a04eb8a17370", "embedding": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "27eb6b92a85d3baf55ca1f5bfd46bf5746615e70a6ea143e33a45a12ddd4046e"}, "2": {"node_id": "f9b712f1-ba26-4fe9-a036-b5eb073f8b7d", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "db29979416bf799d9f0df92ad50898b332b9b6e4d80fbbdaf3fb13135e80b7a8"}, "3": {"node_id": "d5f77945-5a83-4279-8712-798f3aec2bdb", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "d1f2152fa49453b604a49a1703701076ddd3a9a9b230c0bbb86d488f7edf12b9"}}, "hash": "360c95c8add33f4a5286d47eb789f4a7bb0f6055ca7ed233480ee23f3bf49666", "text": "= lis.y;\n        buffer[ix + 2] = lis.z;\n\n        delayMicroseconds(next_tick - micros());\n    }\n\n    // Turn the raw buffer in a signal which we can the classify\n    signal_t signal;\n    int err = numpy::signal_from_buffer(buffer, EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, &signal);\n    if (err != 0)\n    {\n        ei_printf(\"Failed to create signal from buffer (%d)\\n\", err);\n        return;\n    }\n\n    // Run the classifier\n    ei_impulse_result_t result = {0};\n\n    err = run_classifier(&signal, &result, debug_nn);\n    if (err != EI_IMPULSE_OK)\n    {\n        ei_printf(\"ERR: Failed to run classifier (%d)\\n\", err);\n        return;\n    }\n\n    ei_printf(\"(DSP: %d ms., Classification: %d ms., Anomaly: %d ms.)\\n\",\n              result.timing.dsp, result.timing.classification, result.timing.anomaly);\n    uint8_t predictionLabel = 0;\n    for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++)\n    {\n        Serial.print(\"    \");\n        Serial.print(result.classification[ix].label);\n        Serial.print(\": \");\n   ", "start_char_idx": 11350, "end_char_idx": 12365, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d5f77945-5a83-4279-8712-798f3aec2bdb": {"__data__": {"id_": "d5f77945-5a83-4279-8712-798f3aec2bdb", "embedding": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "27eb6b92a85d3baf55ca1f5bfd46bf5746615e70a6ea143e33a45a12ddd4046e"}, "2": {"node_id": "baf88276-76ed-46ba-b03b-a04eb8a17370", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "360c95c8add33f4a5286d47eb789f4a7bb0f6055ca7ed233480ee23f3bf49666"}, "3": {"node_id": "dfe8f350-8cda-43f2-be2f-7739258d7541", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "b348c7ad988aeac655763af5a60580678da2ea1ca127440f98568d5fec524c1a"}}, "hash": "d1f2152fa49453b604a49a1703701076ddd3a9a9b230c0bbb86d488f7edf12b9", "text": "       Serial.print(\": \");\n        Serial.println(result.classification[ix].value);\n\n        if (result.classification[ix].value > result.classification[predictionLabel].value)\n            predictionLabel = ix;\n    }\n\n    // print the predictions\n    String label = result.classification[predictionLabel].label;\n\n    Serial.print(\"\\nPrediction: \");\n    Serial.println(label);\n\n#if EI_CLASSIFIER_HAS_ANOMALY == 1\n    ei_printf(\"    anomaly score: %.3f\\n\", result.anomaly);\n#endif\n}\nDeploy to Your MCU\n\nThe final step is to upload the program to your Blues Swan.\n\nOnce you've done so, open the serial monitor, perform some gestures, and see some inferences. The sample above performs continuous classification every few seconds, so you will see a steady stream of output in the monitor.\n\nCOPY\n(DSP: 37 ms., Classification: 0 ms., Anomaly: 0 ms.)\n    chop: 0.00\n    idle: 0.98\n    wave: 0.02\n\nPrediction: idle\n\nStarting inferencing in 2 seconds...\nSampling...\n(DSP: 36 ms., Classification: 0 ms., Anomaly: 0 ms.)\n    chop: 0.00\n    idle: 0.00\n    wave: 1.00\n\nPrediction: wave\n\nStarting inferencing in 2 seconds...\nSampling...\n(DSP: 36 ms., Classification: 0 ms., Anomaly: 0 ms.)\n    chop: 1.00\n    idle: 0.00\n    wave: 0.00\n\nPrediction:", "start_char_idx": 12368, "end_char_idx": 13601, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "dfe8f350-8cda-43f2-be2f-7739258d7541": {"__data__": {"id_": "dfe8f350-8cda-43f2-be2f-7739258d7541", "embedding": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "27eb6b92a85d3baf55ca1f5bfd46bf5746615e70a6ea143e33a45a12ddd4046e"}, "2": {"node_id": "d5f77945-5a83-4279-8712-798f3aec2bdb", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "d1f2152fa49453b604a49a1703701076ddd3a9a9b230c0bbb86d488f7edf12b9"}, "3": {"node_id": "ddd64170-f847-46ef-ac7f-d99b03d95ccb", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "1fbd2718a1b6295a958ee1a42f4f7f233ce737a38d4ed434b74373290bf30f6f"}}, "hash": "b348c7ad988aeac655763af5a60580678da2ea1ca127440f98568d5fec524c1a", "text": "idle: 0.00\n    wave: 0.00\n\nPrediction: chop\nNote\n\nIf your classifications are running slow, check out this section of the Edge Impulse documentation, which has some optimizations you can try enabling to speed up your DSP processing.\n\nCongratulations! You've built an edge ML model with Edge Impulse and the Blues Swan!\n\nSending Inference Data to the Cloud With the Notecard\n\nAs an optional additional step, you may wish to send your inference data to the cloud using the Notecard. Having inference data in the cloud allows you to build dashboards, and to monitor your edge ML model remotely.\n\nIf you're interested in setting this up, you must first connect a Notecard to your Swan.\n\nNote\n\nThe easiest way to connect a Notecard to the Swan is with a Notecarrier-F. See the Notecard and Notecarrier-F quickstart for detailed instructions with photos.\n\nSet up Notehub\n\nWith everything connected, you next need to create a Notehub account (if you don't have one already) and create a new Notehub project. Notehub is a cloud backend the Notecard knows how to communicate with by default, and once you have a Notehub project you're ready to start sending data.\n\nBefore you head back to your code, make sure to copy your project's ProductUID (see image below), as you'll need it momentarily.\n\nInstalling the note-arduino Library\n\nWith Notehub set up, you next need to start sending data to your Notehub project from your Arduino code.\n\nTo do so, start by installing the Notecard Arduino SDK, note-arduino, in your editor with the instructions below.\n\nArduino IDE\nPlatformIO\nUsing Arduino IDE?\n\nFollow our instructions on installing the Notecard Arduino library.\n\nSending Data to Notehub\n\nWith the library installed, you next need to use the", "start_char_idx": 13589, "end_char_idx": 15322, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ddd64170-f847-46ef-ac7f-d99b03d95ccb": {"__data__": {"id_": "ddd64170-f847-46ef-ac7f-d99b03d95ccb", "embedding": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "27eb6b92a85d3baf55ca1f5bfd46bf5746615e70a6ea143e33a45a12ddd4046e"}, "2": {"node_id": "dfe8f350-8cda-43f2-be2f-7739258d7541", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "b348c7ad988aeac655763af5a60580678da2ea1ca127440f98568d5fec524c1a"}, "3": {"node_id": "58a0c330-f9a2-4753-b038-161e3dc3b973", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "ae824be7e19a95a8b69075ea09fbb63462fa2969e0bf89a3e4ea9b9238e87801"}}, "hash": "1fbd2718a1b6295a958ee1a42f4f7f233ce737a38d4ed434b74373290bf30f6f", "text": "Data to Notehub\n\nWith the library installed, you next need to use the note-arduino library to send your inference data to the cloud.\n\nYou can do so by replacing your current sketch with the code below, making sure to update line 4 with an updated reference to your model, and line 6 with the ProductUID from Notehub you copied earlier.\n\nCOPY\n#include <Arduino.h>\n#include <Adafruit_LIS3DH.h>\n#include <Notecard.h>\n#include <Blues_Hammer.h> // **replace this with reference to YOUR model!**\n\n#define productUID \"com.blues.hammer\" // **replace this with a reference to YOUR ProductUID!**\n\nstatic bool debug_nn = false; // Set this to true to see features generated from raw signal\n\nNotecard notecard;\nAdafruit_LIS3DH lis = Adafruit_LIS3DH();\n\nvoid setup()\n{\n    Serial.begin(115200);\n    lis.begin(0x18);\n    notecard.begin();\n\n    J *req = notecard.newRequest(\"hub.set\");\n    JAddStringToObject(req, \"product\", productUID);\n    JAddStringToObject(req, \"mode\", \"periodic\");\n    JAddNumberToObject(req, \"outbound\", 5);\n    if (!notecard.sendRequest(req)) {\n        JDelete(req);\n    }\n\n    if (EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME != 3)\n    {\n        ei_printf(\"ERR: EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME should be equal to 3 (the 3 sensor axes)\\n\");\n        return;\n   ", "start_char_idx": 15297, "end_char_idx": 16561, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "58a0c330-f9a2-4753-b038-161e3dc3b973": {"__data__": {"id_": "58a0c330-f9a2-4753-b038-161e3dc3b973", "embedding": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "27eb6b92a85d3baf55ca1f5bfd46bf5746615e70a6ea143e33a45a12ddd4046e"}, "2": {"node_id": "ddd64170-f847-46ef-ac7f-d99b03d95ccb", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "1fbd2718a1b6295a958ee1a42f4f7f233ce737a38d4ed434b74373290bf30f6f"}, "3": {"node_id": "788e30cc-72ad-4177-b9f7-23aefb478f64", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "a90c7363694f12cd241a0636f1ffa2f01f6ce79532a9cc0148ef564b0e178aae"}}, "hash": "ae824be7e19a95a8b69075ea09fbb63462fa2969e0bf89a3e4ea9b9238e87801", "text": "axes)\\n\");\n        return;\n    }\n}\n\nvoid loop()\n{\n    ei_printf(\"\\nStarting inferencing in 2 seconds...\\n\");\n    delay(2000);\n    ei_printf(\"Sampling...\\n\");\n\n    // Allocate a buffer here for the values we'll read from the IMU\n    float buffer[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE] = {0};\n\n    for (size_t ix = 0; ix < EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE; ix += 3)\n    {\n        // Determine the next tick (and then sleep later)\n        uint64_t next_tick = micros() + (EI_CLASSIFIER_INTERVAL_MS * 1000);\n\n        lis.read();\n        buffer[ix] = lis.x;\n        buffer[ix + 1] = lis.y;\n        buffer[ix + 2] = lis.z;\n\n        delayMicroseconds(next_tick - micros());\n    }\n\n    // Turn the raw buffer in a signal which we can the classify\n    signal_t signal;\n    int err = numpy::signal_from_buffer(buffer, EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, &signal);\n    if (err != 0)\n    {\n        ei_printf(\"Failed to create signal from buffer (%d)\\n\", err);\n        return;\n    }\n\n    // Run the classifier\n    ei_impulse_result_t result = {0};\n\n ", "start_char_idx": 16601, "end_char_idx": 17637, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "788e30cc-72ad-4177-b9f7-23aefb478f64": {"__data__": {"id_": "788e30cc-72ad-4177-b9f7-23aefb478f64", "embedding": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "27eb6b92a85d3baf55ca1f5bfd46bf5746615e70a6ea143e33a45a12ddd4046e"}, "2": {"node_id": "58a0c330-f9a2-4753-b038-161e3dc3b973", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "ae824be7e19a95a8b69075ea09fbb63462fa2969e0bf89a3e4ea9b9238e87801"}, "3": {"node_id": "c967a865-68d9-4d41-adb6-86ffa3b78494", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "11a9a86f5d5c649c5742fc9a7d16e9ebd941cf76d9d724da680637747c5ef556"}}, "hash": "a90c7363694f12cd241a0636f1ffa2f01f6ce79532a9cc0148ef564b0e178aae", "text": "   ei_impulse_result_t result = {0};\n\n    err = run_classifier(&signal, &result, debug_nn);\n    if (err != EI_IMPULSE_OK)\n    {\n        ei_printf(\"ERR: Failed to run classifier (%d)\\n\", err);\n        return;\n    }\n\n    ei_printf(\"(DSP: %d ms., Classification: %d ms., Anomaly: %d ms.)\\n\",\n              result.timing.dsp, result.timing.classification, result.timing.anomaly);\n    uint8_t predictionLabel = 0;\n    for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++)\n    {\n        Serial.print(\"    \");\n        Serial.print(result.classification[ix].label);\n        Serial.print(\": \");\n        Serial.println(result.classification[ix].value);\n\n        if (result.classification[ix].value > result.classification[predictionLabel].value)\n            predictionLabel = ix;\n    }\n\n    // print the predictions\n    String label = result.classification[predictionLabel].label;\n\n    Serial.print(\"\\nPrediction: \");\n    Serial.println(label);\n\n    char prediction[100];\n    label.toCharArray(prediction, 100);\n\n    J *req = notecard.newRequest(\"note.add\");\n    JAddStringToObject(req, \"file\", \"data.qo\");\n ", "start_char_idx": 17625, "end_char_idx": 18727, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c967a865-68d9-4d41-adb6-86ffa3b78494": {"__data__": {"id_": "c967a865-68d9-4d41-adb6-86ffa3b78494", "embedding": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "27eb6b92a85d3baf55ca1f5bfd46bf5746615e70a6ea143e33a45a12ddd4046e"}, "2": {"node_id": "788e30cc-72ad-4177-b9f7-23aefb478f64", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "a90c7363694f12cd241a0636f1ffa2f01f6ce79532a9cc0148ef564b0e178aae"}, "3": {"node_id": "9e0a2152-14ca-4fcb-a591-be03143d7219", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "45e5ccc305385d60063b3363dd15f202e6252570a96cff63e2cff06dd1ccd813"}}, "hash": "11a9a86f5d5c649c5742fc9a7d16e9ebd941cf76d9d724da680637747c5ef556", "text": " JAddStringToObject(req, \"file\", \"data.qo\");\n    JAddBoolToObject(req, \"sync\", true);\n    J *body = JCreateObject();\n    JAddNumberToObject(body, \"dsp_time\", result.timing.dsp);\n    JAddNumberToObject(body, \"classification_time\", result.timing.classification);\n    JAddNumberToObject(body, \"anomaly_time\", result.timing.anomaly);\n    JAddStringToObject(body, \"prediction\", prediction);\n    for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++)\n    {\n        JAddNumberToObject(body, result.classification[ix].label, result.classification[ix].value);\n    }\n    JAddItemToObject(req, \"body\", body);\n    if (!notecard.sendRequest(req)) {\n      JDelete(req);\n    }\n\n#if EI_CLASSIFIER_HAS_ANOMALY == 1\n    ei_printf(\"    anomaly score: %.3f\\n\", result.anomaly);\n#endif\n}\n\nThe new pieces of code are two different calls you make using the note-arduino library. The first, in setup(), uses the Notecard's hub.set request to associate the Notecard with your Notehub backend.\n\nCOPY\nJ *req = notecard.newRequest(\"hub.set\");\nJAddStringToObject(req, \"product\", productUID);\nJAddStringToObject(req, \"mode\", \"periodic\");\nJAddNumberToObject(req, \"outbound\", 5);\nif (!notecard.sendRequest(req)) {\n  JDelete(req);\n}\n\nThe second,", "start_char_idx": 18718, "end_char_idx": 19933, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9e0a2152-14ca-4fcb-a591-be03143d7219": {"__data__": {"id_": "9e0a2152-14ca-4fcb-a591-be03143d7219", "embedding": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed8375d0-2842-4794-9fcb-ec5dcab41db3", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "27eb6b92a85d3baf55ca1f5bfd46bf5746615e70a6ea143e33a45a12ddd4046e"}, "2": {"node_id": "c967a865-68d9-4d41-adb6-86ffa3b78494", "node_type": null, "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}, "hash": "11a9a86f5d5c649c5742fc9a7d16e9ebd941cf76d9d724da680637747c5ef556"}}, "hash": "45e5ccc305385d60063b3363dd15f202e6252570a96cff63e2cff06dd1ccd813", "text": "{\n  JDelete(req);\n}\n\nThe second, in loop(), uses the Notecard's note.add request to send all relevant data up to Notehub in a Note.\n\nCOPY\nJ *req = notecard.newRequest(\"note.add\");\nJAddStringToObject(req, \"file\", \"data.qo\");\nJAddBoolToObject(req, \"sync\", true);\nJ *body = JCreateObject();\nJAddNumberToObject(body, \"dsp_time\", result.timing.dsp);\nJAddNumberToObject(body, \"classification_time\", result.timing.classification);\nJAddNumberToObject(body, \"anomaly_time\", result.timing.anomaly);\nJAddStringToObject(body, \"prediction\", prediction);\nfor (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++)\n{\n    JAddNumberToObject(body, result.classification[ix].label, result.classification[ix].value);\n}\nJAddItemToObject(req, \"body\", body);\nif (!notecard.sendRequest(req)) {\n  JDelete(req);\n}\n\nWith these changes, your Notecard sends a Note to your Notehub backend after every classification in loop(). After you run your app on your device, you should see events start to appear on your Notehub project's Events tab with data from the classification process, including how long the classification took, as well as confidence levels for each of your supported gestures.\n\nAnd with that, you've now built an edge ML model that you can monitor remotely!\n\nNote\n\nSee our Notehub routing tutorial for details on how to send Notehub data to other cloud services, such as Ubidots or Datacake for building dashboards.\n\nAdditional Resources\nEdge Impulse Docs\nCan we improve this page? Send us feedback", "start_char_idx": 19943, "end_char_idx": 21429, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"ed8375d0-2842-4794-9fcb-ec5dcab41db3": {"node_ids": ["94bed744-492d-4c65-aeb7-cca0af2e8332", "91a04e9e-7660-4fce-8d4d-50437e385acd", "12a26d67-1cb5-4717-a4b0-42148d9cac2a", "0ef0d1d9-4ae9-451c-9e12-4c28e4b043dc", "7ce6c727-eb41-482f-8ec9-668920b58ffb", "35ae1b1d-603d-4c5d-91db-a91fb35d0025", "f9b712f1-ba26-4fe9-a036-b5eb073f8b7d", "baf88276-76ed-46ba-b03b-a04eb8a17370", "d5f77945-5a83-4279-8712-798f3aec2bdb", "dfe8f350-8cda-43f2-be2f-7739258d7541", "ddd64170-f847-46ef-ac7f-d99b03d95ccb", "58a0c330-f9a2-4753-b038-161e3dc3b973", "788e30cc-72ad-4177-b9f7-23aefb478f64", "c967a865-68d9-4d41-adb6-86ffa3b78494", "9e0a2152-14ca-4fcb-a591-be03143d7219"], "metadata": {"title": "", "category": "Building Edge Ml Applications", "url": "https://dev.blues.io/guides-and-tutorials/building-edge-ml-applications/"}}}}