{"docstore/metadata": {"b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404": {"doc_hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "7af34cea-9fbb-4487-bd1f-42c9f43cdce5": {"doc_hash": "fb6439b80c613ed5e178c008beba4307724580c87d8833d4dfb786dcd8536b71", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "4257b294-509e-4805-81c3-5349d17a7083": {"doc_hash": "1e2f82ba346015bcb1a71c59739e88db33fa5708f5116e88aed2b0cc492b9602", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "fa3b3e0b-bf44-4be4-951d-b90c7907cfea": {"doc_hash": "fe3f31087c6fbc3bec16c4ac381062e1aa054049f468dc630994aa7f5b622343", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "38efd1a5-559c-4356-b475-3a6094d59675": {"doc_hash": "bf8cb3b71206bbf1da39452978d7b97f0efe409ec06528de0981508be4b18a30", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "2dddd6bb-6295-4256-be2e-e442e2b785f6": {"doc_hash": "ce018917691ac35de39f4d7193847b404c5f3475c4ee81e7c4e33e223b526358", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "f01c934d-0c38-4112-bb52-42139c879faa": {"doc_hash": "35ff9b5bbff76432b8341b6d132b4e01b38e18b59d1950fd3ad38810094fbd4c", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "c6332d67-3830-489c-bef4-18fde4dd3532": {"doc_hash": "a60fd0d8349a033d4eabb3454c4e08ee2dc895b3b6bc96dbfeaf121f83dcb640", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "4d14d341-16f0-49ba-bfe3-0cd1de9472f1": {"doc_hash": "8d312888bf6986ea62a20e9cabb5c87659acaa5432515b9ba1475e98843271d3", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "842ace04-d87f-4ad4-adfc-3c4daa3c3d77": {"doc_hash": "d18ebcce446aa725bbfc9bedb960b3afbd06156610200aa05b856bf874feb418", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "700ca869-a53e-4050-a5e1-ddcc50a73172": {"doc_hash": "4b12403b4af4e96fa8201d179c0af646bc9151bbf1899a4f7bd2039703672349", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "ca1a8252-ea38-4a48-a004-d41e1ca40099": {"doc_hash": "292ca6e2de0a3040501e96a4aa5e322c4a9b4c47b1130fe38c744c84b83eb0c8", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "6ba15cfc-a54d-4356-91f8-038361b8d7fc": {"doc_hash": "5ec6e12484d59b242355c07f030016eec612d36f2f2995b42f9276482e280e1f", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "d66d4c4a-00d7-4497-b89c-6109f66ebd0b": {"doc_hash": "38e6c8773dc1bdd0cadc75d77b67dde72cbb74e235004c1e28457959e8b59370", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "71351a4d-1d70-469b-bb1e-977470aa552b": {"doc_hash": "8a4a38f09bbc5d6024f37afcff091b94ae19ac9415be1de771b2e3a611511086", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "39298908-8fac-472a-97c2-efb62ac6d56d": {"doc_hash": "19211219456bb48882824f3090fd12dfeadb3b1f1d1ecb6f2c5f7902b748a9ab", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "2580f483-39d3-4505-bae2-6b42e088451c": {"doc_hash": "ec32609a76bdbe435ed4ca9f6dfc7bce1aa64728eaf5134df23c15b8c261a3e8", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "b0920883-38ab-4277-9422-c09a94e9635e": {"doc_hash": "50de937226f6294417bc9450b8441d9a27120391555aeeb69137432ae0917d0b", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}, "7b2e503b-066f-48da-92c8-58dd8114abd8": {"doc_hash": "087b3cc676b677bc244483ddb6d500bc16c61fcb12e551f63b9391687c449450", "ref_doc_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404"}}, "docstore/data": {"7af34cea-9fbb-4487-bd1f-42c9f43cdce5": {"__data__": {"id_": "7af34cea-9fbb-4487-bd1f-42c9f43cdce5", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "3": {"node_id": "4257b294-509e-4805-81c3-5349d17a7083", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "1e2f82ba346015bcb1a71c59739e88db33fa5708f5116e88aed2b0cc492b9602"}}, "hash": "fb6439b80c613ed5e178c008beba4307724580c87d8833d4dfb786dcd8536b71", "text": "Advanced Notecard Configuration\n\nThe Notecard provides a number of advanced configuration features that you can use to query the state and status of the Notecard, customize its behavior, set its Notehub service location, and configure the available AUX pins for use in your application.\n\nPerforming Notecard Maintenance Requests\n\nThe Notecard API provides requests you can use to query the Notecard for version and status information, restart the Notecard, or factory reset it completely.\n\nGetting the Notecard Version\n\nTo obtain version information from the Notecard, send card.version request. This request is sent without arguments, and returns the Notecard brand and model for the name, Notecard version, the sku, device UID, device type, and a body with version and build details for programmatic access.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.version\"\n}\nCOPY\n{\n \"body\": {\n  \"org\": \"Blues Wireless\",\n  \"product\": \"Notecard\",\n  \"version\": \"notecard-1.5.5\",\n  \"ver_major\": 1,\n  \"ver_minor\": 5,\n  \"ver_patch\": 5,\n  \"ver_build\": 13078,\n  \"built\": \"May 28 2021 12:45:10\"\n },\n \"version\": \"notecard-1.5.5.13078\",\n \"device\": \"dev:000000000000000\",\n \"name\": \"Blues Wireless Notecard\",\n \"board\": \"1.11\",\n \"sku\": \"NOTE-WBNA500\",\n \"api\": 1\n}\nSetting the Notecard API Major Version\n\n(Added in v1.5.5)\n\nIf you need to specify the major version of the Notecard API your host expects, you can do so by adding an api argument to a card.version request. All subsequent requests to the Notecard will use the API contract", "start_char_idx": 0, "end_char_idx": 1508, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4257b294-509e-4805-81c3-5349d17a7083": {"__data__": {"id_": "4257b294-509e-4805-81c3-5349d17a7083", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "7af34cea-9fbb-4487-bd1f-42c9f43cdce5", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "fb6439b80c613ed5e178c008beba4307724580c87d8833d4dfb786dcd8536b71"}, "3": {"node_id": "fa3b3e0b-bf44-4be4-951d-b90c7907cfea", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "fe3f31087c6fbc3bec16c4ac381062e1aa054049f468dc630994aa7f5b622343"}}, "hash": "1e2f82ba346015bcb1a71c59739e88db33fa5708f5116e88aed2b0cc492b9602", "text": "card.version request. All subsequent requests to the Notecard will use the API contract of that major version. This capability allows you to freely update your Notecard firmware to get fixes and improvements without needing to update your host application.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.version\",\n  \"api\": 1\n}\nGetting Notecard Status\n\nTo obtain information about the current operating status of the Notecard, use the card.status request. This request is sent without arguments, and returns a status string, a usb field if the Notecard is currently powered by USB, the percentage of storage used on the Notecard, The UNIX Epoch time the Notecard obtained the time after starting up, and a connected field if the Notecard is connected to Notehub.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.status\"\n}\nCOPY\n{\n \"status\": \"{normal}\",\n \"usb\": true,\n \"storage\": 8,\n \"time\": 1599067096,\n \"connected\": true\n}\nSetting Card Contact information\n\nThe card.contact request can be used to set or retrieve information about the Notecard maintainer. Once set, this information is synched to Notehub and can be found in the _env.dbs file. When setting this information, any or all of the following values can be provided:\n\nname\norg\nrole\nemail\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.contact\",\n  \"name\": \"Tom Turkey\",\n  \"org\": \"Blues Wireless\",\n  \"role\": \"Head of Security\",\n  \"email\": \"tom@blues.com\"\n}\n\nWhen sent with no arguments, card.contact returns all of the previously set contact values:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\":", "start_char_idx": 1434, "end_char_idx": 2954, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fa3b3e0b-bf44-4be4-951d-b90c7907cfea": {"__data__": {"id_": "fa3b3e0b-bf44-4be4-951d-b90c7907cfea", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "4257b294-509e-4805-81c3-5349d17a7083", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "1e2f82ba346015bcb1a71c59739e88db33fa5708f5116e88aed2b0cc492b9602"}, "3": {"node_id": "38efd1a5-559c-4356-b475-3a6094d59675", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "bf8cb3b71206bbf1da39452978d7b97f0efe409ec06528de0981508be4b18a30"}}, "hash": "fe3f31087c6fbc3bec16c4ac381062e1aa054049f468dc630994aa7f5b622343", "text": " \"req\": \"card.contact\"\n}\nCOPY\n{\n \"name\": \"Tom Turkey\",\n \"org\": \"Blues Wireless\",\n \"role\": \"Head of Security\",\n \"email\": \"tom@blues.com\"\n}\nRestarting the Notecard\n\nTo power-cycle the Notecard, send a card.restart request with no arguments. This request returns an empty JSON object ({}) before restarting.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.restart\"\n}\nWarning\n\nCalls to card.restart are not supported for use in production applications as they can cause increased cellular data and consumption credit usage.\n\nFactory Resetting the Notecard\n\nTo perform a factory reset on the Notecard, send a card.restore request. This request can be made with no arguments, which restores the Notecard to its factory state but preserves its configuration settings, Notefile templates, and environment variables.\n\nTo delete configuration settings, set the delete argument to true.\n\nTo remove any Notefile templates and environment variables used by this device, set the connected argument to true. Conversely, if connected is false (or omitted), then the Notecard's environment variables and data will be restored from Notehub the next time the Notecard connects to the previously used Notehub project.\n\nThis request returns an empty JSON object ({}) before restoring the device and restarting. Note: Setting delete to true will also remove the ProductUID on the Notecard, and the Notecard will not be able to re-connect to Notehub until a new Product UID is set.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.restore\",\n  \"delete\": true,\n  \"connected\": true\n}\nChanging the Notehub Service Host\n\nIf your Notecard needs to be configured to connect to a new Notehub host, use", "start_char_idx": 3024, "end_char_idx": 4679, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "38efd1a5-559c-4356-b475-3a6094d59675": {"__data__": {"id_": "38efd1a5-559c-4356-b475-3a6094d59675", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "fa3b3e0b-bf44-4be4-951d-b90c7907cfea", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "fe3f31087c6fbc3bec16c4ac381062e1aa054049f468dc630994aa7f5b622343"}, "3": {"node_id": "2dddd6bb-6295-4256-be2e-e442e2b785f6", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "ce018917691ac35de39f4d7193847b404c5f3475c4ee81e7c4e33e223b526358"}}, "hash": "bf8cb3b71206bbf1da39452978d7b97f0efe409ec06528de0981508be4b18a30", "text": "your Notecard needs to be configured to connect to a new Notehub host, use the hub.set request and provide the url of the new host in the host argument. This request returns an empty JSON object ({}).\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"host\": \"a.mynotehub.net\"\n}\n\nTo reset your host back to the default Notehub host, use a single dash (-) in the host argument.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"host\": \"-\"\n}\nViewing & Customizing Modem behavior\n\nThe card.wireless request can be used to view details about the last known cellular network, or customize the behavior of the Notecard's modem, if needed. A card.wireless request with no arguments returns network state information, including the current connection status, count of bars of signal quality, and net object that contains detailed modem, access technology and signal strength information.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.wireless\"\n}\nCOPY\n{\n  \"status\": \"{modem-off}\",\n  \"count\":  1,\n  \"net\":    {\n    \"iccid\":    \"00000000000000000000\",\n    \"imsi\":    \"000000000000000\",\n    \"imei\":    \"000000000000000\",\n    \"modem\":   \"EG91NAXGAR07A03M1G_BETA0415_01.001.01.001\",\n    \"band\":    \"LTE BAND 2\",\n    \"rat\":     \"lte\",\n    \"rssir\":   -69,\n    \"rssi\":    -70,\n    \"rsrp\":   ", "start_char_idx": 4625, "end_char_idx": 5891, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2dddd6bb-6295-4256-be2e-e442e2b785f6": {"__data__": {"id_": "2dddd6bb-6295-4256-be2e-e442e2b785f6", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "38efd1a5-559c-4356-b475-3a6094d59675", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "bf8cb3b71206bbf1da39452978d7b97f0efe409ec06528de0981508be4b18a30"}, "3": {"node_id": "f01c934d-0c38-4112-bb52-42139c879faa", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "35ff9b5bbff76432b8341b6d132b4e01b38e18b59d1950fd3ad38810094fbd4c"}}, "hash": "ce018917691ac35de39f4d7193847b404c5f3475c4ee81e7c4e33e223b526358", "text": "   -70,\n    \"rsrp\":    -105,\n    \"sinr\":    86,\n    \"rsrq\":    -17,\n    \"bars\":    1,\n    \"mcc\":     310,\n    \"mnc\":     410,\n    \"lac\":     28681,\n    \"cid\":     211150856,\n    \"updated\": 1599225076\n  }\n}\n\nTo customize the behavior of the modem on the Notecard, use the mode argument in a card.wireless request, which accepts the following values:\n\nauto to select automatic band scan mode.\nm to restrict the modem to Cat-M1.\nnb to restrict the modem to Cat-NB1.\ngprs to restrict the modem to EGPRS.\n- to reset the modem configuration to the Notecard default.\n\nWhen the mode argument is used, card.wireless returns the same fields as a no argument request.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.wireless\",\n  \"mode\": \"nb\"\n}\nNote\n\nModes m, nb, and gprs are only applicable on the \"narrowband\" Notecard SKUs (e.g. NOTE-NBNA and NOTE-NBGL).\n\nIf you prefer to use the Notecard with an external 3rd party SIM, you can use the apn argument to instruct the Notecard to connect to a different Access Point Name (APN) when establishing a network connection.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.wireless\",\n  \"apn\": \"myapn.nb\"\n}\nWarning\n\nSetting the mode or apn arguments may cause the Notecard to", "start_char_idx": 5941, "end_char_idx": 7134, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f01c934d-0c38-4112-bb52-42139c879faa": {"__data__": {"id_": "f01c934d-0c38-4112-bb52-42139c879faa", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "2dddd6bb-6295-4256-be2e-e442e2b785f6", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "ce018917691ac35de39f4d7193847b404c5f3475c4ee81e7c4e33e223b526358"}, "3": {"node_id": "c6332d67-3830-489c-bef4-18fde4dd3532", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "a60fd0d8349a033d4eabb3454c4e08ee2dc895b3b6bc96dbfeaf121f83dcb640"}}, "hash": "35ff9b5bbff76432b8341b6d132b4e01b38e18b59d1950fd3ad38810094fbd4c", "text": "the mode or apn arguments may cause the Notecard to lose its cellular connection and be unable to reconnect until it has been reconfigured. Be careful when using this setting to select a mode that you know will work for the Notecard's physical location.\n\nChanging the Notecard I2C Address\n\nIf the default I2C address of the Notecard (0x17) conflicts with another device in your product, you can change the Notecard address with a card.io request. This request takes an i2c argument with a decimal value of the new I2C address and returns an empty JSON object ({}).\n\nFor example, this request passes a decimal value of 24, which corresponds to the I2C address of 0x18:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.io\",\n  \"i2c\": 24\n}\n\nTo reset the Notecard to the default I2C address, use -1 as the i2c argument value:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.io\",\n  \"i2c\": -1\n}\nWarning\n\nBe sure to issue this request over a UART or USB connection. Changing the I2C address while connected to the Notecard I2C may cause unexpected results.\n\nWorking with the Notecard AUX Pins\n\nThe Notecard edge connector provides a series of pins that developers can utilize for detailed tracing of Notecard activity, interfacing with GPS operations, accessing GPIO pins on the Notecard, and connecting external LEDs to a product in order to monitor Notecard activity.\n\nThe Notecard brings out seven AUX-labeled pins. They are:\n\nAUX-RX\nAUX-TX\nAUX-EN\nAUX-1 through AUX-4\n\nThe behavior of these pins change depending on the AUX mode configured on the", "start_char_idx": 7105, "end_char_idx": 8631, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c6332d67-3830-489c-bef4-18fde4dd3532": {"__data__": {"id_": "c6332d67-3830-489c-bef4-18fde4dd3532", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "f01c934d-0c38-4112-bb52-42139c879faa", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "35ff9b5bbff76432b8341b6d132b4e01b38e18b59d1950fd3ad38810094fbd4c"}, "3": {"node_id": "4d14d341-16f0-49ba-bfe3-0cd1de9472f1", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "8d312888bf6986ea62a20e9cabb5c87659acaa5432515b9ba1475e98843271d3"}}, "hash": "a60fd0d8349a033d4eabb3454c4e08ee2dc895b3b6bc96dbfeaf121f83dcb640", "text": "behavior of these pins change depending on the AUX mode configured on the Notecard.\n\nNote\n\nUsing the AUX Pins for Tracing\n\nIn addition to the modes below, the Notecard AUX pins can be used for tracing on a separate bus from primary Notecard communications. While this does not require an explicit AUX mode setting, it does require a physical connection to AUX-RX, AUX-TX, and AUX-EN, and the AUX-EN must be pulled high to enable this mode.\n\nDetermining the Current AUX Mode\n\nYou can query the Notecard AUX mode at any time with a card.aux request and no arguments.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.aux\"\n}\n\nBy default, the default Notecard AUX mode is off.\n\nCOPY\n{ \"mode\": \"off\" }\nUsing AUX Track Mode\n\nAUX Track mode allows you to enhance the built-in sensor readings from the Notecard with temperature, pressure, and humidity readings through a BME280 sensor wired to the AUX pins. When in Track mode, specific pins are configured as follows:\n\nAUX1 should be connected to the SDA or SDI pin on the sensor.\nAUX4 should be connected to the SCL or SCK pin on the sensor.\nGND should be connected to the GND pin on the sensor.\nBAT should be connected to the EN, ENABLE, or 3VO pin on the sensor.\n\nThe BME280 must also be wired to use its secondary I2C address if it conflicts with the Notecard's default I2C address of 0x17.\n\nTrack mode can then be enabled with the value track in the mode argument of a card.aux request:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.aux\",\n  \"mode\": \"track\"\n}\n\nWhen Track mode is", "start_char_idx": 8613, "end_char_idx": 10125, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4d14d341-16f0-49ba-bfe3-0cd1de9472f1": {"__data__": {"id_": "4d14d341-16f0-49ba-bfe3-0cd1de9472f1", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "c6332d67-3830-489c-bef4-18fde4dd3532", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "a60fd0d8349a033d4eabb3454c4e08ee2dc895b3b6bc96dbfeaf121f83dcb640"}, "3": {"node_id": "842ace04-d87f-4ad4-adfc-3c4daa3c3d77", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "d18ebcce446aa725bbfc9bedb960b3afbd06156610200aa05b856bf874feb418"}}, "hash": "8d312888bf6986ea62a20e9cabb5c87659acaa5432515b9ba1475e98843271d3", "text": " \"mode\": \"track\"\n}\n\nWhen Track mode is enabled, the temperature, pressure, and humidity from the BME280 is automatically added to the _track.qo Notefile.\n\nUsing AUX Track Mode with an External GPS\n\nThere are scenarios where the onboard GPS antenna of the Notecarrier is not adequate to identify GPS satellites (e.g. if the Notecarrier does not have a clear view of the southern sky). To accommodate these situations, an external GPS module such as the Adafruit Ultimate GPS or Quectel L86 can be used (though since NMEA sentences are standardized, many GPS modules will work).\n\nIf using an external GPS module, the gps parameter of card.aux must be set to true:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.aux\",\n  \"mode\": \"track\",\n  \"gps\": true\n}\n\nIn this mode, AUX3 becomes an output used to turn on/off the GPS. AUX-RX/AUX-TX should be connected to the GPS TX and RX respectively.\n\nNote\n\nIf the gps:true parameter is set, the internal GPS module will be disabled and the Notecard will look for an external GNSS/GPS hat. If there is no external GNSS/GPS hat, the Notecard will not be able to receive a GPS location.\n\nUsing AUX Motion Mode\n\nAUX Motion mode allows you to configure the Notecard as a standalone motion tracking device, without requiring a host processor. Motion mode is enabled with the value motion in the mode argument of a card.aux request:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.aux\",\n  \"mode\": \"motion\"\n}\n\nWhen in Motion mode, the AUX1-AUX4 pins are configured as", "start_char_idx": 10154, "end_char_idx": 11636, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "842ace04-d87f-4ad4-adfc-3c4daa3c3d77": {"__data__": {"id_": "842ace04-d87f-4ad4-adfc-3c4daa3c3d77", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "4d14d341-16f0-49ba-bfe3-0cd1de9472f1", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "8d312888bf6986ea62a20e9cabb5c87659acaa5432515b9ba1475e98843271d3"}, "3": {"node_id": "700ca869-a53e-4050-a5e1-ddcc50a73172", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "4b12403b4af4e96fa8201d179c0af646bc9151bbf1899a4f7bd2039703672349"}}, "hash": "d18ebcce446aa725bbfc9bedb960b3afbd06156610200aa05b856bf874feb418", "text": "in Motion mode, the AUX1-AUX4 pins are configured as follows:\n\nAUX1 is an active-LOW input control that can be wired to a button. When the button is pressed, the Notecard adds a \"button pushed\" event to the tracking database and initiates an immediate cloud sync.\nAUX2 is an active-HIGH input control meant to signal when a notable event has occurred. When the input control sends a pulse to the AUX2 pin, a counter is incremented and added to the database on the next tracking event or heartbeat.\nAUX3 is an active-HIGH input control meant to signal when a notable event has ocurred while the Notecard is in motion. When the input control sends a pulse to the AUX3 pin, a counter is incremented and added to the database on the next tracking event or heartbeat.\nAUX4 is an output signal used to indicate that the Notecard has detected motion. Whenever the device has been in motion for several seconds, AUX4 is set to digital HIGH. After the device is no longer in motion, the signal is returned to LOW.\n\nIn Motion mode, the AUX1-AUX4 pins have a specific configuration, but it is up to the hardware designer to determine the specific inputs and outputs connected to these pins in a product.\n\nUsing AUX GPIO Mode\n\nIn AUX GPIO mode, the AUX1-AUX4 pins are used as general purpose I/O pins. AUX GPIO mode is enabled with the value gpio in the mode argument of a card.aux request:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.aux\",\n  \"mode\": \"gpio\"\n}\n\nTo modify the mode for each pin, a card.aux request accepts a usage argument in the form of an array of strings in pin order. The possible values for each pin are:\n\n\"\" to leave the pin mode", "start_char_idx": 11626, "end_char_idx": 13261, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "700ca869-a53e-4050-a5e1-ddcc50a73172": {"__data__": {"id_": "700ca869-a53e-4050-a5e1-ddcc50a73172", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "842ace04-d87f-4ad4-adfc-3c4daa3c3d77", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "d18ebcce446aa725bbfc9bedb960b3afbd06156610200aa05b856bf874feb418"}, "3": {"node_id": "ca1a8252-ea38-4a48-a004-d41e1ca40099", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "292ca6e2de0a3040501e96a4aa5e322c4a9b4c47b1130fe38c744c84b83eb0c8"}}, "hash": "4b12403b4af4e96fa8201d179c0af646bc9151bbf1899a4f7bd2039703672349", "text": "pin order. The possible values for each pin are:\n\n\"\" to leave the pin mode unchanged.\noff to disable the pin.\nhigh to set the pin as a HIGH output.\nlow to set the pin as a LOW output.\ninput to set the pin as an input. It is up to the device's designer to make sure that the signal is either HIGH or LOW at any time, and is never left floating.\ninput-pulldown to set the pin as a pull-down input. (Added in v3.3.1)\ninput-pullup to set the pin as a pull-up input. (Added in v3.3.1)\ncount to set the pin as an input (interrupt) that increments a counter for each rising edge pulse on the pin. It is up to the device's designer to make sure that the signal is either HIGH or LOW at any time, and is never left floating.\ncount-pulldown Same as count mode, but a pull-down resistor internal to the Notecard will automatically keep the pin from floating.\ncount-pullup Same as count mode, but a pull-up resistor internal to the Notecard will automatically keep the pin from floating and the falling edge of each pulse is counted.\n\nFor instance, the following request turns off AUX1, sets AUX2 LOW, AUX3 HIGH, and AUX4 as an input:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.aux\",\n  \"mode\": \"gpio\",\n  \"usage\": [\"off\", \"low\", \"high\", \"input\"]\n}\n\nWhen setting usage, a card.aux request will return the state field with the applied usage settings.\n\nCOPY\n{\n \"mode\": \"gpio\",\n \"state\": [\n  {},\n  {\n   \"low\": true\n  },\n  {\n   \"high\": true\n  },\n  {\n   \"low\":", "start_char_idx": 13245, "end_char_idx": 14684, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ca1a8252-ea38-4a48-a004-d41e1ca40099": {"__data__": {"id_": "ca1a8252-ea38-4a48-a004-d41e1ca40099", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "700ca869-a53e-4050-a5e1-ddcc50a73172", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "4b12403b4af4e96fa8201d179c0af646bc9151bbf1899a4f7bd2039703672349"}, "3": {"node_id": "6ba15cfc-a54d-4356-91f8-038361b8d7fc", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "5ec6e12484d59b242355c07f030016eec612d36f2f2995b42f9276482e280e1f"}}, "hash": "292ca6e2de0a3040501e96a4aa5e322c4a9b4c47b1130fe38c744c84b83eb0c8", "text": "{\n   \"high\": true\n  },\n  {\n   \"low\": true\n  }\n ]\n}\n\nIf one or more pins are undefined (\"\"), that pin defaults to high-impedance and is reported as {} in the response.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.aux\",\n  \"mode\": \"gpio\",\n  \"usage\": [\"\", \"\", \"\", \"\"]\n}\nCOPY\n{\n \"mode\": \"gpio\",\n \"state\": [\n  {},\n  {},\n  {},\n  {}\n ]\n}\nSending Notes Based on AUX Pin State Changes\n\nAs of v3.3.1, the Notecard can autonomously (i.e. without a host MCU) report AUX GPIO input changes to Notehub by using the \"sync\":true parameter in a card.aux request.\n\nAn example of this type of request could be setting AUX1 low and AUX2-4 as input-pulldown:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.aux\",\n  \"mode\": \"gpio\",\n  \"usage\": [\"low\", \"input-pulldown\", \"input-pulldown\", \"input-pulldown\"],\n  \"sync\": true,\n  \"file\": \"gpio.qo\"\n}\n\nWith this request, the Notecard will automatically report any state changes on AUX2, AUX3, and AUX4. By default, the state changes are reported in a Notefile called _button.qo, but the Notefile name can be specified with the file parameter.\n\nThe Notecard applies about one second of debounce to any GPIO transition and on state changes adds a Note to the Notefile specified by file and immediately syncs with Notehub. However, by using \"connected\":true this sync can be deferred to sync based on the period defined in the original hub.set", "start_char_idx": 14721, "end_char_idx": 16070, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6ba15cfc-a54d-4356-91f8-038361b8d7fc": {"__data__": {"id_": "6ba15cfc-a54d-4356-91f8-038361b8d7fc", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "ca1a8252-ea38-4a48-a004-d41e1ca40099", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "292ca6e2de0a3040501e96a4aa5e322c4a9b4c47b1130fe38c744c84b83eb0c8"}, "3": {"node_id": "d66d4c4a-00d7-4497-b89c-6109f66ebd0b", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "38e6c8773dc1bdd0cadc75d77b67dde72cbb74e235004c1e28457959e8b59370"}}, "hash": "5ec6e12484d59b242355c07f030016eec612d36f2f2995b42f9276482e280e1f", "text": "this sync can be deferred to sync based on the period defined in the original hub.set request.\n\nWhen synced with Notehub, the Note body will appear something like this:\n\nCOPY\n{\n \"power\": true,\n \"state\": [\n  {\n   \"low\": true\n  },\n  {\n   \"low\": true\n  },\n  {\n   \"high\": true\n  },\n  {\n   \"low\": true\n  }\n ]\n}\n\nThe power parameter indicates whether or not the Notecard has USB (main) power, which could be useful if monitoring a Notecard for power failure. The state shows the current state of each AUX GPIO, regardless of whether it is configured as an input or an output.\n\nConfiguring an AUX Pin as a Counter\n\nFor pins used as counters, the Notecard will count rising edge pulses lasting more than about 12ns. Being interrupt based, this works well in low-power environments.\n\nIf sync is set to true, the Notecard will trigger a sync each time it counts a pulse (Added in v3.4.1).\n\nWhen using count in the usage for any pin, the following can also be configured to group pulses in a counter:\n\nseconds - The number of seconds to include in a sample. Passing 0 will total into a single sample.\nmax - The maximum number of samples to take. Counts above this value are added to the final sample. Passing 0 or omitting this value will provide a single incrementing count of rising edges on the pin.\nstart - Set to true to reset counters and start incrementing.\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.aux\",\n  \"mode\": \"gpio\",\n  \"usage\": [\"off\", \"low\", \"high\", \"count\"],\n  \"seconds\": 2,\n  \"max\": 5,\n  \"start\": true\n}\n\nOnce GPIO mode", "start_char_idx": 16026, "end_char_idx": 17549, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d66d4c4a-00d7-4497-b89c-6109f66ebd0b": {"__data__": {"id_": "d66d4c4a-00d7-4497-b89c-6109f66ebd0b", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "6ba15cfc-a54d-4356-91f8-038361b8d7fc", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "5ec6e12484d59b242355c07f030016eec612d36f2f2995b42f9276482e280e1f"}, "3": {"node_id": "71351a4d-1d70-469b-bb1e-977470aa552b", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "8a4a38f09bbc5d6024f37afcff091b94ae19ac9415be1de771b2e3a611511086"}}, "hash": "38e6c8773dc1bdd0cadc75d77b67dde72cbb74e235004c1e28457959e8b59370", "text": " \"max\": 5,\n  \"start\": true\n}\n\nOnce GPIO mode is configured, subsequent requests to card.aux will return the current pin state and counter values for each pin.\n\nCOPY\n{\n \"mode\": \"gpio\",\n \"state\": [\n  {},\n  {\n   \"high\": true\n  },\n  {\n   \"low\": true\n  },\n  {\n   \"count\": [\n    4\n   ]\n  }\n ]\n}\nUsing Environment Variables to Set and Monitor AUX GPIOs\n\nAs of v3.4.1, you can change AUX GPIO output values using environment variables, provided the Notecard has previously been configured with {\"req\":\"card.aux\",\"mode\":\"gpio\",\"usage\":[...]}.\n\nThe environment variable _aux_gpio_set is used to set AUX GPIOs HIGH or LOW, or pulse them HIGH or LOW for a specified period (in milliseconds).\n\nSetting GPIO Outputs High or Low with Environment Variables\n\nTo set GPIOs permanently HIGH or LOW (not pulse), the value of the environment variable should be a comma-separated list of values. Any GPIOs that should not change their configuration (e.g. inputs or counters) should be left blank.\n\nFor example, _aux_gpio_set with a value of ,low,,high causes AUX2 to go LOW and AUX4 to go HIGH.\n\nThe Notecard saves this setting to non-volatile memory, so that if it restarts it restores the pin states as defined.\n\nPulsing GPIO Outputs High or Low with Environment Variables\n\nTo pulse one or more GPIOs HIGH or LOW, add a duration in milliseconds plus a UNIX epoch time and validity period (both in seconds).\n\nFor example, _aux_gpio_set with a value of", "start_char_idx": 17583, "end_char_idx": 19013, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "71351a4d-1d70-469b-bb1e-977470aa552b": {"__data__": {"id_": "71351a4d-1d70-469b-bb1e-977470aa552b", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "d66d4c4a-00d7-4497-b89c-6109f66ebd0b", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "38e6c8773dc1bdd0cadc75d77b67dde72cbb74e235004c1e28457959e8b59370"}, "3": {"node_id": "39298908-8fac-472a-97c2-efb62ac6d56d", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "19211219456bb48882824f3090fd12dfeadb3b1f1d1ecb6f2c5f7902b748a9ab"}}, "hash": "8a4a38f09bbc5d6024f37afcff091b94ae19ac9415be1de771b2e3a611511086", "text": "in seconds).\n\nFor example, _aux_gpio_set with a value of ,,,high,1300,1656110120,60 means pulse AUX4 HIGH for 1300ms, valid for 60 seconds from 1656110120 until 1656110180.\n\nNote\n\nIt's a best practice to add a UNIX epoch time and a validity period with the _aux_gpio_set environment variable.\n\nIf the Notecard is not currently connected to Notehub, the environment variable will not be synced to the Notecard until it next connects to Notehub. It's likely that a command to pulse the output of the Notecard is an action you'd like to be performed now, or not at all (e.g. if the pulse is used to unlock a door to allow entry).\n\nEnvironment variables are persistent on the Notecard (stored in _env.dbs). If the Notecard should reboot, the environment variable will be re-read, causing a pulse on the GPIO output at a future point in time.\n\nAt the end of the pulse the pin returns to it's previous state, which means if you send a LOW/HIGH pulse to a pin that is already LOW/HIGH there will be no observed effect on the Notecard.\n\nAUX GPIO pulses are NOT stored in non-volatile memory in the Notecard, because they are ephemeral events. If the Notecard should happen to reboot during the duration of the pulse, the GPIO outputs would revert to their long term state.\n\nMonitoring AUX GPIO State with Environment Variables\n\nThere are two environment variables used for monitoring AUX GPIO state:\n\n_aux_gpio_report_enable is set to enable reporting via environment variable. If it is set to the value sync, then the Notecard will immediately sync to Notehub when a GPIO input changes (max rate of once per second). If it is set to any other value", "start_char_idx": 19002, "end_char_idx": 20643, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "39298908-8fac-472a-97c2-efb62ac6d56d": {"__data__": {"id_": "39298908-8fac-472a-97c2-efb62ac6d56d", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "71351a4d-1d70-469b-bb1e-977470aa552b", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "8a4a38f09bbc5d6024f37afcff091b94ae19ac9415be1de771b2e3a611511086"}, "3": {"node_id": "2580f483-39d3-4505-bae2-6b42e088451c", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "ec32609a76bdbe435ed4ca9f6dfc7bce1aa64728eaf5134df23c15b8c261a3e8"}}, "hash": "19211219456bb48882824f3090fd12dfeadb3b1f1d1ecb6f2c5f7902b748a9ab", "text": "GPIO input changes (max rate of once per second). If it is set to any other value (i.e. just non-empty) the Notecard will update the environment variable described below, but will not force a sync (which will occur according to the hub.set configuration).\n\n_aux_gpio_report is set by the Notecard to a comma-separated string that reflects the current state of the AUX GPIO inputs. The format is very similar to the JSON state field in the response to a card.aux request.\n\nFor example, with the value of low(8),low,off,high:\n\nAUX1 is configured to count and is currently LOW.\nAUX2 is currently LOW (it may be an input or an output).\nAUX3 is currently configured to be OFF (high impedance).\nAUX4 is currently HIGH (it may be an input or an output).\nTurning AUX Mode Off\n\nDisable AUX mode by setting the mode argument to off in a card.aux request:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.aux\",\n  \"mode\": \"off\"\n}\nUsing Monitor Mode\n\nIf you plan to place your Notecard-based product into an enclosure, monitor mode can be used to configure inputs and outputs typically placed on the faceplate of a device in order for a technician to test and monitor Notecard activity.\n\nTo use monitor mode for adding functionality to an enclosure, send a card.aux request:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.aux\",\n  \"mode\": \"monitor\"\n}\n\nIn monitor mode, the AUX1 pin is configured as a test button, while AUX2-AUX4 are configured as outputs for LED control. The LEDs should correspond to the color guidelines below and can be connected directly to each pin with resistors chosen to ensure a maximum current draw of 20mA per", "start_char_idx": 20628, "end_char_idx": 22238, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2580f483-39d3-4505-bae2-6b42e088451c": {"__data__": {"id_": "2580f483-39d3-4505-bae2-6b42e088451c", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "39298908-8fac-472a-97c2-efb62ac6d56d", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "19211219456bb48882824f3090fd12dfeadb3b1f1d1ecb6f2c5f7902b748a9ab"}, "3": {"node_id": "b0920883-38ab-4277-9422-c09a94e9635e", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "50de937226f6294417bc9450b8441d9a27120391555aeeb69137432ae0917d0b"}}, "hash": "ec32609a76bdbe435ed4ca9f6dfc7bce1aa64728eaf5134df23c15b8c261a3e8", "text": "to each pin with resistors chosen to ensure a maximum current draw of 20mA per LED.\n\nAUX1 is configured active-LOW with a pullup and meant to be wired to a normally open momentary switch. When this button, named \"COMM TEST\" is pressed, a test note is added to the _test.qo Notefile and a manual sync is initiated.\nAUX2 is a yellow LED referred to as \"STATUS.\" This is as general purpose LED that flashes an acknowledgement when the AUX1 \"COMM TEST\" button is pressed.\nAUX3 is a green LED referred to as \"COMM BUSY.\" This LED blinks in a pattern based on communications status.\nAUX4 is a red LED referred to as \"COMM ERROR.\" This LED turns on continuously for two minutes after there is a failure to connect to a network. To conserve battery life, after the first two minutes the LED turns on for four seconds each minute.\n\nIf your host application needs to override the function of these LEDs to display its own error code or status, it can do so using the mode and count arguments in a card.monitor request. mode is the name of the AUX pin LED you wish to override. Possible values are yellow, red, and green. count is the number of pulses the LED should display in a repeating pattern.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.monitor\",\n  \"mode\": \"green\",\n  \"count\": 5\n}\n\nTo return an LED to its default behavior, set the count to 0:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.monitor\",\n  \"mode\": \"green\",\n  \"count\": 0\n}\n\nFinally, the usb argument can be set to true to configure LED behavior so that it is only active when on USB power. This can be useful if you want to conserve power while your product is", "start_char_idx": 22240, "end_char_idx": 23848, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b0920883-38ab-4277-9422-c09a94e9635e": {"__data__": {"id_": "b0920883-38ab-4277-9422-c09a94e9635e", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "2580f483-39d3-4505-bae2-6b42e088451c", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "ec32609a76bdbe435ed4ca9f6dfc7bce1aa64728eaf5134df23c15b8c261a3e8"}, "3": {"node_id": "7b2e503b-066f-48da-92c8-58dd8114abd8", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "087b3cc676b677bc244483ddb6d500bc16c61fcb12e551f63b9391687c449450"}}, "hash": "50de937226f6294417bc9450b8441d9a27120391555aeeb69137432ae0917d0b", "text": "on USB power. This can be useful if you want to conserve power while your product is temporarily running on battery power.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.monitor\",\n  \"usb\": true\n}\nUsing Neo-Monitor Mode\n\nAs of v3.5.1 of the Notecard firmware, the AUX Neo-Monitor mode allows you to replace the traditional 3 monocolor LEDs used in Monitor mode with a NeoPixel LED, which will carry out the same basic functions using only a single AUX GPIO pin.\n\nJust like with monitor mode, the AUX1 pin is configured as a test button, and AUX2 is configured as the output for NeoPixel LED control.\n\nAUX1 is configured active-LOW with a pullup and meant to be wired to a normally open momentary switch. When this button is pressed, a note is added to the _button.qo Notefile and a manual sync is initiated.\nAUX2 is where the NeoPixel LED's DI (Data In) pin connects to the Notecard.\n\nAs a NeoPixel can be programmed to display any color of the rainbow, this general purpose LED flashes yellow (\"STATUS\") to acknowledge when the AUX1 button is pressed, then proceeds to flash a series of green (\"COMM BUSY\") LED blinks as the newly created _button.qo Notefile is successfully sent to Notehub. If there is a failure to connect to a network, the LED flashes red (\"COMM ERROR\") continuously for two minutes, followed by a four second flash once per minute thereafter.\n\nTo enable neo-monitor mode for a Notecard, send the following card.aux request:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.aux\",\n  \"mode\": \"neo-monitor\"\n}\nFunctions that Require Setting Time\n\nThe Notecard", "start_char_idx": 23845, "end_char_idx": 25406, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7b2e503b-066f-48da-92c8-58dd8114abd8": {"__data__": {"id_": "7b2e503b-066f-48da-92c8-58dd8114abd8", "embedding": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "04436c0b35160e9c6c80c40c7e62e74392e6282f0052d285af8da7abbd39bebf"}, "2": {"node_id": "b0920883-38ab-4277-9422-c09a94e9635e", "node_type": null, "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}, "hash": "50de937226f6294417bc9450b8441d9a27120391555aeeb69137432ae0917d0b"}}, "hash": "087b3cc676b677bc244483ddb6d500bc16c61fcb12e551f63b9391687c449450", "text": "that Require Setting Time\n\nThe Notecard will not enable certain functions until it has made a successful cellular connection upon startup to obtain the current time. Once the Notecard has the time, these functions are available for use, regardless of the state of the cellular connection going forward.\n\nNote\n\nIf the Notecard is power cycled, it will have to re-establish a successful cellular connection to obtain the current time.\n\nThese are the functions that require the current time:\n\nGPS location tracking\nMotion/asset tracking\nNotecard and host MCU DFU\nA note.add request\nCell tower and Wi-Fi triangulation\nA card.time request\nNotecard data usage tracking for usage analysis requests\nVoltage monitoring for voltage analysis requests\nInbound/outbound sync scheduling calculations\nCertain AUX counter features\nHost Firmware Update Requests\nNotecard Error and Status Codes\nCan we improve this page? Send us feedback", "start_char_idx": 25435, "end_char_idx": 26354, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"b1bbaf6c-9c2e-4ca8-9a98-28c9e30bc404": {"node_ids": ["7af34cea-9fbb-4487-bd1f-42c9f43cdce5", "4257b294-509e-4805-81c3-5349d17a7083", "fa3b3e0b-bf44-4be4-951d-b90c7907cfea", "38efd1a5-559c-4356-b475-3a6094d59675", "2dddd6bb-6295-4256-be2e-e442e2b785f6", "f01c934d-0c38-4112-bb52-42139c879faa", "c6332d67-3830-489c-bef4-18fde4dd3532", "4d14d341-16f0-49ba-bfe3-0cd1de9472f1", "842ace04-d87f-4ad4-adfc-3c4daa3c3d77", "700ca869-a53e-4050-a5e1-ddcc50a73172", "ca1a8252-ea38-4a48-a004-d41e1ca40099", "6ba15cfc-a54d-4356-91f8-038361b8d7fc", "d66d4c4a-00d7-4497-b89c-6109f66ebd0b", "71351a4d-1d70-469b-bb1e-977470aa552b", "39298908-8fac-472a-97c2-efb62ac6d56d", "2580f483-39d3-4505-bae2-6b42e088451c", "b0920883-38ab-4277-9422-c09a94e9635e", "7b2e503b-066f-48da-92c8-58dd8114abd8"], "metadata": {"title": "", "category": "Advanced Notecard Configuration", "url": "https://dev.blues.io/notecard/notecard-walkthrough/advanced-notecard-configuration/"}}}}