{"docstore/metadata": {"86deeeae-e89d-4884-aaf5-b3b9246002b8": {"doc_hash": "848ffceabb3a437a2579932457baec1ac7b275b7133ab13d2cd794f699e8ba65"}, "ee22fd05-8b59-4558-8414-52bfb900d8f6": {"doc_hash": "fe52a997ae2781e90f02cdd6521156c4a18e8fad272c18755be2e90ffe5e6058", "ref_doc_id": "86deeeae-e89d-4884-aaf5-b3b9246002b8"}, "efe5a902-ff3c-4641-bfdf-3caac433efa6": {"doc_hash": "db52526a8632d803a3f929b7c3907fc7320f5833e17a74fe72d27cf3347e0ae0", "ref_doc_id": "86deeeae-e89d-4884-aaf5-b3b9246002b8"}, "ac92bf18-095b-465b-967f-87dae2238e1e": {"doc_hash": "d0129c3dba5b7790a915133580beca83037486b412abd296ee6f7d9084ad1e13", "ref_doc_id": "86deeeae-e89d-4884-aaf5-b3b9246002b8"}, "aa6ad656-6f17-4905-8ccf-25f55685ac30": {"doc_hash": "6303cd9e024283a4d44e401bc545df521b9f1652eae7ffab019caaf64c47c1fd", "ref_doc_id": "86deeeae-e89d-4884-aaf5-b3b9246002b8"}, "0ee4e406-a593-40e6-9dfc-6ab0ec56dc56": {"doc_hash": "2d919c7ed4514cf2226dc19063d46c641286946844a0e639e1d3f5c8e0279547", "ref_doc_id": "86deeeae-e89d-4884-aaf5-b3b9246002b8"}, "6275459f-39b9-4835-b3c4-eafd715fda98": {"doc_hash": "80896756772487653ea501250ff57d723324b40f716c068127897f40b199ab02", "ref_doc_id": "86deeeae-e89d-4884-aaf5-b3b9246002b8"}, "07e00f16-c44e-4037-8825-6afa3dbc961d": {"doc_hash": "505aa2df53983256f97f8a4d6a1c3ca2122fdddcc49dcaaf60dbd0d2df0cc427", "ref_doc_id": "86deeeae-e89d-4884-aaf5-b3b9246002b8"}, "37bd3dd9-f094-4b86-b5ae-6248ab2d7d4d": {"doc_hash": "8bf212bf7da103cfd220f784f7212393f9ca603bb92d52e8577ae9787bd964fe", "ref_doc_id": "86deeeae-e89d-4884-aaf5-b3b9246002b8"}}, "docstore/data": {"ee22fd05-8b59-4558-8414-52bfb900d8f6": {"__data__": {"id_": "ee22fd05-8b59-4558-8414-52bfb900d8f6", "embedding": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "86deeeae-e89d-4884-aaf5-b3b9246002b8", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "848ffceabb3a437a2579932457baec1ac7b275b7133ab13d2cd794f699e8ba65"}, "3": {"node_id": "efe5a902-ff3c-4641-bfdf-3caac433efa6", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "db52526a8632d803a3f929b7c3907fc7320f5833e17a74fe72d27cf3347e0ae0"}}, "hash": "fe52a997ae2781e90f02cdd6521156c4a18e8fad272c18755be2e90ffe5e6058", "text": "Zephyr SDK\n\nnote-zephyr is the official Zephyr SDK for communicating with the Notecard over serial or I2C. In this article, you'll learn how to use note-zephyr to upgrade the Zephyr RTOS \"blinky\" example with Notecard Communication!\n\nOverview\n\nThis example is designed to illustrate the ease of adding Notecard functionality to an existing application, by building on the original Zephyr example, samples/basic/blinky.\n\nFunctionally, the modification slows down the processing loop from 1s to 10s, and submits a Note to Notehub indicating the current state of the onboard LED.\n\nRequirements\nHardware\nBlues Notecard\nBlues Notecarrier\nBlues Swan\nSTLINK Programmer/Debugger\nSoftware\nDocker\nVisual Studio Code (VS Code)\nVS Code \"Dev Containers\" Extension\n[Windows/Mac Debugging] OpenOCD\nCloudware\nNotehub.io\nGetting Set Up\nNotehub.io\n\nBefore you can utilize this example, you must set up a free account (no credit card required) on Notehub.io. Once you have created your account, then you need to create a project to serve as an endpoint for the Notes that are tracking the state of the LED.\n\nOnce you have a project, you will need to update the define named PROJECT_UID in main.c with the UID of the project you have just created.\n\nAfter the Notecard has connected to Notehub, you can look inside the project and see a device named zephyr-blink. The Notecard will be running in continuous mode, which will allow it to maintain a constant cellular connection. continuous mode offers the lowest latency possible for sending messages to Notehub, but it comes at the cost of battery life. Fortunately, this is typically not a concern while bench testing, because you are plugged into USB power.\n\nTo learn more about the Notecard modes and API, please visit", "start_char_idx": 0, "end_char_idx": 1749, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "efe5a902-ff3c-4641-bfdf-3caac433efa6": {"__data__": {"id_": "efe5a902-ff3c-4641-bfdf-3caac433efa6", "embedding": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "86deeeae-e89d-4884-aaf5-b3b9246002b8", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "848ffceabb3a437a2579932457baec1ac7b275b7133ab13d2cd794f699e8ba65"}, "2": {"node_id": "ee22fd05-8b59-4558-8414-52bfb900d8f6", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "fe52a997ae2781e90f02cdd6521156c4a18e8fad272c18755be2e90ffe5e6058"}, "3": {"node_id": "ac92bf18-095b-465b-967f-87dae2238e1e", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "d0129c3dba5b7790a915133580beca83037486b412abd296ee6f7d9084ad1e13"}}, "hash": "db52526a8632d803a3f929b7c3907fc7320f5833e17a74fe72d27cf3347e0ae0", "text": "power.\n\nTo learn more about the Notecard modes and API, please visit our Essential Requests Walkthrough.\n\nCloning the Repository\n\nThis repository contains the note-c library as a submodule. Use the following command to clone both repositories simultaneously.\n\nCOPY\ngit clone https://github.com/blues/note-zephyr.git --recursive\n\nIf you cloned without the --recursive flag, then you can update the note-c submodule separately, using the following two commands:\n\nCOPY\ngit submodule init\ngit submodule update\nBuilding the Dev Container\nWarning\n\nThis step is critical to ensure you correctly build the Dev Container image.\n\nLinux:\n\nTo enable flashing and debugging from the container on Linux, you will need to provide access to the USB controller of the host machine.\n\nPerform the following steps, in order to provide USB access:\n\nOpen ./.devcontainer/devcontainer.json.\n\nUncomment the runArgs section:\n\nCOPY\n// Uncomment the following section if your host machine is running Linux\n\"runArgs\": [\n    \"--device=/dev/bus/usb/\"\n],\nNote\n\nAt the time of writing, it is not possible to share the host USB from Windows and Mac computers.\n\nWindows/Mac (x86_64):\n\nEnsure Docker Desktop is running.\n\nARM 64 (aarch64):\n\nOpen ./.devcontainer/devcontainer.json.\n\nUncomment the args object in the build section:\n\nCOPY\n// Uncomment the following section if your host machine silicon is ARM64\n\"args\": {\n    \"HOST_ARCH\":\"aarch64\"\n},\nNote\n\nIf you failed to properly update devcontainer.json before opening the Dev Container, you may need to purge your docker build cache before trying again.\n\nCOPY\n$ docker system prune\nWARNING! This will", "start_char_idx": 1692, "end_char_idx": 3308, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ac92bf18-095b-465b-967f-87dae2238e1e": {"__data__": {"id_": "ac92bf18-095b-465b-967f-87dae2238e1e", "embedding": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "86deeeae-e89d-4884-aaf5-b3b9246002b8", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "848ffceabb3a437a2579932457baec1ac7b275b7133ab13d2cd794f699e8ba65"}, "2": {"node_id": "efe5a902-ff3c-4641-bfdf-3caac433efa6", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "db52526a8632d803a3f929b7c3907fc7320f5833e17a74fe72d27cf3347e0ae0"}, "3": {"node_id": "aa6ad656-6f17-4905-8ccf-25f55685ac30", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "6303cd9e024283a4d44e401bc545df521b9f1652eae7ffab019caaf64c47c1fd"}}, "hash": "d0129c3dba5b7790a915133580beca83037486b412abd296ee6f7d9084ad1e13", "text": "trying again.\n\nCOPY\n$ docker system prune\nWARNING! This will remove:\n  - all stopped containers\n  - all networks not used by at least one container\n  - all dangling images\n  - all dangling build cache\n\nAre you sure you want to continue? [y/N] y\nBuilding and Running\nCompiling\nOpen this folder in VS Code.\nReopen the folder in the Dev Container.\nPress the hotkey combination, Ctrl+Shift+P (Mac: Cmd+Shift+P).\nSelect Dev Containers: Rebuild and Reopen in Container from the command palette drop-down menu.\nBuild the binary using one of the following options:\nPress the hotkey combination, Ctrl+Shift+B (Mac: Cmd+Shift+B).\nUse the menu system:\nSelect Terminal > Run Task... from the application menu.\nSelect Zephyr: Build Application from the drop-down menu.\nNote\n\nIf you see the following message, then you have failed to update the product UID in the sources, and the Notecard will not be linked with your Notehub project.\n\nCOPY\n/workspaces/note-zephyr/src/main.c:26:9: note: '#pragma message: PRODUCT_UID is not defined in this example. Please ensure your Notecard has a product identifier set before running this example or define it in code here. More details at https://bit.ly/product-uid'\n   26 | #pragma message \"PRODUCT_UID is not defined in this example. Please ensure your Notecard has a product identifier set before running this example or define it in code here. More details at https://bit.ly/product-uid\"\n      |         ^~~~~~~\nFlashing\n\nLinux:\n\nFrom the Dev Container, use the menu system:\n\nSelect Terminal > Run Task... from the application menu.\nSelect Zephyr: Flash Firmware (Container) from the drop-down", "start_char_idx": 3313, "end_char_idx": 4936, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "aa6ad656-6f17-4905-8ccf-25f55685ac30": {"__data__": {"id_": "aa6ad656-6f17-4905-8ccf-25f55685ac30", "embedding": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "86deeeae-e89d-4884-aaf5-b3b9246002b8", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "848ffceabb3a437a2579932457baec1ac7b275b7133ab13d2cd794f699e8ba65"}, "2": {"node_id": "ac92bf18-095b-465b-967f-87dae2238e1e", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "d0129c3dba5b7790a915133580beca83037486b412abd296ee6f7d9084ad1e13"}, "3": {"node_id": "0ee4e406-a593-40e6-9dfc-6ab0ec56dc56", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "2d919c7ed4514cf2226dc19063d46c641286946844a0e639e1d3f5c8e0279547"}}, "hash": "6303cd9e024283a4d44e401bc545df521b9f1652eae7ffab019caaf64c47c1fd", "text": "menu.\nSelect Zephyr: Flash Firmware (Container) from the drop-down menu.\n\nWindows/Mac:\n\nLaunch Debug Server (OpenOCD)\n\nA debugging server opens a port to receive both debug and program instructions. Then, it forwards those instructions to the target device via an in-circuit debugger and programmer, such as the STLINK-V3MINI.\n\nExecute the following command on your host machine, OUTSIDE the container:\n\nCOPY\nopenocd --search /usr/share/openocd/scripts --file interface/stlink.cfg --command \"transport select hla_swd\" --file target/stm32l4x.cfg\n\nFrom the Dev Container, use the menu system:\n\nSelect Terminal > Run Task... from the application menu.\nSelect Zephyr: Flash Firmware (External) from the drop-down menu.\nNote\n\nYou must flash your device using the STLINK-V3MINI; DFU is not supported.\n\nDebugging\nCollecting Serial Logs\n\nLPUART has been assigned as the default console output of the Swan. Furthermore, the LPUART of the Swan is exposed via the JTAG connector. This means that all strings provided to printk() will surface through the serial port assigned to the STLINK-V3MINI. As long as the Swan has power (e.g. battery, VIN, etc.), then there is no need for an additional USB cable.\n\nThe serial port is configured at 115200 baud, 8-bits, no parity bit, and one (1) stop bit (i.e. 8-N-1).\n\nUsing Linux as an example, and assuming the STLINK is the only USB peripheral plugged into your machine. Then you can expect to find the serial port listed as /dev/ttyACM0.\n\nGDB (OpenOCD via STLINK)\n\nLinux:\n\nSelect the appropriate debug", "start_char_idx": 4932, "end_char_idx": 6468, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0ee4e406-a593-40e6-9dfc-6ab0ec56dc56": {"__data__": {"id_": "0ee4e406-a593-40e6-9dfc-6ab0ec56dc56", "embedding": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "86deeeae-e89d-4884-aaf5-b3b9246002b8", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "848ffceabb3a437a2579932457baec1ac7b275b7133ab13d2cd794f699e8ba65"}, "2": {"node_id": "aa6ad656-6f17-4905-8ccf-25f55685ac30", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "6303cd9e024283a4d44e401bc545df521b9f1652eae7ffab019caaf64c47c1fd"}, "3": {"node_id": "6275459f-39b9-4835-b3c4-eafd715fda98", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "80896756772487653ea501250ff57d723324b40f716c068127897f40b199ab02"}}, "hash": "2d919c7ed4514cf2226dc19063d46c641286946844a0e639e1d3f5c8e0279547", "text": "(OpenOCD via STLINK)\n\nLinux:\n\nSelect the appropriate debug configuation.\nFrom the Run and Debug panel.\nOpen the activity bar using one of the following options:\nPress the hotkey combination, Ctrl+Shift+D (Mac: Cmd+Shift+D).\nSelect the bug and triangle icon.\nExpand the drop-down with the green triangle at the top of the Run and Debug panel.\nUse the drop-down to confirm Swan Debug (Container) is selected.\nLaunch the debugger using one of the following options:\nPress green triangle at the top of the Run and Debug panel.\nSelect Run > Start Debugging from the application menu.\nPress the function key, F5.\n\nWindows/Mac:\n\nLaunch Debug Server (OpenOCD)\n\nA debugging server opens a port to receive both debug and program instructions. Then, it forwards those instructions to the target device via an in-circuit debugger and programmer, such as the STLINK-V3MINI.\n\nExecute the following command on your host machine, OUTSIDE the container:\n\nCOPY\nopenocd --search /usr/share/openocd/scripts --file interface/stlink.cfg --command \"transport select hla_swd\" --file target/stm32l4x.cfg\n\nLaunch Debugger (GDB)\n\nA debugger is a piece of software that allows you to step through a binary on a line-by-line basis. When debugging an embedded device, the binary does not reside on the same machine as the debugger, so we need a server (e.g. OpenOCD) to relay the instructions to the remote binary.\n\nSelect the appropriate debug configuation.\nFrom the Run and Debug panel.\nOpen the activity bar using one of the following options:\nPress the hotkey combination, Ctrl+Shift+D (Mac: Cmd+Shift+D).\nSelect the bug and triangle icon.\nExpand the drop-down with the green", "start_char_idx": 6475, "end_char_idx": 8124, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6275459f-39b9-4835-b3c4-eafd715fda98": {"__data__": {"id_": "6275459f-39b9-4835-b3c4-eafd715fda98", "embedding": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "86deeeae-e89d-4884-aaf5-b3b9246002b8", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "848ffceabb3a437a2579932457baec1ac7b275b7133ab13d2cd794f699e8ba65"}, "2": {"node_id": "0ee4e406-a593-40e6-9dfc-6ab0ec56dc56", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "2d919c7ed4514cf2226dc19063d46c641286946844a0e639e1d3f5c8e0279547"}, "3": {"node_id": "07e00f16-c44e-4037-8825-6afa3dbc961d", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "505aa2df53983256f97f8a4d6a1c3ca2122fdddcc49dcaaf60dbd0d2df0cc427"}}, "hash": "80896756772487653ea501250ff57d723324b40f716c068127897f40b199ab02", "text": "the bug and triangle icon.\nExpand the drop-down with the green triangle at the top of the Run and Debug panel.\nUse the drop-down to confirm Swan Debug (External) is selected.\nLaunch the debugger using one of the following options:\nPress green triangle at the top of the Run and Debug panel.\nSelect Run > Start Debugging from the application menu.\nPress the function key, F5.\nUpdate Existing Zephyr App\n\nThe absolute minimum changes required to add the Notecard functionality to a pre-existing Zephyr application.\n\nClone note-c into a subfolder of your Zephyr application.\n\nAdd the note-c, .c files from to the Zephyr application in CMakeLists.txt\n\nCOPY\n# Let Zephyr build additional 3rd party libs (e.g. `note-c`) with `app`\ntarget_sources(app\n    PRIVATE ${NOTE_C}/n_atof.c\n    PRIVATE ${NOTE_C}/n_b64.c\n    PRIVATE ${NOTE_C}/n_cjson.c\n    PRIVATE ${NOTE_C}/n_cjson_helpers.c\n    PRIVATE ${NOTE_C}/n_const.c\n    PRIVATE ${NOTE_C}/n_ftoa.c\n    PRIVATE ${NOTE_C}/n_helpers.c\n    PRIVATE ${NOTE_C}/n_hooks.c\n    PRIVATE ${NOTE_C}/n_i2c.c\n    PRIVATE ${NOTE_C}/n_md5.c\n    PRIVATE ${NOTE_C}/n_printf.c\n    PRIVATE ${NOTE_C}/n_request.c\n    PRIVATE ${NOTE_C}/n_serial.c\n   ", "start_char_idx": 8125, "end_char_idx": 9294, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "07e00f16-c44e-4037-8825-6afa3dbc961d": {"__data__": {"id_": "07e00f16-c44e-4037-8825-6afa3dbc961d", "embedding": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "86deeeae-e89d-4884-aaf5-b3b9246002b8", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "848ffceabb3a437a2579932457baec1ac7b275b7133ab13d2cd794f699e8ba65"}, "2": {"node_id": "6275459f-39b9-4835-b3c4-eafd715fda98", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "80896756772487653ea501250ff57d723324b40f716c068127897f40b199ab02"}, "3": {"node_id": "37bd3dd9-f094-4b86-b5ae-6248ab2d7d4d", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "8bf212bf7da103cfd220f784f7212393f9ca603bb92d52e8577ae9787bd964fe"}}, "hash": "505aa2df53983256f97f8a4d6a1c3ca2122fdddcc49dcaaf60dbd0d2df0cc427", "text": "  PRIVATE ${NOTE_C}/n_serial.c\n    PRIVATE ${NOTE_C}/n_str.c\n    PRIVATE ${NOTE_C}/n_ua.c\n)\n\ntarget_include_directories(app\n    PRIVATE ${NOTE_C}\n)\n\nVisit the note-zephyr GitHub repository, and copy the files note_c_hooks.h and note_c_hooks.c into the src folder of your project.\n\nCOPY\n```\n...\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main.c\n    \u251c\u2500\u2500 note_c_hooks.c\n    \u2514\u2500\u2500 note_c_hooks.h\n```\n\nAdd note_c_hooks.c to CMakeLists.txt.\n\nCOPY\n# Compile Zephyr `main`\ntarget_sources(app\n    PRIVATE ${SRC}/main.c\n    PRIVATE ${SRC}/note_c_hooks.c\n)\n\nConfirm CONFIG_NEWLIB_LIBC=y and CONFIG_I2C=y are present in prj.conf\n\nCONFIG_NEWLIB_LIBC is required by note-c for string operations.\nCONFIG_I2C is required to communicate with the Notecard over the I2C bus.\n\nAdd Notecard includes to main.c\n\n#include <note.h> - Includes the note-c library, which provide myriad helper functions to communicate with the Notecard.\n#include \"note_c_hooks.h\" - Includes the system callbacks, used by note-c, for the Zephyr platform.\n\nAnd with that, you're all set up and ready to utilize the Notecard in your existing Zephyr application.\n\nLinks\nThe Zephyr Project\nGitHub: note-zephyr\nCan we improve this", "start_char_idx": 9320, "end_char_idx": 10472, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "37bd3dd9-f094-4b86-b5ae-6248ab2d7d4d": {"__data__": {"id_": "37bd3dd9-f094-4b86-b5ae-6248ab2d7d4d", "embedding": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "86deeeae-e89d-4884-aaf5-b3b9246002b8", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "848ffceabb3a437a2579932457baec1ac7b275b7133ab13d2cd794f699e8ba65"}, "2": {"node_id": "07e00f16-c44e-4037-8825-6afa3dbc961d", "node_type": null, "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}, "hash": "505aa2df53983256f97f8a4d6a1c3ca2122fdddcc49dcaaf60dbd0d2df0cc427"}}, "hash": "8bf212bf7da103cfd220f784f7212393f9ca603bb92d52e8577ae9787bd964fe", "text": "Zephyr Project\nGitHub: note-zephyr\nCan we improve this page? Send us feedback", "start_char_idx": 10446, "end_char_idx": 10523, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"86deeeae-e89d-4884-aaf5-b3b9246002b8": {"node_ids": ["ee22fd05-8b59-4558-8414-52bfb900d8f6", "efe5a902-ff3c-4641-bfdf-3caac433efa6", "ac92bf18-095b-465b-967f-87dae2238e1e", "aa6ad656-6f17-4905-8ccf-25f55685ac30", "0ee4e406-a593-40e6-9dfc-6ab0ec56dc56", "6275459f-39b9-4835-b3c4-eafd715fda98", "07e00f16-c44e-4037-8825-6afa3dbc961d", "37bd3dd9-f094-4b86-b5ae-6248ab2d7d4d"], "metadata": {"title": "", "category": "Zephyr Sdk", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/zephyr-sdk/"}}}}