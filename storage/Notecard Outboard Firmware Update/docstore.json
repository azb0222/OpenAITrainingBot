{"docstore/metadata": {"4717ee81-40e4-4e2d-8b2a-1f631a8cbb8c": {"doc_hash": "fd18036cc0ec329918c5f5dbbf7117a1b519ec94406909832d2b18ca8a2ed261"}, "c4001929-fadf-469f-9c6a-afb601a34f4e": {"doc_hash": "05b1c262290c471f175c7294f5b52d9e568682f89954c01b673a23e48946b138", "ref_doc_id": "4717ee81-40e4-4e2d-8b2a-1f631a8cbb8c"}, "95473882-350d-4f12-b5bb-2868a9409580": {"doc_hash": "a9f9b933bba1ba53419bbba581840d7e1fc99fff80790eccbc05e2c019b89f2c", "ref_doc_id": "4717ee81-40e4-4e2d-8b2a-1f631a8cbb8c"}, "20c98f4b-adb1-4988-aca9-106bf55857e9": {"doc_hash": "63008a648546bcfc35297deb20011bf85d0161fdad4b023eb718517757e05916", "ref_doc_id": "4717ee81-40e4-4e2d-8b2a-1f631a8cbb8c"}, "9a65d3d1-8702-42da-804c-6319539c2a12": {"doc_hash": "381b88337e741f3bef2664035b2d168803a16c76f990cb6f7f93b0993fb950f6", "ref_doc_id": "4717ee81-40e4-4e2d-8b2a-1f631a8cbb8c"}, "c9ba90c7-28ef-44ee-8a1d-1883992c77fb": {"doc_hash": "e56896a262d5d18acdfcacbb44ad6ac3b2b7f602767be9f1c3b7ce8673ca4153", "ref_doc_id": "4717ee81-40e4-4e2d-8b2a-1f631a8cbb8c"}, "d5792bf2-4d8a-48e9-a028-bca27b63e340": {"doc_hash": "9d7dd3afea91e7014983ad7d9ced5bc30a8af2c4364df3513fc14b713bb01a25", "ref_doc_id": "4717ee81-40e4-4e2d-8b2a-1f631a8cbb8c"}, "09f92d8b-649f-481d-804f-a17003384f43": {"doc_hash": "dbfc7cd31338077af7d665c3422b826af80fda598af78018094f3046d12eb5d8", "ref_doc_id": "4717ee81-40e4-4e2d-8b2a-1f631a8cbb8c"}}, "docstore/data": {"c4001929-fadf-469f-9c6a-afb601a34f4e": {"__data__": {"id_": "c4001929-fadf-469f-9c6a-afb601a34f4e", "embedding": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4717ee81-40e4-4e2d-8b2a-1f631a8cbb8c", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "fd18036cc0ec329918c5f5dbbf7117a1b519ec94406909832d2b18ca8a2ed261"}, "3": {"node_id": "95473882-350d-4f12-b5bb-2868a9409580", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "a9f9b933bba1ba53419bbba581840d7e1fc99fff80790eccbc05e2c019b89f2c"}}, "hash": "05b1c262290c471f175c7294f5b52d9e568682f89954c01b673a23e48946b138", "text": "Notecard Outboard Firmware Update\n\nAn increasing number of MCUs produced in the last decade are shipped with their primary bootloaders in ROM, unmodifiable by any user operation. On these devices, including all modern ST Microelectronics and Espressif microcontrollers, when a RESET pin is asserted, the device enters this ROM bootloader. The bootloader can load and execute code from a variety of sources including Flash, RAM, UART, USB, I2C, or SPI. This ROM bootloader's behavior is controlled by actively probing those I/O ports and by sampling the state of \"strapping pins\" or specially locked \"boot option bytes\" in flash.\n\nThese manufacturer-provided ROM bootloaders present new alternatives for hardware designers - specifically, to perform firmware updates in a manner that is far more flexible in terms of language and RTOS, and far less vulnerable to inadvertent programming bugs.\n\nBeginning with firmware version 3.5.1, the Blues Notecard is now capable of utilizing these capabilities of modern MCUs, performing firmware updates \"from the outside\", and not involving the firmware running on the MCU, whatsoever. It can update firmware regardless of RTOS or language, and can be used to switch between them, even modifying flash memory layout and partitioning any time after-the-fact, at the developer's discretion.\n\nHow It Works\n\nBy using the Notecard in conjunction with a modern MCU with a ROM bootloader, you can achieve a far more robust form of firmware update that we call Notecard Outboard Firmware Update.\n\nAt a high level the process works as follows:\n\nYou ensure your hardware is using the required wiring.\nYou enable Notecard Outboard Firmware Update on your Notecard.\nYou build your firmware image file.\nYou upload your firmware on", "start_char_idx": 0, "end_char_idx": 1756, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "95473882-350d-4f12-b5bb-2868a9409580": {"__data__": {"id_": "95473882-350d-4f12-b5bb-2868a9409580", "embedding": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4717ee81-40e4-4e2d-8b2a-1f631a8cbb8c", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "fd18036cc0ec329918c5f5dbbf7117a1b519ec94406909832d2b18ca8a2ed261"}, "2": {"node_id": "c4001929-fadf-469f-9c6a-afb601a34f4e", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "05b1c262290c471f175c7294f5b52d9e568682f89954c01b673a23e48946b138"}, "3": {"node_id": "20c98f4b-adb1-4988-aca9-106bf55857e9", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "63008a648546bcfc35297deb20011bf85d0161fdad4b023eb718517757e05916"}}, "hash": "a9f9b933bba1ba53419bbba581840d7e1fc99fff80790eccbc05e2c019b89f2c", "text": "build your firmware image file.\nYou upload your firmware on Notehub.\nThe Notecard downloads the firmware, verifies it, and performs the update.\nNote\n\nNotecard Outboard Firmware Update is only compatible with the following card.aux modes:\n\noff\ndfu\nneo-monitor\nRequired Wiring\n\nTo take advantage of Notecard Outboard Firmware Update you must lay out several connections between the Notecard's AUX pins and your own host MCU's RESET, BOOT, and UART pins.\n\nThe following carriers have the required wiring available out of the box, and are ready-made for using Notecard Outboard Firmware Update:\n\nNotecarrier-F\nSparkFun's Cellular Function Board - Blues Wireless Notecarrier\n\nIf you're not using a ready-made carrier, you can still utilize Outboard Firmware Update on most modern STM32 and ESP32 hosts by connecting the following pins.\n\nPin Mapping Table:\n\nNotecard\tMCU\nAUX1*\t--\nAUX3\tB0\nAUX4\tRST\nAUXRX\tTX\nAUXTX\tRX\nGND\tGND\nNote\n\nAUX1 - Not DFU in progress (NDFU).\n\nAUX1 has no corresponding pin on the Host MCU; instead, it is used to drive an external multiplexor (or mux). AUX1 is active LOW when a DFU is in progress, otherwise it remains HIGH.\n\nAUX1 is not enabled by default. It must be explicitly enabled by issuing a card.aux request and specifying \"mode\":\"dfu\".\n\nSeveral examples of using Outboard Firmware Update on a variety of different hosts are available in our Notecard Outboard Firmware Update Examples GitHub repository.\n\nEnabling Notecard", "start_char_idx": 1706, "end_char_idx": 3155, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "20c98f4b-adb1-4988-aca9-106bf55857e9": {"__data__": {"id_": "20c98f4b-adb1-4988-aca9-106bf55857e9", "embedding": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4717ee81-40e4-4e2d-8b2a-1f631a8cbb8c", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "fd18036cc0ec329918c5f5dbbf7117a1b519ec94406909832d2b18ca8a2ed261"}, "2": {"node_id": "95473882-350d-4f12-b5bb-2868a9409580", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "a9f9b933bba1ba53419bbba581840d7e1fc99fff80790eccbc05e2c019b89f2c"}, "3": {"node_id": "9a65d3d1-8702-42da-804c-6319539c2a12", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "381b88337e741f3bef2664035b2d168803a16c76f990cb6f7f93b0993fb950f6"}}, "hash": "63008a648546bcfc35297deb20011bf85d0161fdad4b023eb718517757e05916", "text": "Firmware Update Examples GitHub repository.\n\nEnabling Notecard Outboard Firmware Update\n\nIn order to use Notecard Outboard Firmware Update you must first configure your Notecard to receive firmware updates.\n\nFirmware is uploaded to Notehub, then downloaded from Notehub to your Notecard, and finally flashed to your host MCU. Each of these steps must be enabled in order to enable Notecard Outboard Firmware Update.\n\nNotehub to Notecard\n\nDownloading firmware from Notehub to the Notecard is enabled by default. Although, you may wish to ensure the transfer is enabled by explicitly sending a dfu.status request to the Notecard.\n\nCOPY\n{\"req\":\"dfu.status\",\"on\":true}\nNotecard to Host MCU\n\nTo allow the Notecard to flash the host MCU with the downloaded binary, use the card.dfu request (setting \"name\" to the architecture of the host (e.g. stm32, esp32) and \"on\" to true).\n\nCOPY\n{\"req\":\"card.dfu\",\"name\":\"<host_mcu>\",\"on\":true}\nNote\n\nBy default, the Notecard expects STM32-based hosts to have a boot pin that's assumed to be active high, where high-logic voltage indicates Boot Mode, and low-logic voltage indicates Normal Mode.\n\nIf you are using an STM32-based host with a boot pin that's instead assumed to be active low, you can send the card.dfu request a \"name\" of \"stm32-bi\" (where \"bi\" stands for boot inverted), to ensure Notecard Outboard Firmware Update works correctly.\n\nCOPY\n{\"req\":\"card.dfu\",\"name\":\"stm32-bi\",\"on\":true}\n\nNow that you've enabled Notecard", "start_char_idx": 3150, "end_char_idx": 4615, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9a65d3d1-8702-42da-804c-6319539c2a12": {"__data__": {"id_": "9a65d3d1-8702-42da-804c-6319539c2a12", "embedding": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4717ee81-40e4-4e2d-8b2a-1f631a8cbb8c", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "fd18036cc0ec329918c5f5dbbf7117a1b519ec94406909832d2b18ca8a2ed261"}, "2": {"node_id": "20c98f4b-adb1-4988-aca9-106bf55857e9", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "63008a648546bcfc35297deb20011bf85d0161fdad4b023eb718517757e05916"}, "3": {"node_id": "c9ba90c7-28ef-44ee-8a1d-1883992c77fb", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "e56896a262d5d18acdfcacbb44ad6ac3b2b7f602767be9f1c3b7ce8673ca4153"}}, "hash": "381b88337e741f3bef2664035b2d168803a16c76f990cb6f7f93b0993fb950f6", "text": "that you've enabled Notecard Outboard Firmware Update, you next need to prepare your firmware image file.\n\nBuilding a Firmware Image File\n\nIn this section you'll learn how to build a firmware image file for use with Notecard Outboard Firmware Update.\n\nGenerate/Collect Binaries for your Target Platform\n\nBuilding your firmware binary itself is not unique to Notecard Outboard Firmware Update. This is the standard creation of a firmware binary that will be deployed to a target device. The only thing new is we will be operating on this binary (.bin) file instead of immediately installing it on the target device.\n\nWhen using the Arduino IDE, you can find the location of the binary in the final logs of the compilation step, as illustrated below.\n\nLooking in the folder specified, we will find the .bin file alongside the .elf file mentioned in the build output.\n\nWrapping Binaries Using Binpack\nBinpack Overview\n\nThe binpack utility is provided through the Notecard CLI. Binpack is used to create a thin wrapper around your binary, which both offers protection and enables optimization of binary installation.\n\nBinpack Construction\n\nThe syntax of the binpack utility is as follows:\n\nCOPY\nnotecard -binpack <host_arch> <memory_addr>:<binary.bin> [<memory_addr>:<binary.bin> ...]\n<host_arch> - Replace with the architecture of your host MCU. (See the card.dfu request's name argument for a list of possible values.)\n<memory_addr> - The address* where the binary should be installed.\n<binary.bin> - The binary file to package.\n\n* Minimally, the page of memory associated with the address provided will be completely erased and rewritten.\n\nTargeting an STM32 device and performing binpack on the Arduino example provided above would result", "start_char_idx": 4648, "end_char_idx": 6386, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c9ba90c7-28ef-44ee-8a1d-1883992c77fb": {"__data__": {"id_": "c9ba90c7-28ef-44ee-8a1d-1883992c77fb", "embedding": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4717ee81-40e4-4e2d-8b2a-1f631a8cbb8c", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "fd18036cc0ec329918c5f5dbbf7117a1b519ec94406909832d2b18ca8a2ed261"}, "2": {"node_id": "9a65d3d1-8702-42da-804c-6319539c2a12", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "381b88337e741f3bef2664035b2d168803a16c76f990cb6f7f93b0993fb950f6"}, "3": {"node_id": "d5792bf2-4d8a-48e9-a028-bca27b63e340", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "9d7dd3afea91e7014983ad7d9ced5bc30a8af2c4364df3513fc14b713bb01a25"}}, "hash": "e56896a262d5d18acdfcacbb44ad6ac3b2b7f602767be9f1c3b7ce8673ca4153", "text": "an STM32 device and performing binpack on the Arduino example provided above would result in the following syntax:\n\nCOPY\nnotecard -binpack stm32 0x8000000:Example1_NotecardBasics.ino.bin\n\nAfter the command executes, you will see output similar to the following:\n\nCOPY\n2022-10-20-205150.binpack now incorporates 1 files and is 28999 bytes:\n\nHOST: stm32\nLOAD: Example1_NotecardBasics.ino.bin,0x08000000,0x70a8,0x70a8\n\nAlternatively, targeting an ESP32 device and performing binpack on the Arduino example provided above would result in the following syntax:\n\nCOPY\nnotecard -binpack esp32 0x10000:Example1_NotecardBasics.ino.bin\n\nThe two changes worth noting, are...\n\nThe <host_arch> parameter changed from stm32 to esp32\nThe <memory_addr> parameter changed from 0x8000000 to 0x10000\nCircuit Python Example\n\nA simple binary (.bin) might be stored at 0x08000000 on an STM32, or at 0x10000 on an ESP32. However, let's focus on something slightly more complex, like CircuitPython. CircuitPython is typically configured as a 3-part image containing a UF2 secondary bootloader, a CircuitPython interpreter, and the CircuitPython scripts.\n\nCreating a CircuitPython Script Binary\n\nIn order for a CircuitPython script to become a candidate for Binpack, it will first need to be translated from a text file into a binary compatible with the CircuitPython interpreter. To this end, Blues has published a utility, the CircuitPython Filesystem Builder, in order to transform scripts into binaries ready for the interpreter.\n\nOnce you have installed the tool following the steps in the README", "start_char_idx": 6336, "end_char_idx": 7912, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d5792bf2-4d8a-48e9-a028-bca27b63e340": {"__data__": {"id_": "d5792bf2-4d8a-48e9-a028-bca27b63e340", "embedding": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4717ee81-40e4-4e2d-8b2a-1f631a8cbb8c", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "fd18036cc0ec329918c5f5dbbf7117a1b519ec94406909832d2b18ca8a2ed261"}, "2": {"node_id": "c9ba90c7-28ef-44ee-8a1d-1883992c77fb", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "e56896a262d5d18acdfcacbb44ad6ac3b2b7f602767be9f1c3b7ce8673ca4153"}, "3": {"node_id": "09f92d8b-649f-481d-804f-a17003384f43", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "dbfc7cd31338077af7d665c3422b826af80fda598af78018094f3046d12eb5d8"}}, "hash": "9d7dd3afea91e7014983ad7d9ced5bc30a8af2c4364df3513fc14b713bb01a25", "text": "interpreter.\n\nOnce you have installed the tool following the steps in the README file, you can invoke the tool with the following syntax:\n\nCOPY\npython3 main.py <directory> <output_filename>.cpy\n<directory> - The directory containing the files to store in the filesystem\n<output_file> - The file that will ultimately be packaged within the .binpack file\n\nExample:\n\nCOPY\npython3 main.py my_cp_app/ scripts.cpy\nNote\n\nThe .cpy extension is REQUIRED to facilitate the .binpack utility.\n\nBinpack a CircuitPython 3-part Image\nCOPY\nnotecard -binpack stm32 0x8000000:tinyuf2-swan_r5-0.10.1.bin 0x8010000:circuitpython-swan_r5.bin 0x8100000:scripts.cpy\n\nYou can see from the call to the binpack utility, the UF2 bootloader will be loaded at 0x08000000, the CircuitPython interpreter will be loaded at 0x08010000, and the Python script will be loaded at 0x08100000.\n\nBinpack a CircuitPython 2-part Image\n\nAlternatively, CircuitPython can be flashed as a 2-part Image. This can be useful once you have stopped iterating on your firmware, and no longer plan to flash new firmware from a USB connected laptop. The syntax to perform this operation is shown below:\n\nCOPY\nnotecard -binpack stm32 0x8000000:circuitpython-swan_r5-nobootloader.bin 0x8100000:scripts.cpy\n\nAs you can see, the UF2 bootloader has been elided, and instead the CircuitPython interpreter will be loaded directly at 0x08000000 and the Python script will be loaded at", "start_char_idx": 7920, "end_char_idx": 9342, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "09f92d8b-649f-481d-804f-a17003384f43": {"__data__": {"id_": "09f92d8b-649f-481d-804f-a17003384f43", "embedding": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4717ee81-40e4-4e2d-8b2a-1f631a8cbb8c", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "fd18036cc0ec329918c5f5dbbf7117a1b519ec94406909832d2b18ca8a2ed261"}, "2": {"node_id": "d5792bf2-4d8a-48e9-a028-bca27b63e340", "node_type": null, "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}, "hash": "9d7dd3afea91e7014983ad7d9ced5bc30a8af2c4364df3513fc14b713bb01a25"}}, "hash": "dbfc7cd31338077af7d665c3422b826af80fda598af78018094f3046d12eb5d8", "text": "will be loaded directly at 0x08000000 and the Python script will be loaded at 0x08100000.\n\nUploading Firmware to Notehub\n\nNow that you've built your firmware image file and your Notecard is ready to receive it, your last step is to upload your firmware to Notehub and send it to your devices.\n\nTo do so, see our guide on managing host firmware, which shows you how to upload a binary to Notehub, and deploy that binary to individual devices or fleets of devices.\n\nApplying the DFU Update to the Host\n\nOnce you've queued up a firmware update in Notehub, the Notecard detect a new host binary is available on its next sync and download the firmware (up to 1.5MB) into its own flash storage.\n\nThe Notecard will then perform a RESET on the host microcontroller, which places it into its ROM bootloader. Then, using a microcontroller-specific communications protocol, the Notecard reprograms the various areas in flash as directed by instructions within the firmware image file, verifies them via MD5 hashes, and restarts the MCU.\n\nNote\n\nThe firmware update process won't begin until the Notecard next syncs with Notehub. To expedite this process while prototyping, use the hub.set API to set \"mode\":\"continuous\" and \"sync\":true. These settings consume more power to maintain the continuous connection, and should only be used in production deployments on high-power devices.\n\nCOPY\n{\"req\":\"hub.set\", \"mode\":\"continuous\", \"sync\":true}\nCan we improve this page? Send us feedback", "start_char_idx": 9334, "end_char_idx": 10805, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"4717ee81-40e4-4e2d-8b2a-1f631a8cbb8c": {"node_ids": ["c4001929-fadf-469f-9c6a-afb601a34f4e", "95473882-350d-4f12-b5bb-2868a9409580", "20c98f4b-adb1-4988-aca9-106bf55857e9", "9a65d3d1-8702-42da-804c-6319539c2a12", "c9ba90c7-28ef-44ee-8a1d-1883992c77fb", "d5792bf2-4d8a-48e9-a028-bca27b63e340", "09f92d8b-649f-481d-804f-a17003384f43"], "metadata": {"title": "", "category": "Notecard Outboard Firmware Update", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/notecard-outboard-firmware-update/"}}}}