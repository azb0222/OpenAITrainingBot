{"docstore/metadata": {"a663b85d-f1e9-43e1-b1dc-60131224137f": {"doc_hash": "38a6fa4dabd897c6b37173311423e78d20f40e593736cb08f6d5bce8cc996039"}, "acc79c06-ed01-4f3f-8b6c-f1c949bde2f4": {"doc_hash": "882b8eb56a92891d59304566b62a0c54763c78e1f8ae2cd344d135f7f5614045", "ref_doc_id": "a663b85d-f1e9-43e1-b1dc-60131224137f"}, "a402ce4d-708e-44d7-ad62-4bc78e6f7b3a": {"doc_hash": "734776a9f27309928c5961987516853fb8ba435b7ba9101638fe89e3517bfd8e", "ref_doc_id": "a663b85d-f1e9-43e1-b1dc-60131224137f"}, "f3fd7c84-dae4-4b58-bc68-63575989f453": {"doc_hash": "8a9119249d9ac53d1366100f20bfef15197c7b3003fb4d6b0c3f373770d86946", "ref_doc_id": "a663b85d-f1e9-43e1-b1dc-60131224137f"}, "e7d56e32-0904-41da-ae01-70e3ab803161": {"doc_hash": "c8b977f7c28f794afaee9c8aff4195095b043bbd1a543e3b4c7b3083b9381a73", "ref_doc_id": "a663b85d-f1e9-43e1-b1dc-60131224137f"}, "5121e7e5-52d3-48b0-be86-529ee6dbb5c2": {"doc_hash": "5a36b8ea667a140893d3e10fe86dc4a5eefbdb4c142ad667cd39082e4a13e832", "ref_doc_id": "a663b85d-f1e9-43e1-b1dc-60131224137f"}, "25194197-e998-4a49-a7c7-a2fcb1be14ea": {"doc_hash": "c0aa29e460adcb0b8d4f0205ef35ba20cf53414f20b261f48f261514555b5771", "ref_doc_id": "a663b85d-f1e9-43e1-b1dc-60131224137f"}, "12ca3917-de56-4f9b-9d4f-c1411a45cdce": {"doc_hash": "1c09c1e619f7d9340554f043cca4636a0a430841b1202ddab42050fe7e28ffb4", "ref_doc_id": "a663b85d-f1e9-43e1-b1dc-60131224137f"}, "f9ee5a0b-7d46-4381-b600-fbbbb966927f": {"doc_hash": "fc3d530b070e690cf0152ecd1bd1f22ae8beee1ad55cc6f4cb2e52c44c9442c2", "ref_doc_id": "a663b85d-f1e9-43e1-b1dc-60131224137f"}}, "docstore/data": {"acc79c06-ed01-4f3f-8b6c-f1c949bde2f4": {"__data__": {"id_": "acc79c06-ed01-4f3f-8b6c-f1c949bde2f4", "embedding": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a663b85d-f1e9-43e1-b1dc-60131224137f", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "38a6fa4dabd897c6b37173311423e78d20f40e593736cb08f6d5bce8cc996039"}, "3": {"node_id": "a402ce4d-708e-44d7-ad62-4bc78e6f7b3a", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "734776a9f27309928c5961987516853fb8ba435b7ba9101638fe89e3517bfd8e"}}, "hash": "882b8eb56a92891d59304566b62a0c54763c78e1f8ae2cd344d135f7f5614045", "text": "Remote Command and Control\n\nThe Notecard's communication with its cloud backend, Notehub, is bidirectional. This means that in addition to sending local data from the Notecard to the cloud, you can also send data or commands in the opposite direction (cloud to device) using a pattern we call command and control.\n\nBecause the Notecard is a generic data pump, the commands you send to your devices can be as simple or as complex as you need them to be. For example you could tell a light to turn off, a robot to move left, or a machine to stop operating.\n\nThe Notecard allows you to send these commands remotely, giving you the ability to perform actions on devices located anywhere in cellular range. Let's look at how it works.\n\nSending Commands to Devices\n\nThe easiest way to send a command to a device is with the Notehub API's note.add request.\n\nNote\n\nIf you're new to the Notehub API, you'll want to read our Notehub API tutorial before continuing, as the tutorial shows you the basics of using the API, including how to generate a bearer token.\n\nTo use the note.add request you need to send a POST to the Notehub API's /projects/<projectUID>/devices/<deviceUID>/notes/<file> endpoint, where projectUID is your ProjectUID, deviceUID is the DeviceUID of a device within your Notehub project, and <file> is the name Notefile you'd like to use (e.g. data.qi).\n\nThe body of the note.add request can be any JSON object you'd like. For example, the curl command below shows how to send {\"command\": \"on\"} to a device.\n\nCOPY\ncurl -X POST\n     -L 'https://api.notefile.net/v1/projects/<projectUID>/devices/<deviceUID>/notes/<file>'\n     -H 'Authorization: Bearer", "start_char_idx": 0, "end_char_idx": 1659, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a402ce4d-708e-44d7-ad62-4bc78e6f7b3a": {"__data__": {"id_": "a402ce4d-708e-44d7-ad62-4bc78e6f7b3a", "embedding": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a663b85d-f1e9-43e1-b1dc-60131224137f", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "38a6fa4dabd897c6b37173311423e78d20f40e593736cb08f6d5bce8cc996039"}, "2": {"node_id": "acc79c06-ed01-4f3f-8b6c-f1c949bde2f4", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "882b8eb56a92891d59304566b62a0c54763c78e1f8ae2cd344d135f7f5614045"}, "3": {"node_id": "f3fd7c84-dae4-4b58-bc68-63575989f453", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "8a9119249d9ac53d1366100f20bfef15197c7b3003fb4d6b0c3f373770d86946"}}, "hash": "734776a9f27309928c5961987516853fb8ba435b7ba9101638fe89e3517bfd8e", "text": "    -H 'Authorization: Bearer <access_token>'\n     -d '{\"body\": {\"command\": \"on\"}}'\nReceiving Commands on a Device\n\nOnce you have Notes queued in Notehub, you next need to receive those Notes on your device. You can configure how often your device checks for inbound notes using the hub.set request's mode, inbound, and sync arguments.\n\nFor example, running the command below places a Notecard in continuous mode. Devices in continuous mode maintain a constant connection with Notehub, but also use considerably more battery to maintain the connection. Setting the request's sync argument to true ensures inbound notes sync as soon as they're detected on Notehub.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"mode\": \"continuous\",\n  \"sync\": true\n}\nNote\n\nCheck out our minimizing latency guide for additional information on sending low-latency commands.\n\nIf your project is more battery-conscious, you may wish to instead place your device in periodic mode. Devices in periodic mode check for inbound Notes at a given interval, which you can specify with the inbound argument (in minutes).\n\nThe request below tells the Notecard to check for inbound Notes every 60 minutes.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"mode\": \"periodic\",\n  \"inbound\": 60\n}\nNote\n\nIf you place your device in periodic mode, you can use the hub.sync request while prototyping, as it triggers a synchronization of Notes between your Notecard and Notehub, even if your device is in periodic mode.\n\nRegardless of the configuration you use, once your device has received Notes you can check if any are present by running a note.changes request.\n\nThe note.changes request", "start_char_idx": 1637, "end_char_idx": 3288, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f3fd7c84-dae4-4b58-bc68-63575989f453": {"__data__": {"id_": "f3fd7c84-dae4-4b58-bc68-63575989f453", "embedding": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a663b85d-f1e9-43e1-b1dc-60131224137f", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "38a6fa4dabd897c6b37173311423e78d20f40e593736cb08f6d5bce8cc996039"}, "2": {"node_id": "a402ce4d-708e-44d7-ad62-4bc78e6f7b3a", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "734776a9f27309928c5961987516853fb8ba435b7ba9101638fe89e3517bfd8e"}, "3": {"node_id": "e7d56e32-0904-41da-ae01-70e3ab803161", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "c8b977f7c28f794afaee9c8aff4195095b043bbd1a543e3b4c7b3083b9381a73"}}, "hash": "8a9119249d9ac53d1366100f20bfef15197c7b3003fb4d6b0c3f373770d86946", "text": "check if any are present by running a note.changes request.\n\nThe note.changes request returns multiple Notes (if present), so you can use the request to process multiple commands at once.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"note.changes\",\n  \"file\": \"data.qi\"\n}\n\nResulting in the following JSON response:\n\nCOPY\n{\n  \"notes\": {\n    \"1:8572\": {\n      \"body\": {\n        \"command\": \"on\"\n      },\n      \"time\": 1667855195\n    }\n  },\n  \"total\": 1\n}\n\nIf you want to work with one Note at a time, you can alternatively use the note.get request to retrieve the next Note waiting in the Notefile.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"note.changes\",\n  \"file\": \"data.qi\",\n  \"delete\": true\n}\n\nResulting in the following JSON response:\n\nCOPY\n{\n  \"body\": {\n    \"command\": \"on\"\n  },\n  \"time\": 1667855195\n}\n\nIf no notes are available the note.get request returns a {note-noexist} error.\n\nCOPY\n{ \"err\": \"no notes available {note-noexist}\" }\nNote\n\nBoth the note.changes and note.get requests allow to pass a delete argument, which controls whether to delete Note(s) after you retrieve them from the Notefile.\n\nAt this point you've now seen how to send commands to devices using the Notehub API, as well as how to receive those commands using the Notecard. To put everything together, let's look at an example of how you can use a host to receive commands from the Notecard, and then take", "start_char_idx": 3238, "end_char_idx": 4603, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e7d56e32-0904-41da-ae01-70e3ab803161": {"__data__": {"id_": "e7d56e32-0904-41da-ae01-70e3ab803161", "embedding": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a663b85d-f1e9-43e1-b1dc-60131224137f", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "38a6fa4dabd897c6b37173311423e78d20f40e593736cb08f6d5bce8cc996039"}, "2": {"node_id": "f3fd7c84-dae4-4b58-bc68-63575989f453", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "8a9119249d9ac53d1366100f20bfef15197c7b3003fb4d6b0c3f373770d86946"}, "3": {"node_id": "5121e7e5-52d3-48b0-be86-529ee6dbb5c2", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "5a36b8ea667a140893d3e10fe86dc4a5eefbdb4c142ad667cd39082e4a13e832"}}, "hash": "c8b977f7c28f794afaee9c8aff4195095b043bbd1a543e3b4c7b3083b9381a73", "text": "how you can use a host to receive commands from the Notecard, and then take action.\n\nReceiving Commands on a Host\n\nWhen implementing a command-and-control architecture you may want to receive commands on a host microcontroller or single-board computer. A host MCU makes it possible to receive commands and take action, for example using commands like {\"command\":\"on\"} and {\"command\":\"off\"} as a trigger for turning on and off a light, respectively.\n\nWe provide Notecard libraries that allow you to communicate with the Notecard on a wide variety of hosts.\n\nIn this section you'll see the steps you need to take using the Notecard libraries to implement a command-and-control architecture.\n\nAs an example, we'll show how to use the Notecard Arduino library running on a Blues Swan, but you can use the same steps to implement this architecture with any Notecard library and virtually any MCU.\n\nStep 1: Configure Your Notecard\n\nAs a first step, remember that you must configure your Notecard so that it can receive commands. You can do this either in the in-browser terminal using the configuration below (remembering to substitute YOUR_PRODUCTUID_HERE) with your own value.\n\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"product\": \"YOUR_PRODUCTUID_HERE\",\n  \"mode\": \"continuous\",\n  \"sync\": true\n}\n\nOr you can set up your Notecard using one of the Notecard's libraries. For example, the code below shows how to set up a Notecard to immediately receive inbound Notes using the Notecard's Arduino SDK.\n\nCOPY\nJ *req = notecard.newRequest(\"hub.set\");\nJAddStringToObject(req, \"product\",", "start_char_idx": 4617, "end_char_idx": 6179, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5121e7e5-52d3-48b0-be86-529ee6dbb5c2": {"__data__": {"id_": "5121e7e5-52d3-48b0-be86-529ee6dbb5c2", "embedding": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a663b85d-f1e9-43e1-b1dc-60131224137f", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "38a6fa4dabd897c6b37173311423e78d20f40e593736cb08f6d5bce8cc996039"}, "2": {"node_id": "e7d56e32-0904-41da-ae01-70e3ab803161", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "c8b977f7c28f794afaee9c8aff4195095b043bbd1a543e3b4c7b3083b9381a73"}, "3": {"node_id": "25194197-e998-4a49-a7c7-a2fcb1be14ea", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "c0aa29e460adcb0b8d4f0205ef35ba20cf53414f20b261f48f261514555b5771"}}, "hash": "5a36b8ea667a140893d3e10fe86dc4a5eefbdb4c142ad667cd39082e4a13e832", "text": "\"product\", \"YOUR_PRODUCTUID_HERE\");\nJAddStringToObject(req, \"mode\", \"continuous\");\nJAddBoolToObject(req, \"sync\", true);\nnotecard.sendRequest(req);\nStep 2: Check for Inbound Notes\n\nOnce you have your Notecard set up, you next need to check for inbound notes. The most common way to do this check is with the note.changes or note.get requests discussed in the previous section.\n\nAs another option, you can also configure the Notecard to use an interrupt that allows you to use the ATTN pin to wake your host when you receive a new Note in a specified Notefile. If you're interested in that approach, check out Handling Notecard Interrupts.\n\nRegardless of the approach you take, you'll need some logic that can parse the command you need out of the Notecard's JSON response. The code below shows an Arduino example that parses the note.get request's JSON and returns the command. (For example, if note.get returns {\"body:{\"command\":\"on\"}) this function returns \"on\").\n\nCOPY\nchar* getLastCommand()\n{\n  // To hold \"on\" and \"off\". Increase the size if you need to send longer commands.\n  static char command[4];\n\n  J *req = notecard.newRequest(\"note.get\");\n  JAddStringToObject(req, \"file\", \"data.qi\");\n  JAddBoolToObject(req, \"delete\", true);\n\n  J *rsp = notecard.requestAndResponse(req);\n  if (notecard.responseError(rsp)) {\n    notecard.logDebug(\"No notes available\");\n    command[0] = '\\0';\n  } else {\n    J *body = JGetObject(rsp, \"body\");\n    strncpy(command, JGetString(body,", "start_char_idx": 6231, "end_char_idx": 7707, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "25194197-e998-4a49-a7c7-a2fcb1be14ea": {"__data__": {"id_": "25194197-e998-4a49-a7c7-a2fcb1be14ea", "embedding": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a663b85d-f1e9-43e1-b1dc-60131224137f", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "38a6fa4dabd897c6b37173311423e78d20f40e593736cb08f6d5bce8cc996039"}, "2": {"node_id": "5121e7e5-52d3-48b0-be86-529ee6dbb5c2", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "5a36b8ea667a140893d3e10fe86dc4a5eefbdb4c142ad667cd39082e4a13e832"}, "3": {"node_id": "12ca3917-de56-4f9b-9d4f-c1411a45cdce", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "1c09c1e619f7d9340554f043cca4636a0a430841b1202ddab42050fe7e28ffb4"}}, "hash": "c0aa29e460adcb0b8d4f0205ef35ba20cf53414f20b261f48f261514555b5771", "text": "\"body\");\n    strncpy(command, JGetString(body, \"command\"), sizeof(command));\n  }\n\n  notecard.deleteResponse(rsp);\n  return command;\n}\nNote\n\nIf you're using note.changes you'll need some additional logic as the request can return multiple Notes in one response.\n\nFinally, if you're not using interrupts you need to check for inbound notes in a loop. For our Arduino example this is straightforward as Arduino provides a built-in loop function. The code below checks for inbound notes every second.\n\nCOPY\nvoid loop()\n{\n  char* command = getLastCommand();\n\n  // Use the command (which we'll do in the next step)\n\n  // Wait one second before looking for changes again\n  delay(1000);\n}\nStep 3: Take Action\n\nAs a last step, now that you have your command you can take project-specific actions. For example, this is where you may want to turn on/off a light, move a robot in a given direction, or shut off a piece of hardware.\n\nAs one example, the code below shows how to use {\"command\":\"on\"} to turn on the Swan MCU's built-in LED, and {\"command\":\"off\"} to turn that same light off.\n\nCOPY\nchar* command = getLastCommand();\n\nif (!strncmp(command, \"on\", sizeof(\"on\")))\n{\n  notecard.logDebug(\"Turning light on\");\n  digitalWrite(LED_BUILTIN, HIGH);\n}\nif (!strncmp(command, \"off\", sizeof(\"off\")))\n{\n  notecard.logDebug(\"Turning light off\");\n  digitalWrite(LED_BUILTIN, LOW);\n}\n\nThis example's full code is below for your reference. Remember that although this implementation uses Arduino and the Swan, you can perform the same steps using any of the Notecard's libraries, and you", "start_char_idx": 7677, "end_char_idx": 9245, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "12ca3917-de56-4f9b-9d4f-c1411a45cdce": {"__data__": {"id_": "12ca3917-de56-4f9b-9d4f-c1411a45cdce", "embedding": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a663b85d-f1e9-43e1-b1dc-60131224137f", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "38a6fa4dabd897c6b37173311423e78d20f40e593736cb08f6d5bce8cc996039"}, "2": {"node_id": "25194197-e998-4a49-a7c7-a2fcb1be14ea", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "c0aa29e460adcb0b8d4f0205ef35ba20cf53414f20b261f48f261514555b5771"}, "3": {"node_id": "f9ee5a0b-7d46-4381-b600-fbbbb966927f", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "fc3d530b070e690cf0152ecd1bd1f22ae8beee1ad55cc6f4cb2e52c44c9442c2"}}, "hash": "1c09c1e619f7d9340554f043cca4636a0a430841b1202ddab42050fe7e28ffb4", "text": "you can perform the same steps using any of the Notecard's libraries, and you can run your logic on virtually any MCU.\n\nNote\n\nRefer back to the section on sending commands to devices to learn how to send the necessary Notehub API requests to test this example.\n\nCOPY\n#include <Notecard.h>\n\n#define serialDebug Serial\n#define productUID \"YOUR_PRODUCTUID_HERE\"\n\nNotecard notecard;\n\nvoid setup()\n{\n  while (!serialDebug);\n  serialDebug.begin(115200);\n  notecard.begin();\n  notecard.setDebugOutputStream(serialDebug);\n\n  // Configure the Notecard\n  J *req = notecard.newRequest(\"hub.set\");\n  JAddStringToObject(req, \"product\", productUID);\n  JAddStringToObject(req, \"mode\", \"continuous\");\n  JAddBoolToObject(req, \"sync\", true);\n  notecard.sendRequest(req);\n\n  // Initialize digital pin LED_BUILTIN as an output,\n  // and ensure the light starts off.\n  pinMode(LED_BUILTIN, OUTPUT);\n  digitalWrite(LED_BUILTIN, LOW);\n}\n\nchar* getLastCommand()\n{\n  // To hold \"on\" and \"off\". Increase the size if you need to send longer commands.\n  static char command[4];\n\n  J *req = notecard.newRequest(\"note.get\");\n  JAddStringToObject(req, \"file\", \"data.qi\");\n  JAddBoolToObject(req, \"delete\", true);\n\n  J *rsp = notecard.requestAndResponse(req);\n  if (notecard.responseError(rsp)) {\n    notecard.logDebug(\"No notes available\");\n    command[0] = '\\0';\n ", "start_char_idx": 9223, "end_char_idx": 10557, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f9ee5a0b-7d46-4381-b600-fbbbb966927f": {"__data__": {"id_": "f9ee5a0b-7d46-4381-b600-fbbbb966927f", "embedding": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a663b85d-f1e9-43e1-b1dc-60131224137f", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "38a6fa4dabd897c6b37173311423e78d20f40e593736cb08f6d5bce8cc996039"}, "2": {"node_id": "12ca3917-de56-4f9b-9d4f-c1411a45cdce", "node_type": null, "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}, "hash": "1c09c1e619f7d9340554f043cca4636a0a430841b1202ddab42050fe7e28ffb4"}}, "hash": "fc3d530b070e690cf0152ecd1bd1f22ae8beee1ad55cc6f4cb2e52c44c9442c2", "text": "notes available\");\n    command[0] = '\\0';\n  } else {\n    J *body = JGetObject(rsp, \"body\");\n    strncpy(command, JGetString(body, \"command\"), sizeof(command));\n  }\n\n  notecard.deleteResponse(rsp);\n  return command;\n}\n\nvoid loop()\n{\n  char* command = getLastCommand();\n\n  if (!strncmp(command, \"on\", sizeof(\"on\")))\n  {\n    notecard.logDebug(\"Turning light on\");\n    digitalWrite(LED_BUILTIN, HIGH);\n  }\n  if (!strncmp(command, \"off\", sizeof(\"off\")))\n  {\n    notecard.logDebug(\"Turning light off\");\n    digitalWrite(LED_BUILTIN, LOW);\n  }\n\n  // Wait one second before looking for changes again\n  delay(1000);\n}\nCan we improve this page? Send us feedback", "start_char_idx": 10578, "end_char_idx": 11229, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"a663b85d-f1e9-43e1-b1dc-60131224137f": {"node_ids": ["acc79c06-ed01-4f3f-8b6c-f1c949bde2f4", "a402ce4d-708e-44d7-ad62-4bc78e6f7b3a", "f3fd7c84-dae4-4b58-bc68-63575989f453", "e7d56e32-0904-41da-ae01-70e3ab803161", "5121e7e5-52d3-48b0-be86-529ee6dbb5c2", "25194197-e998-4a49-a7c7-a2fcb1be14ea", "12ca3917-de56-4f9b-9d4f-c1411a45cdce", "f9ee5a0b-7d46-4381-b600-fbbbb966927f"], "metadata": {"title": "", "category": "Remote Command And Control", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/remote-command-and-control/"}}}}