{"docstore/metadata": {"bfc4510c-0552-46ed-a2a5-68964f107848": {"doc_hash": "210b1e991eab6bc33b5f043f616aa5e43257a05022b973a271435d34c93b1aa3"}, "9bcbb53a-2692-40c5-a670-92b58799c73d": {"doc_hash": "217f51a7aebc7c471f6162837651a7d3a8b3ebecf3733e51e6ce08581eb7a0d0", "ref_doc_id": "bfc4510c-0552-46ed-a2a5-68964f107848"}, "a1c1b4e9-f080-414a-ae46-e931255af957": {"doc_hash": "e03086ae1d62a7f71e1927c68b09ef5f0d37c975ae5ddcb0db44c241bc78ab66", "ref_doc_id": "bfc4510c-0552-46ed-a2a5-68964f107848"}}, "docstore/data": {"9bcbb53a-2692-40c5-a670-92b58799c73d": {"__data__": {"id_": "9bcbb53a-2692-40c5-a670-92b58799c73d", "embedding": null, "metadata": {"title": "", "category": "Using Circuitpython With Swan", "url": "https://dev.blues.io/swan/using-circuitpython-with-swan/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bfc4510c-0552-46ed-a2a5-68964f107848", "node_type": null, "metadata": {"title": "", "category": "Using Circuitpython With Swan", "url": "https://dev.blues.io/swan/using-circuitpython-with-swan/"}, "hash": "210b1e991eab6bc33b5f043f616aa5e43257a05022b973a271435d34c93b1aa3"}, "3": {"node_id": "a1c1b4e9-f080-414a-ae46-e931255af957", "node_type": null, "metadata": {"title": "", "category": "Using Circuitpython With Swan", "url": "https://dev.blues.io/swan/using-circuitpython-with-swan/"}, "hash": "e03086ae1d62a7f71e1927c68b09ef5f0d37c975ae5ddcb0db44c241bc78ab66"}}, "hash": "217f51a7aebc7c471f6162837651a7d3a8b3ebecf3733e51e6ce08581eb7a0d0", "text": "Using CircuitPython with Swan\n\nCircuitPython is an open-source derivative of the MicroPython programming language and is primarily supported by Adafruit.\n\nPrerequisites\n\nDownload the latest version of the Swan's UF2 bootloader from the adafruit/tinyuf2 repository releases page. Expand the full list of assets under the current release and search for \"swan\" to find the appropriate file.\n\nDownload the latest version of CircuitPython from Adafruit's CircuitPython page for Swan. (You only need the .uf2 file.)\n\nIf you haven't already, install the device firmware upgrade utility: dfu-util.\n\nInstallation\n\nConnect the Swan's Micro USB port to your computer with a USB cable.\n\nPut your Swan into \"boot\" mode by holding down the BOOT button, pressing and releasing the RESET button, then releasing the BOOT button.\n\nUnzip your tiny-uf2-swan_r5-[version].zip file. You'll need the extracted .bin file for the next step.\n\nIn a terminal window, run the following command to flash the bootloader files to your Swan. Note that you may to need to navigate directories first, and you will likely need to change the file name at the end of the command to include the appropriate version number.\n\nCOPY\ndfu-util -s 0x8000000:leave -a 0 -D tinyuf2-swan_r5.bin\n\nIn a few seconds, a new drive called SWANBOOT will appear.\n\nNote\n\nIf you have previously installed the bootloader but don't see the SWANBOOT drive appear, press the RESET button twice (fairly quickly) to mount the drive.\n\nDrag-and-drop the previously downloaded adafruit-circuitpython-swan_r5.uf2 file onto the SWANBOOT drive. Your Swan will quickly reset and the CIRCUITPY drive will appear.\n\nChoosing an IDE\n\nThe", "start_char_idx": 0, "end_char_idx": 1661, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a1c1b4e9-f080-414a-ae46-e931255af957": {"__data__": {"id_": "a1c1b4e9-f080-414a-ae46-e931255af957", "embedding": null, "metadata": {"title": "", "category": "Using Circuitpython With Swan", "url": "https://dev.blues.io/swan/using-circuitpython-with-swan/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bfc4510c-0552-46ed-a2a5-68964f107848", "node_type": null, "metadata": {"title": "", "category": "Using Circuitpython With Swan", "url": "https://dev.blues.io/swan/using-circuitpython-with-swan/"}, "hash": "210b1e991eab6bc33b5f043f616aa5e43257a05022b973a271435d34c93b1aa3"}, "2": {"node_id": "9bcbb53a-2692-40c5-a670-92b58799c73d", "node_type": null, "metadata": {"title": "", "category": "Using Circuitpython With Swan", "url": "https://dev.blues.io/swan/using-circuitpython-with-swan/"}, "hash": "217f51a7aebc7c471f6162837651a7d3a8b3ebecf3733e51e6ce08581eb7a0d0"}}, "hash": "e03086ae1d62a7f71e1927c68b09ef5f0d37c975ae5ddcb0db44c241bc78ab66", "text": "CIRCUITPY drive will appear.\n\nChoosing an IDE\n\nThe beauty of working with CircuitPython on the Swan is that you interact directly with the source Python files on the CIRCUITPY drive. Virtually any IDE or text editor can be used to add, edit, and delete these files.\n\nHowever, if you want to interact with the on-device REPL or view terminal output, you'll want to use a tool specific to CircuitPython development. Traditional Python editors such as Mu and Thonny are great for programming CircuitPython on the Swan. Likewise, VS Code with the CircuitPython extension is another popular option.\n\nBlink the Onboard LED\n\nOpen the code.py file in the CIRCUITPY drive using your preferred editor.\n\nPaste in the following code and save the updated code.py file.\n\nCOPY\nimport board\nimport digitalio\nimport time\n\nled = digitalio.DigitalInOut(board.LED)\nled.direction = digitalio.Direction.OUTPUT\n\nwhile True:\n    led.value = True\n    time.sleep(0.5)\n    led.value = False\n    time.sleep(0.5)\n\nDepending on your IDE or editor, you may have to reset the device to see the changes. Enjoy your blinking LED!\n\nCan we improve this page? Send us feedback", "start_char_idx": 1611, "end_char_idx": 2750, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"bfc4510c-0552-46ed-a2a5-68964f107848": {"node_ids": ["9bcbb53a-2692-40c5-a670-92b58799c73d", "a1c1b4e9-f080-414a-ae46-e931255af957"], "metadata": {"title": "", "category": "Using Circuitpython With Swan", "url": "https://dev.blues.io/swan/using-circuitpython-with-swan/"}}}}