{"docstore/metadata": {"345ceed6-e4db-4ce7-aaf7-3b1349ec39a0": {"doc_hash": "a2fb36c7ba7596ed9014f382eeb2c1ed01d20f8cacc92b84803c17440aedb7bf"}, "8f3a811f-5ac0-4cce-9bbe-bea093724be9": {"doc_hash": "d190d838e1846657d2b3f1d99261ffc8f7aa3563b7697dc030da8fce3f365636", "ref_doc_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0"}, "5c9c1c7b-970f-4682-a3a3-fabe7ef4b0b8": {"doc_hash": "c91974b8bcb1bc3d7bceb71b94a9be8063afa7cb9555c1e1aa4ef0435aa91393", "ref_doc_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0"}, "9625ee9a-661e-4f9f-bb46-e9c626d97102": {"doc_hash": "600474dad5238789afe156ac6216752284243bd7d6adb9b50dbff56cd26d2aca", "ref_doc_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0"}, "4aa57ad2-a269-49f4-9501-cbfe123ff976": {"doc_hash": "5b8896812cc86b67d79c634b42d5a43d7ebb38934bc63a06ea00c40fa87d7e69", "ref_doc_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0"}, "976efa8b-318d-48a9-8adf-6e97af76c41d": {"doc_hash": "76c5886e86292322bf047fdeef60ed4869d4407bca13a6a1f0f807e570e75a53", "ref_doc_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0"}, "d71fc2de-07ac-4a0c-acb7-3862b0ad7f15": {"doc_hash": "decc0eba27e1aeaee08527a541c75e3f19d2c79f46666b7c8595c23e6f6f6ce6", "ref_doc_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0"}, "9914056a-f6b1-4a0d-b913-b6622fabf21d": {"doc_hash": "d165c2e8f8bb63ad88f417a35693970d8c864f572bf0d277ee1c8eeffa93a180", "ref_doc_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0"}, "d3a7a607-2382-44cd-828b-e3840c88bcc8": {"doc_hash": "ff1cad7a3740203850ac09b4eb6546d87a793be91650f8babaa7aa1a88cfc673", "ref_doc_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0"}, "353e9b1a-5660-4d87-ba57-47ae3372b636": {"doc_hash": "cec739295d7359e75979689d9d2aec44986c388e05fb0bf16cd2bb2f48324224", "ref_doc_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0"}, "dbc16ae6-925a-403b-9466-77a90011e874": {"doc_hash": "4a0cbdc67434c00fe9f6d532c2c37bf1b252cf296af9ace2039faf7c633fe425", "ref_doc_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0"}, "311b38cb-516c-40bb-a0c2-8324e8a68cd4": {"doc_hash": "15c4737a37f713d44c10016e91e63f114ccc5be4ded4b20109c0e4f704d280e0", "ref_doc_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0"}, "07183c77-08a4-4812-b8f2-68e0ea0166dd": {"doc_hash": "d59385cd979f2735fffefb24af1284052f355abf7d952ff5355cde5c1c5fb5af", "ref_doc_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0"}, "8eb553ed-9a96-4971-af7e-b82d04475bb4": {"doc_hash": "fe3f552daac1ae06594d228388e4f37100c721ca3f602e8d118ec1f50f5ee282", "ref_doc_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0"}, "42f13d77-6653-4e82-a331-efd4eacbb68a": {"doc_hash": "8da56479d2830e9a0a46706b6467e5bc45a60637b263089c8461fb1671c82480", "ref_doc_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0"}, "0bc21360-9d1a-4936-ab29-fbd6c6a399b8": {"doc_hash": "5c83ee2864fefdbf0004149b36dbcb60c4e3efbbfee1af63cb3a22fa081ae76a", "ref_doc_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0"}}, "docstore/data": {"8f3a811f-5ac0-4cce-9bbe-bea093724be9": {"__data__": {"id_": "8f3a811f-5ac0-4cce-9bbe-bea093724be9", "embedding": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "a2fb36c7ba7596ed9014f382eeb2c1ed01d20f8cacc92b84803c17440aedb7bf"}, "3": {"node_id": "5c9c1c7b-970f-4682-a3a3-fabe7ef4b0b8", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "c91974b8bcb1bc3d7bceb71b94a9be8063afa7cb9555c1e1aa4ef0435aa91393"}}, "hash": "d190d838e1846657d2b3f1d99261ffc8f7aa3563b7697dc030da8fce3f365636", "text": "Arduino Library\n\nnote-arduino is the official Arduino library for communicating with the Notecard over serial or I2C. The library works on any Arduino compatible microcontroller, and can be installed from the Arduino Library Manager or PlatformIO.\n\nInstallation\n\nYou can install and use the note-arduino library from Arduino IDE or PlatformIO using the steps below.\n\nArduino IDE\nPlatformIO\n\nOpen Arduino IDE.\n\nClick on the Tools > Manage Libraries... menu.\n\nSearch for \"Blues\" in the input box and click the \"Install\" button next to the \"Blues Wireless Notecard\" result.\n\nUsage\nArduino IDE\nPlatformIO\n\nTo use the note-arduino library in Arduino IDE you need to create a new sketch, and then select the Sketch > Include Library > Contributed Libraries > Blues Wireless Notecard menu option, which adds the following include to your sketch:\n\nCOPY\n#include <Notecard.h>\n\nWith the library included, you next must initialize the Notecard over serial or I2C.\n\nSerial Configuration\nI2C Configuration\nSerial Configuration\n\nTo initialize the Notecard over Serial, instantiate a Notecard object, then use the begin() method and provide the Serial object as a parameter. The Notecard object will initialize the serial bus on your behalf.\n\nDefault Serial Initialization\nCOPY\nNotecard notecard;\n\nvoid setup(void) {\n    # Initialize Notecard serial interface (with defaults)\n    notecard.begin(Serial1);\n}\nSerial Initialization with Baud Rate\nCOPY\nNotecard notecard;\n\nvoid setup(void) {\n    # Initialize Notecard serial interface\n    notecard.begin(Serial1, 9600);\n}\nI2C Configuration\n\nTo initialize the Notecard over I2C, instantiate a Notecard", "start_char_idx": 0, "end_char_idx": 1631, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5c9c1c7b-970f-4682-a3a3-fabe7ef4b0b8": {"__data__": {"id_": "5c9c1c7b-970f-4682-a3a3-fabe7ef4b0b8", "embedding": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "a2fb36c7ba7596ed9014f382eeb2c1ed01d20f8cacc92b84803c17440aedb7bf"}, "2": {"node_id": "8f3a811f-5ac0-4cce-9bbe-bea093724be9", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "d190d838e1846657d2b3f1d99261ffc8f7aa3563b7697dc030da8fce3f365636"}, "3": {"node_id": "9625ee9a-661e-4f9f-bb46-e9c626d97102", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "600474dad5238789afe156ac6216752284243bd7d6adb9b50dbff56cd26d2aca"}}, "hash": "c91974b8bcb1bc3d7bceb71b94a9be8063afa7cb9555c1e1aa4ef0435aa91393", "text": "initialize the Notecard over I2C, instantiate a Notecard object, then use the begin() method with zero, one, two, or three parameters. Use as many parameters as needed to match your implementation.\n\nDefault I2C Initialization\nCOPY\nNotecard notecard;\n\nvoid setup (void) {\n    # Initialize Notecard I2C interface (with defaults)\n    notecard.begin();\n}\nI2C Initialization with Address\nCOPY\nuint32_t i2cAddress = 0x24;\n\nNotecard notecard;\n\nvoid setup (void) {\n    # Initialize Notecard I2C interface\n    notecard.begin(i2cAddress);\n}\nNote\n\nBy passing an I2C address to notecard.begin() you are not assigning an address to the Notecard. Instead, you are telling the Arduino library to look for a Notecard at an I2C address that you set on the Notecard with a card.io request.\n\nI2C Initialization with Address and Max Transaction Length\nCOPY\nuint32_t i2cAddress = 0x17;\nuint32_t i2cMax = 32;\n\nNotecard notecard;\n\nvoid setup(void) {\n    # Initialize Notecard I2C interface\n    notecard.begin(i2cAddress, i2cMax);\n}\nI2C Initialization with Address, Max Transaction Length and I2C Bus\nCOPY\nuint32_t i2cAddress = 0x17;\nuint32_t i2cMax = 32;\n\nNotecard notecard;\n\nvoid setup(void) {\n    # Initialize Notecard I2C interface\n    notecard.begin(i2cAddress, i2cMax, Wire);\n}\nDebug Mode\n\nIf you're connected to the Serial Monitor (located in the", "start_char_idx": 1583, "end_char_idx": 2912, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9625ee9a-661e-4f9f-bb46-e9c626d97102": {"__data__": {"id_": "9625ee9a-661e-4f9f-bb46-e9c626d97102", "embedding": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "a2fb36c7ba7596ed9014f382eeb2c1ed01d20f8cacc92b84803c17440aedb7bf"}, "2": {"node_id": "5c9c1c7b-970f-4682-a3a3-fabe7ef4b0b8", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "c91974b8bcb1bc3d7bceb71b94a9be8063afa7cb9555c1e1aa4ef0435aa91393"}, "3": {"node_id": "4aa57ad2-a269-49f4-9501-cbfe123ff976", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "5b8896812cc86b67d79c634b42d5a43d7ebb38934bc63a06ea00c40fa87d7e69"}}, "hash": "600474dad5238789afe156ac6216752284243bd7d6adb9b50dbff56cd26d2aca", "text": "Mode\n\nIf you're connected to the Serial Monitor (located in the \"Tools\" menu of Arduino IDE), you can put the Notecard library in debug mode using the setDebugOutputStream method, which will output raw JSON requests and responses.\n\nCOPY\n#define serialDebug Serial\nNotecard notecard;\n\nvoid setup() {\n  // Initialize Debug Output\n  serialDebug.begin(115200);\n  while (!serialDebug) {\n    ; // wait for serial port to connect. Needed for native USB\n  }\n  notecard.setDebugOutputStream(serialDebug);\n}\nSending Notecard Requests\n\nWhether using Serial or I2C, sending Notecard requests and reading responses follows the same pattern:\n\nCreate a JSON object that includes a valid Notecard API Request.\nCall one of the notecard methods and pass in the request JSON object.\nIf you called a method that returns a response, make sure the response contains the data you need.\nCOPY\n#define productUID \"com.your-company.your-name:your_product\"\nNotecard notecard;\n\nvoid setup() {\n    J *req = notecard.newRequest(\"hub.set\");\n    if (req) {\n        JAddStringToObject(req, \"product\", productUID);\n        JAddStringToObject(req, \"mode\", \"continuous\");\n        JAddBoolToObject(req, \"sync\", true);\n        if (!notecard.sendRequest(req)) {\n            notecard.logDebug(\"FATAL: Failed to configure Notecard!\\n\");\n            while(1);\n        }\n    }\n}\nnotecard Methods\n\nThe Notecard provides a", "start_char_idx": 2908, "end_char_idx": 4284, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4aa57ad2-a269-49f4-9501-cbfe123ff976": {"__data__": {"id_": "4aa57ad2-a269-49f4-9501-cbfe123ff976", "embedding": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "a2fb36c7ba7596ed9014f382eeb2c1ed01d20f8cacc92b84803c17440aedb7bf"}, "2": {"node_id": "9625ee9a-661e-4f9f-bb46-e9c626d97102", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "600474dad5238789afe156ac6216752284243bd7d6adb9b50dbff56cd26d2aca"}, "3": {"node_id": "976efa8b-318d-48a9-8adf-6e97af76c41d", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "76c5886e86292322bf047fdeef60ed4869d4407bca13a6a1f0f807e570e75a53"}}, "hash": "5b8896812cc86b67d79c634b42d5a43d7ebb38934bc63a06ea00c40fa87d7e69", "text": "   }\n}\nnotecard Methods\n\nThe Notecard provides a variety of methods for performing requests.\n\nnewRequest() creates a JSON (J) object for the specified Notecard request. This method returns a JSON object with the req key set.\nCOPY\nJ *req = notecard.newRequest(\"card.status\");\nsendRequest() sends a JSON (J) request to the Notecard.\nCOPY\nJ *req = notecard.newRequest(\"hub.sync\");\nif (req) {\n    notecard.sendRequest(req);\n}\nrequestAndResponse() sends a JSON (J) request to the Notecard, and additionally returns the Notecard's JSON response in a J object that you can parse.\nCOPY\nJ *req = notecard.newRequest(\"card.status\");\nif (req) {\n    J* rsp = notecard.requestAndResponse(req);\n    // do something with the response\n    notecard.deleteResponse(rsp);\n}\nNote\n\nIn some situations, you may need to send the Notecard a request and you cannot receive a response. For example, when using card.attn request's sleep argument to disable a host MCU, the host will be disabled and incapable of receiving a response.\n\nFor these scenarios the note-arduino library provides a newCommand method. The newCommand method creates a new JSON (J) object for sending the Notecard a command rather than a request. You can send commands to the Notecard using the same sendRequest method you use for requests.\n\nCOPY\nJ *cmd = notecard.newCommand(\"card.attn\");\nif (cmd) {\n    JAddStringToObject(cmd, \"mode\", \"sleep\");\n    JAddNumberToObject(cmd, \"seconds\", 3600);\n    notecard.sendRequest(cmd);\n}\nJSON", "start_char_idx": 4298, "end_char_idx": 5774, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "976efa8b-318d-48a9-8adf-6e97af76c41d": {"__data__": {"id_": "976efa8b-318d-48a9-8adf-6e97af76c41d", "embedding": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "a2fb36c7ba7596ed9014f382eeb2c1ed01d20f8cacc92b84803c17440aedb7bf"}, "2": {"node_id": "4aa57ad2-a269-49f4-9501-cbfe123ff976", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "5b8896812cc86b67d79c634b42d5a43d7ebb38934bc63a06ea00c40fa87d7e69"}, "3": {"node_id": "d71fc2de-07ac-4a0c-acb7-3862b0ad7f15", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "decc0eba27e1aeaee08527a541c75e3f19d2c79f46666b7c8595c23e6f6f6ce6"}}, "hash": "76c5886e86292322bf047fdeef60ed4869d4407bca13a6a1f0f807e570e75a53", "text": "3600);\n    notecard.sendRequest(cmd);\n}\nJSON Handling\n\nThe note-arduino library uses a J JSON object for many of its APIs, and provides a number of functions for helping you create and parse J JSON objects.\n\nCreating JSON Objects\n\nThe note-arduino library's sendRequest and requestAndResponse functions both expect a J JSON object as an argument. You can create the initial J object with a call to newRequest, which allocates the appropriate memory and returns a JSON object that contains a \"req\" key-value pair.\n\nCOPY\nJ *req = notecard.newRequest(\"example.request\");\nif (req) {\n    // At this point req represents a JSON object with the structure:\n    // { \"req\": \"example.request\" }\n}\n\nFrom there, the following functions are available for helping you populate your JSON object with the data you need.\n\nJAddBoolToObject\nJAddNumberToObject\nJAddStringToObject\nJAddObjectToObject\nJAddArrayToObject\nJAddItemToArray\n\nTo see how to use these functions, suppose you need to create a J JSON object that contains the following JSON data.\n\nCOPY\n{\n    \"req\": \"example.request\",\n    \"key-1\": true,\n    \"key-2\": 2,\n    \"key-3\", \"3\",\n    \"key-4\": {\n        \"key-a\": [\"a\"]\n    }\n}\n\nThe code below constructs the above JSON structure, and then passes that object to the Notecard using sendRequest.\n\nCOPY\nJ *req = notecard.newRequest(\"example.request\");\nif (req) {\n    JAddBoolToObject(req, \"key-1\", true);\n    JAddNumberToObject(req,", "start_char_idx": 5776, "end_char_idx": 7195, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d71fc2de-07ac-4a0c-acb7-3862b0ad7f15": {"__data__": {"id_": "d71fc2de-07ac-4a0c-acb7-3862b0ad7f15", "embedding": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "a2fb36c7ba7596ed9014f382eeb2c1ed01d20f8cacc92b84803c17440aedb7bf"}, "2": {"node_id": "976efa8b-318d-48a9-8adf-6e97af76c41d", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "76c5886e86292322bf047fdeef60ed4869d4407bca13a6a1f0f807e570e75a53"}, "3": {"node_id": "9914056a-f6b1-4a0d-b913-b6622fabf21d", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "d165c2e8f8bb63ad88f417a35693970d8c864f572bf0d277ee1c8eeffa93a180"}}, "hash": "decc0eba27e1aeaee08527a541c75e3f19d2c79f46666b7c8595c23e6f6f6ce6", "text": "\"key-1\", true);\n    JAddNumberToObject(req, \"key-2\", 2);\n    JAddStringToObject(req, \"key-3\", \"3\");\n    J* key4 = JAddObjectToObject(req, \"key-4\");\n    J* keyA = JAddArrayToObject(key4, \"key-a\");\n    JAddItemToArray(keyA, JCreateString(\"a\"));\n\n    notecard.sendRequest(req);\n}\nNote\n\nThe note-arduino library includes several functions for creating \"items\" of a JSON object, such as JCreateArray, JCreateObject, JCreateNumber, JCreateBool, and JCreateString.\n\nYou only need these functions if you're using an API that requires a JSON item as an argument, such as JAddItemToArray.\n\nParsing JSON Objects\n\nThe note-arduino library's requestAndResponse function returns a J JSON object that contains response data from the Notecard. For example, the code below calls performs a card.status request on the Notecard, and and stores the returned data in a J object.\n\nCOPY\nif (J *req = notecard.newRequest(\"card.status\")) {\n    J *rsp = notecard.requestAndResponse(req);\n    notecard.logDebug(JConvertToJSONString(rsp));\n    notecard.deleteResponse(rsp);\n}\n\nAfter requestAndResponse runs, the JSON that rsp points at will have the structure below.\n\nCOPY\n{\n  \"connected\": true,\n  \"status\": \"{normal}\",\n  \"storage\": 2,\n  \"time\": 1667924973,\n  \"cell\": true\n}\n\nThere are a number of functions you can use to parse individual fields out of a JSON", "start_char_idx": 7198, "end_char_idx": 8530, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9914056a-f6b1-4a0d-b913-b6622fabf21d": {"__data__": {"id_": "9914056a-f6b1-4a0d-b913-b6622fabf21d", "embedding": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "a2fb36c7ba7596ed9014f382eeb2c1ed01d20f8cacc92b84803c17440aedb7bf"}, "2": {"node_id": "d71fc2de-07ac-4a0c-acb7-3862b0ad7f15", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "decc0eba27e1aeaee08527a541c75e3f19d2c79f46666b7c8595c23e6f6f6ce6"}, "3": {"node_id": "d3a7a607-2382-44cd-828b-e3840c88bcc8", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "ff1cad7a3740203850ac09b4eb6546d87a793be91650f8babaa7aa1a88cfc673"}}, "hash": "d165c2e8f8bb63ad88f417a35693970d8c864f572bf0d277ee1c8eeffa93a180", "text": "are a number of functions you can use to parse individual fields out of a JSON object.\n\nJIsPresent\nJGetBool\nJGetInt\nJGetNumber\nJGetObject\nJGetString\n\nFor example, the following code shows an example of how to access fields from the card.status response.\n\nCOPY\nchar status[20];\nif (J *req = notecard.newRequest(\"card.status\")) {\n    J *rsp = notecard.requestAndResponse(req);\n    notecard.logDebug(JConvertToJSONString(rsp));\n\n    bool connected = JGetBool(rsp, \"connected\");\n    char *tempStatus = JGetString(rsp, \"status\");\n    strlcpy(status, tempStatus, sizeof(status));\n    int storage = JGetInt(rsp, \"storage\");\n    int time = JGetInt(rsp, \"time\");\n    bool cell = JGetBool(rsp, \"cell\");\n\n    notecard.deleteResponse(rsp);\n}\n\nWhen the response contains nested objects you can parse them using JGetObject. For example, the file.changes request returns a JSON object with a structure that looks like the one below.\n\nCOPY\n{\n  \"info\": {\n    \"data.qo\": {\n      \"total\": 1\n    },\n    \"data.qi\": {\n      \"total\": 2\n    },\n    \"total\": 3\n  }\n}\n\nGiven this response, you could use the following code to parse out the total from within the \"data.qo\" object.\n\nCOPY\nif (J *req = notecard.newRequest(\"file.changes\")) {\n    J *rsp = notecard.requestAndResponse(req);\n   ", "start_char_idx": 8506, "end_char_idx": 9767, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d3a7a607-2382-44cd-828b-e3840c88bcc8": {"__data__": {"id_": "d3a7a607-2382-44cd-828b-e3840c88bcc8", "embedding": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "a2fb36c7ba7596ed9014f382eeb2c1ed01d20f8cacc92b84803c17440aedb7bf"}, "2": {"node_id": "9914056a-f6b1-4a0d-b913-b6622fabf21d", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "d165c2e8f8bb63ad88f417a35693970d8c864f572bf0d277ee1c8eeffa93a180"}, "3": {"node_id": "353e9b1a-5660-4d87-ba57-47ae3372b636", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "cec739295d7359e75979689d9d2aec44986c388e05fb0bf16cd2bb2f48324224"}}, "hash": "ff1cad7a3740203850ac09b4eb6546d87a793be91650f8babaa7aa1a88cfc673", "text": " J *rsp = notecard.requestAndResponse(req);\n    notecard.logDebug(JConvertToJSONString(rsp));\n\n    J *info = JGetObject(rsp, \"info\");\n    J *data = JGetObject(info, \"data.qo\");\n    int total = JGetInt(data, \"total\");\n    notecard.logDebugf(\"Total: %d\", total); // 1\n\n    notecard.deleteResponse(rsp);\n}\nExamples\n\nWe provide several examples for using note-arduino in a number of different scenarios. If you're using Arduino IDE you can access the examples from the File > Examples > Blues Wireless Notecard menu.\n\nIf you're using PlatformIO you can copy the source code for the examples from the links below.\n\nExample 0: Libraryless Communication\nLearn how to communicate with a Notecard in Arduino without using the note-arduino library.\nExample 1: Notecard Basics\nLearn the basics of communicating with a Notecard, including running a hub.set and note.add request.\nExample 2: Periodic Communications\nLearn how to communicate with a Notecard in periodic mode, gathering sensor measurements \"offline\", and performing uploads on a periodic basis.\nExample 3: Inbound Polling\nLearn how to use the Notecard to poll for inbound messages at a defined interval.\nExample 4: Inbound Interrupts\nLearn how to use the Notecard to manage an inbound queue of messages using interrupts.\nExample 5: Using Templates\nLearn how to use Note templates to send outbound Notes that use minimal bandwidth.\nExample 6: Sensor Tutorial\nLearn how to collect sensor data and send it to the cloud using the Notecard. This code is also used by the sensor tutorial.\nExample 7: Power Control\nLearn how the Notecard can be used to put a host to", "start_char_idx": 9791, "end_char_idx": 11401, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "353e9b1a-5660-4d87-ba57-47ae3372b636": {"__data__": {"id_": "353e9b1a-5660-4d87-ba57-47ae3372b636", "embedding": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "a2fb36c7ba7596ed9014f382eeb2c1ed01d20f8cacc92b84803c17440aedb7bf"}, "2": {"node_id": "d3a7a607-2382-44cd-828b-e3840c88bcc8", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "ff1cad7a3740203850ac09b4eb6546d87a793be91650f8babaa7aa1a88cfc673"}, "3": {"node_id": "dbc16ae6-925a-403b-9466-77a90011e874", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "4a0cbdc67434c00fe9f6d532c2c37bf1b252cf296af9ace2039faf7c633fe425"}}, "hash": "cec739295d7359e75979689d9d2aec44986c388e05fb0bf16cd2bb2f48324224", "text": "7: Power Control\nLearn how the Notecard can be used to put a host to sleep, save some state for the host, wake it up periodically and return saved state to the host.\nAPI Reference\nLibrary Classes\nClass\tUsage\tDescription\nclass Notecard\t#include \"Notecard.h\"\tClass that stores state and functions for interacting with the Blues Notecard.\nNotecard Class Reference\n\nThe class that stores state and functions for interacting with the Blues Notecard.\n\nClass Notecard\nMethod\tDescription\npublic void begin (uint32_t i2cAddress,uint32_t i2cMax, TwoWire & wirePort)\tInitialize the Notecard for I2C. This function configures the Notecard to use the I2C bus for communication with the host.\npublic void begin (HardwareSerial & serial, int speed)\tInitialize the Notecard for Serial communication. This function configures the Notecard to use Serial for communication with the host.\npublic void setDebugOutputStream (Stream & dbgserial)\tSet the debug output source. This function takes a Stream object (for example, Serial) and configures it as a source for writing debug messages during development.\npublic void clearDebugOutputStream (void)\tClear the debug output source.\npublic J * newRequest (const char * request)\tCreates a new request object for population by the host. This function accepts a request string (for example, \"note.add\") and initializes a JSON Object to return to the host.\npublic J * newCommand (const char * command)\tCreates a new command object for population by the host. This function accepts a command string (for example, \"note.add\") and initializes a JSON Object to return to the host.\npublic bool sendRequest (J * req)\tSends a request to the Notecard. This function takes a populated J JSON request object and sends it to the Notecard.\npublic J * requestAndResponse (J * req)\tSends a request to the Notecard and returns the JSON", "start_char_idx": 11387, "end_char_idx": 13230, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "dbc16ae6-925a-403b-9466-77a90011e874": {"__data__": {"id_": "dbc16ae6-925a-403b-9466-77a90011e874", "embedding": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "a2fb36c7ba7596ed9014f382eeb2c1ed01d20f8cacc92b84803c17440aedb7bf"}, "2": {"node_id": "353e9b1a-5660-4d87-ba57-47ae3372b636", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "cec739295d7359e75979689d9d2aec44986c388e05fb0bf16cd2bb2f48324224"}, "3": {"node_id": "311b38cb-516c-40bb-a0c2-8324e8a68cd4", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "15c4737a37f713d44c10016e91e63f114ccc5be4ded4b20109c0e4f704d280e0"}}, "hash": "4a0cbdc67434c00fe9f6d532c2c37bf1b252cf296af9ace2039faf7c633fe425", "text": "(J * req)\tSends a request to the Notecard and returns the JSON Response. This function takes a populated J JSON request object and sends it to the Notecard.\npublic void deleteResponse (J * rsp)\tDeletes a J JSON response object from memory.\npublic void logDebug (const char * message)\tWrite a message to the serial debug stream.\npublic void logDebugf (const char * format,...)\tWrite a formatted message to the serial debug stream.\npublic bool debugSyncStatus (int pollFrequencyMs,int maxLevel)\tPeriodically show Notecard sync status, returning true if something was displayed to the debug stream.\npublic bool responseError (J * rsp)\tDetermines if there is an error string present in a response object.\nbegin (I2C)\n\nInitialize the Notecard for I2C. This function configures the Notecard to use the I2C bus for communication with the host.\n\nArguments\ni2caddress\n\nuint32_t (optional)\n\nThe I2C Address to use for the Notecard.\n\n(default value: NOTE_I2C_ADDR_DEFAULT)\n\ni2cmax\n\nuint32_t (optional)\n\nThe max length of each message to send from the host to the Notecard. Used to ensure the messages are sized appropriately for the host.\n\n(default value: NOTE_I2C_MAX_DEFAULT)\n\nwirePort\n\nTwoWire class instance (optional)\n\nThe TwoWire implementation to use for I2C communication.\n\n(default value: Wire)\n\nCOPY\nNotecard notecard;\n...\n\n// Initialize I2C using default parameters\nnotecard.begin();\nCOPY\nNotecard notecard;\n...\n\n// Initialize I2C specifying all parameters\nnotecard.begin(0x17, 30, Wire);\nbegin (Serial)\n\nInitialize the Notecard for Serial communication. This function configures the", "start_char_idx": 13235, "end_char_idx": 14818, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "311b38cb-516c-40bb-a0c2-8324e8a68cd4": {"__data__": {"id_": "311b38cb-516c-40bb-a0c2-8324e8a68cd4", "embedding": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "a2fb36c7ba7596ed9014f382eeb2c1ed01d20f8cacc92b84803c17440aedb7bf"}, "2": {"node_id": "dbc16ae6-925a-403b-9466-77a90011e874", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "4a0cbdc67434c00fe9f6d532c2c37bf1b252cf296af9ace2039faf7c633fe425"}, "3": {"node_id": "07183c77-08a4-4812-b8f2-68e0ea0166dd", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "d59385cd979f2735fffefb24af1284052f355abf7d952ff5355cde5c1c5fb5af"}}, "hash": "15c4737a37f713d44c10016e91e63f114ccc5be4ded4b20109c0e4f704d280e0", "text": "(Serial)\n\nInitialize the Notecard for Serial communication. This function configures the Notecard to use Serial for communication with the host.\n\nArguments\nselectedSerialPort\n\nHardwareSerial class instance\n\nThe HardwareSerial bus to use.\n\nselectedSpeed\n\nint\n\nThe baud rate to use for communicating with the Notecard from the host.\n\n(default value: 9600) (optional)\n\nCOPY\nNotecard notecard;\n...\n\n// Initialize Serial using default parameters\nnotecard.begin(Serial1);\nCOPY\nNotecard notecard;\n...\n\n// Initialize Serial specifying all parameters\nnotecard.begin(Serial1, 9600);\nsetDebugOutputStream\n\nSet the debug output source. This function takes a Stream object (for example, Serial) and configures it as a source for writing debug messages during development.\n\nArguments\ndbgserial\n\nStream interface instance\n\nThe Stream object to use for debug output.\n\nCOPY\nNotecard notecard;\n...\n\nnotecard.setDebugOutputStream(Serial);\nclearDebugOutputStream\n\nClear the debug output source.\n\nArguments\nNone\nCOPY\nNotecard notecard;\n...\n\nnotecard.clearDebugOutputStream();\nnewRequest\n\nCreates a new request object for population by the host. This function accepts a request string (for example, \"note.add\") and initializes a JSON object to return to the host.\n\nNote\n\nThe newRequest function allocates memory to create a JSON object, which can fail if system resources are low. We recommend using the following pattern to check for this condition, which works because newRequest returns nullptr if the request fails.\n\nCOPY\nif (J *req = notecard.newRequest(\"hub.sync\")) {\n  ...\n}\nArguments\nrequest\n\nconst char *\n\nThe request name, for example, note.add.\n\nCOPY\nNotecard", "start_char_idx": 14791, "end_char_idx": 16439, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "07183c77-08a4-4812-b8f2-68e0ea0166dd": {"__data__": {"id_": "07183c77-08a4-4812-b8f2-68e0ea0166dd", "embedding": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "a2fb36c7ba7596ed9014f382eeb2c1ed01d20f8cacc92b84803c17440aedb7bf"}, "2": {"node_id": "311b38cb-516c-40bb-a0c2-8324e8a68cd4", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "15c4737a37f713d44c10016e91e63f114ccc5be4ded4b20109c0e4f704d280e0"}, "3": {"node_id": "8eb553ed-9a96-4971-af7e-b82d04475bb4", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "fe3f552daac1ae06594d228388e4f37100c721ca3f602e8d118ec1f50f5ee282"}}, "hash": "d59385cd979f2735fffefb24af1284052f355abf7d952ff5355cde5c1c5fb5af", "text": "request name, for example, note.add.\n\nCOPY\nNotecard notecard;\n...\n\nJ *req = notecard.newRequest(\"card.status\");\nReturns\n\nA pointer to a J JSON Object populated with the request name.\n\nSee also\nrequestAndResponse()\nsendRequest()\nnewCommand\n\nCreates a new command object for population by the host. This function accepts a command string (for example, \"note.add\") and initializes a JSON object to return to the host.\n\nNote\n\nThe newCommand function allocates memory to create a JSON object, which can fail if system resources are low. We recommend using the following pattern to check for this condition, which works because newCommand returns nullptr if the request fails.\n\nCOPY\nif (J *req = notecard.newCommand(\"hub.sync\")) {\n  ...\n}\nArguments\nrequest\n\nconst char *\n\nThe command name, for example, note.add.\n\nCOPY\nNotecard notecard;\n...\n\nJ *req = notecard.newCommand(\"card.status\");\nReturns\n\nA pointer to a J JSON Object populated with the request name.\n\nSee also\nsendRequest()\nsendRequest\n\nSends a request to the Notecard. This function takes a populated J JSON request object and sends it to the Notecard.\n\nArguments\nreq\n\nJ * class instance pointer\n\nA pointer to a J * JSON request object.\n\nCOPY\nNotecard notecard;\n...\n\nif (J *req = notecard.newRequest(\"hub.sync\")) {\n    notecard.sendRequest(req);\n}\nReturns\n\ntrue if the message was successfully sent to the Notecard, false if there was an error.\n\nSee also\nnewRequest()\nrequestAndResponse\n\nSends a request to the Notecard and returns the JSON Response. This function takes a populated J JSON request object and sends it to the", "start_char_idx": 16472, "end_char_idx": 18050, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8eb553ed-9a96-4971-af7e-b82d04475bb4": {"__data__": {"id_": "8eb553ed-9a96-4971-af7e-b82d04475bb4", "embedding": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "a2fb36c7ba7596ed9014f382eeb2c1ed01d20f8cacc92b84803c17440aedb7bf"}, "2": {"node_id": "07183c77-08a4-4812-b8f2-68e0ea0166dd", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "d59385cd979f2735fffefb24af1284052f355abf7d952ff5355cde5c1c5fb5af"}, "3": {"node_id": "42f13d77-6653-4e82-a331-efd4eacbb68a", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "8da56479d2830e9a0a46706b6467e5bc45a60637b263089c8461fb1671c82480"}}, "hash": "fe3f552daac1ae06594d228388e4f37100c721ca3f602e8d118ec1f50f5ee282", "text": "JSON Response. This function takes a populated J JSON request object and sends it to the Notecard.\n\nArguments\nreq\n\nJ * class instance pointer\n\nA pointer to a J * JSON request object.\n\nCOPY\nNotecard notecard;\n...\n\nif (J *req = notecard.newRequest(\"card.status\")) {\n    J *rsp = notecard.requestAndResponse(req);\n    notecard.logDebug(JConvertToJSONString(rsp));\n    notecard.deleteResponse(rsp);\n}\nReturns\n\nJ * JSON object pointer with the response from the Notecard.\n\nSee also\ndeleteResponse()\nnewRequest()\nWarning\n\nYou are responsible for managing the memory associated with the JSON response object.\n\ndeleteResponse\n\nDeletes a J JSON response object from memory.\n\nArguments\nrsp\n\nJ * class instance pointer\n\nA pointer to a J JSON response object.\n\nCOPY\nNotecard notecard;\n...\n\nif (J *req = notecard.newRequest(\"card.status\")) {\n    J *rsp = notecard.requestAndResponse(req);\n    notecard.logDebug(JConvertToJSONString(rsp));\n    notecard.deleteResponse(rsp);\n}\nSee also\nrequestAndResponse()\nlogDebug\n\nWrite a message to the serial debug stream.\n\nArguments\nmessage\n\nconst char *\n\nA string to log to the serial debug stream.\n\nCOPY\nNotecard notecard;\n...\n\nnotecard.logDebug(\"Hello, World!\\n\");\nlogDebugf\n\nWrite a formatted message to the serial debug stream.\n\nArguments\nformat\n\nA format string to log to the serial debug stream.\n\n... (variadic)\n\nOne or more values to interpolate into the format string.\n\nCOPY\nNotecard notecard;\nbool", "start_char_idx": 18025, "end_char_idx": 19456, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "42f13d77-6653-4e82-a331-efd4eacbb68a": {"__data__": {"id_": "42f13d77-6653-4e82-a331-efd4eacbb68a", "embedding": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "a2fb36c7ba7596ed9014f382eeb2c1ed01d20f8cacc92b84803c17440aedb7bf"}, "2": {"node_id": "8eb553ed-9a96-4971-af7e-b82d04475bb4", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "fe3f552daac1ae06594d228388e4f37100c721ca3f602e8d118ec1f50f5ee282"}, "3": {"node_id": "0bc21360-9d1a-4936-ab29-fbd6c6a399b8", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "5c83ee2864fefdbf0004149b36dbcb60c4e3efbbfee1af63cb3a22fa081ae76a"}}, "hash": "8da56479d2830e9a0a46706b6467e5bc45a60637b263089c8461fb1671c82480", "text": "into the format string.\n\nCOPY\nNotecard notecard;\nbool excited;\n...\n\nnotecard.logDebugf(\"High-%d!\\n\", (excited ? 10 : 5));\ndebugSyncStatus\n\nPeriodically show Notecard sync status, returning true if something was displayed to the debug stream.\n\nArguments\npollFrequencyMs\n\nint\n\nThe frequency to poll the Notecard for sync status.\n\nmaxLevel\n\nint\n\nThe maximum log level to output to the debug console. Pass -1 for all.\n\nSupported logging levels:\n\n0 - Major\n1 - Minor\n2 - Detailed\n3 - Programmatic\n\n\nCOPY\nNotecard notecard;\n...\n\n// Poll for programmatic level (3) sync status every 1.5s (1500ms)\nnotecard.debugSyncStatus(1500, 3);\nReturns\n\ntrue if a pending response was displayed to the debug stream.\n\nWarning\n\nSpecific log messages are NOT considered to be part of the stable API, and therefore should NEVER be programmed against. There is no guarantee of consistency of message or logging level for any given message.\n\nresponseError\n\nDetermines if there is an error string present in a response object.\n\nArguments\nrsp\n\nJ * class instance pointer\n\nA pointer to a J JSON response object.\n\nCOPY\nNotecard notecard;\n...\n\nif (J *req = notecard.newRequest(\"card.status\")) {\n    J *rsp = notecard.requestAndResponse(req);\n    if (notecard.responseError(rsp)) {\n        notecard.logDebug(\"Error response returned!\");\n    } else {\n        // process response\n    }\n    notecard.deleteResponse(rsp);\n}\nReturns\n\ntrue if the response object contains an", "start_char_idx": 19481, "end_char_idx": 20917, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0bc21360-9d1a-4936-ab29-fbd6c6a399b8": {"__data__": {"id_": "0bc21360-9d1a-4936-ab29-fbd6c6a399b8", "embedding": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "345ceed6-e4db-4ce7-aaf7-3b1349ec39a0", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "a2fb36c7ba7596ed9014f382eeb2c1ed01d20f8cacc92b84803c17440aedb7bf"}, "2": {"node_id": "42f13d77-6653-4e82-a331-efd4eacbb68a", "node_type": null, "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}, "hash": "8da56479d2830e9a0a46706b6467e5bc45a60637b263089c8461fb1671c82480"}}, "hash": "5c83ee2864fefdbf0004149b36dbcb60c4e3efbbfee1af63cb3a22fa081ae76a", "text": "if the response object contains an error.\n\nCan we improve this page? Send us feedback", "start_char_idx": 20932, "end_char_idx": 21017, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"345ceed6-e4db-4ce7-aaf7-3b1349ec39a0": {"node_ids": ["8f3a811f-5ac0-4cce-9bbe-bea093724be9", "5c9c1c7b-970f-4682-a3a3-fabe7ef4b0b8", "9625ee9a-661e-4f9f-bb46-e9c626d97102", "4aa57ad2-a269-49f4-9501-cbfe123ff976", "976efa8b-318d-48a9-8adf-6e97af76c41d", "d71fc2de-07ac-4a0c-acb7-3862b0ad7f15", "9914056a-f6b1-4a0d-b913-b6622fabf21d", "d3a7a607-2382-44cd-828b-e3840c88bcc8", "353e9b1a-5660-4d87-ba57-47ae3372b636", "dbc16ae6-925a-403b-9466-77a90011e874", "311b38cb-516c-40bb-a0c2-8324e8a68cd4", "07183c77-08a4-4812-b8f2-68e0ea0166dd", "8eb553ed-9a96-4971-af7e-b82d04475bb4", "42f13d77-6653-4e82-a331-efd4eacbb68a", "0bc21360-9d1a-4936-ab29-fbd6c6a399b8"], "metadata": {"title": "", "category": "Arduino Library", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/arduino-library/"}}}}