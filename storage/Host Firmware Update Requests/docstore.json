{"docstore/metadata": {"c130ec8c-c9f9-40df-ae43-bb019413f77a": {"doc_hash": "86c8a4c48e8bb96bdab3e9e5f6b32053f3da7e217de268276ea4471e40b1ab98"}, "2a1c4b10-de79-4e79-ac87-eb160ff888d0": {"doc_hash": "ccc7c8abf9ad9dc6c6e1a442d60ccdce66af39d08464ce94a8aeb2f58d0061ac", "ref_doc_id": "c130ec8c-c9f9-40df-ae43-bb019413f77a"}, "e8db24ec-3ffd-478f-ae6b-e5fce0226691": {"doc_hash": "f07dede02daaeddc360ce6553e7a87911eb4afafd240dcdab6aba0ce8c2594f0", "ref_doc_id": "c130ec8c-c9f9-40df-ae43-bb019413f77a"}, "801857d9-ddb9-4c3c-89fd-c6f648f3ead5": {"doc_hash": "5dd8fb09fd96c302a34c1a29e5609947e6d7ed1c9fa2d17c7ca0f6ed6fe0456e", "ref_doc_id": "c130ec8c-c9f9-40df-ae43-bb019413f77a"}, "92287bd4-ea30-4e61-af37-e4678662d711": {"doc_hash": "7456102ac2f2f44402b9b6f5dcc464a75b9ced9220d9379cc53ad3f5c6f801e0", "ref_doc_id": "c130ec8c-c9f9-40df-ae43-bb019413f77a"}, "cfd29bc4-850a-4bd5-a6ec-6f7c158f3dbb": {"doc_hash": "8df6b894b71e1e88f3913299a8e8477bc4ec535b69394c08bb7496436895f46a", "ref_doc_id": "c130ec8c-c9f9-40df-ae43-bb019413f77a"}, "ca0af01c-5c91-4619-82e7-28a299c72579": {"doc_hash": "155f1d617ced5c3a4562ceb67d1eaad3e01c2266c9f43e96888eda04389cf07b", "ref_doc_id": "c130ec8c-c9f9-40df-ae43-bb019413f77a"}}, "docstore/data": {"2a1c4b10-de79-4e79-ac87-eb160ff888d0": {"__data__": {"id_": "2a1c4b10-de79-4e79-ac87-eb160ff888d0", "embedding": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c130ec8c-c9f9-40df-ae43-bb019413f77a", "node_type": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "hash": "86c8a4c48e8bb96bdab3e9e5f6b32053f3da7e217de268276ea4471e40b1ab98"}, "3": {"node_id": "e8db24ec-3ffd-478f-ae6b-e5fce0226691", "node_type": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "hash": "f07dede02daaeddc360ce6553e7a87911eb4afafd240dcdab6aba0ce8c2594f0"}}, "hash": "ccc7c8abf9ad9dc6c6e1a442d60ccdce66af39d08464ce94a8aeb2f58d0061ac", "text": "Host Firmware Update Requests\n\nMuch of the power of the Notecard is in the fact that it can be used by any Host MCU or processor, from an 8-bit Arduino to a Raspberry Pi. It's also possible to communicate with the Notecard from any embedded language, including compiled languages like C and C++, to interpreted languages like Python and JavaScript. Because of this flexibility, you might expect that over the air firmware updates are not possible with the Notecard.\n\nHowever, while the flexibility of host languages are processors makes a generic end-to-end DFU capability impossible, the Notecard does offer a set of host firmware update APIs that can be utilized by developers. Based on the Notecard's own firmware update protocols, these APIs offload a significant part of the burden of implementing over the air host firmware updates across devices.\n\nAt a high-level, the host firmware update process consists of the following steps:\n\nA developer creates a new firmware revision, including a version number and optional metadata that can be extracted from the binary upon upload.\nThe administrator of the Project uploads the firmware binary to Notehub.\nNotehub extracts the version number, metadata, and adds the binary to the Project.\nThe administrator of the Project selects one or more Notecards to update, and queues a new firmware version for update.\nWhen target Notecards sync with Notehub, they will identify the new host firmware and download it progressively in the background.\nAs the Notecard receives the host firmware, it places it into a special firmware storage area of flash. Periodically throughout this process, the host firmware issues dfu.status requests to the Notecard to determine the status of a firmware binary download.\nOnce the download has completed, the host will use hub.set to halt network communication and inform the", "start_char_idx": 0, "end_char_idx": 1852, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e8db24ec-3ffd-478f-ae6b-e5fce0226691": {"__data__": {"id_": "e8db24ec-3ffd-478f-ae6b-e5fce0226691", "embedding": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c130ec8c-c9f9-40df-ae43-bb019413f77a", "node_type": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "hash": "86c8a4c48e8bb96bdab3e9e5f6b32053f3da7e217de268276ea4471e40b1ab98"}, "2": {"node_id": "2a1c4b10-de79-4e79-ac87-eb160ff888d0", "node_type": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "hash": "ccc7c8abf9ad9dc6c6e1a442d60ccdce66af39d08464ce94a8aeb2f58d0061ac"}, "3": {"node_id": "801857d9-ddb9-4c3c-89fd-c6f648f3ead5", "node_type": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "hash": "5dd8fb09fd96c302a34c1a29e5609947e6d7ed1c9fa2d17c7ca0f6ed6fe0456e"}}, "hash": "f07dede02daaeddc360ce6553e7a87911eb4afafd240dcdab6aba0ce8c2594f0", "text": "has completed, the host will use hub.set to halt network communication and inform the Notecard that it needs to access new firmware.\nNext, the host will issue dfu.get requests to load chunks of the firmware binary into its own memory.\nAfter the host obtains the full binary, it will re-flash and restart.\nFinally, the host will use hub.set to place the Notecard back into periodic or continuous mode.\n\nDetails surrounding the Notehub and device firmware steps listed above are outside the scope of this API reference. To learn more about the mechanics of orchestrating host updates in firmware and from Notehub, visit the Host Firmware Update Guide.\n\nThe rest of this section covers the Notecard API requests involved in steps 5, 6, and 8 above: downloading host firmware, entering DFU mode on the Notecard, and retrieving host firmware from the Notecard to your host device.\n\nObtaining Host Firmware Download Status\n\nThe dfu.status request is used to determine the status of a firmware background download, and locally control whether the Notecard will allow a background firmware download.\n\nWhen called with no arguments, a dfu.status request returns an object indicating the current mode, on or off to indicate whether local firmware updates are allowed. The default mode is idle to indicate that no firmware download is in progress and no data has been downloaded. In addition, on is true by default to indicate that the Notecard can receive firmware updates.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"dfu.status\"\n}\nCOPY\n{\n \"mode\": \"idle\",\n \"on\": true\n}\n\nTo disable firmware downloads to the Notecard, set the off argument to true:\n\nJSON\nC/C++\nPython\nCOPY\n{\n ", "start_char_idx": 1781, "end_char_idx": 3438, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "801857d9-ddb9-4c3c-89fd-c6f648f3ead5": {"__data__": {"id_": "801857d9-ddb9-4c3c-89fd-c6f648f3ead5", "embedding": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c130ec8c-c9f9-40df-ae43-bb019413f77a", "node_type": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "hash": "86c8a4c48e8bb96bdab3e9e5f6b32053f3da7e217de268276ea4471e40b1ab98"}, "2": {"node_id": "e8db24ec-3ffd-478f-ae6b-e5fce0226691", "node_type": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "hash": "f07dede02daaeddc360ce6553e7a87911eb4afafd240dcdab6aba0ce8c2594f0"}, "3": {"node_id": "92287bd4-ea30-4e61-af37-e4678662d711", "node_type": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "hash": "7456102ac2f2f44402b9b6f5dcc464a75b9ced9220d9379cc53ad3f5c6f801e0"}}, "hash": "5dd8fb09fd96c302a34c1a29e5609947e6d7ed1c9fa2d17c7ca0f6ed6fe0456e", "text": "true:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"dfu.status\",\n  \"off\": true\n}\n\nTo turn it back on, set the on argument to true:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"dfu.status\",\n  \"on\": true\n}\n\nYou can also use a voltage-variable value to control whether or not firmware updates are allowed, based on the battery level of the device, with the vvalue argument. This argument expects semicolon-delimited string values of on or off values that correspond to a battery state. The pre-defined Notecard battery states are:\n\nusb\nhigh\nnormal\nlow\ndead\n\nWhen the Notecard's power source is in a given state, it will adjust whether a firmware download is allowed based on the values in that string. For instance, if you want to allow firmware updates when the battery is full or high, but not when the power is lower, send a request like this:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"dfu.status\",\n  \"vvalue\": \"usb:1;high:1;normal:0;low:0;dead:0\"\n}\n\nIn addition to idle mode, dfu.status will return one of the following mode values after a device firmware update has been activated:\n\ndownloading\nready\nerror\ncompleted\n\nThe downloading mode indicates that the Notecard detected the presence of new firmware on a previous sync and is in the process of downloading it. When in this mode, a status string is included in the response with additional details about download progress.\n\nCOPY\n{\n \"mode\": \"downloading\",\n \"status\": \"downloaded 66% (28672/42892)\",\n \"on\": true\n}\n\nOnce the download is complete, the mode changes to ready to indicate", "start_char_idx": 3479, "end_char_idx": 4991, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "92287bd4-ea30-4e61-af37-e4678662d711": {"__data__": {"id_": "92287bd4-ea30-4e61-af37-e4678662d711", "embedding": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c130ec8c-c9f9-40df-ae43-bb019413f77a", "node_type": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "hash": "86c8a4c48e8bb96bdab3e9e5f6b32053f3da7e217de268276ea4471e40b1ab98"}, "2": {"node_id": "801857d9-ddb9-4c3c-89fd-c6f648f3ead5", "node_type": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "hash": "5dd8fb09fd96c302a34c1a29e5609947e6d7ed1c9fa2d17c7ca0f6ed6fe0456e"}, "3": {"node_id": "cfd29bc4-850a-4bd5-a6ec-6f7c158f3dbb", "node_type": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "hash": "8df6b894b71e1e88f3913299a8e8477bc4ec535b69394c08bb7496436895f46a"}}, "hash": "7456102ac2f2f44402b9b6f5dcc464a75b9ced9220d9379cc53ad3f5c6f801e0", "text": "true\n}\n\nOnce the download is complete, the mode changes to ready to indicate that the firmware binary is fully downloaded and verified. When in this mode, a status string is included, as well as a body JSON object that includes essential details about the firmware binary, including the length of the binary, its md5 hash, and more.\n\nCOPY\n{\n \"mode\": \"ready\",\n \"status\": \"successfully downloaded\",\n \"on\": true,\n \"body\": {\n  \"crc32\": 2525287425,\n  \"created\": 1599163431,\n  \"info\": {},\n  \"length\": 42892,\n  \"md5\": \"5a3f73a7f1b4bc8917b12b36c2532969\",\n  \"modified\": 1599163431,\n  \"name\": \"stm32-new-firmware$20200903200351.bin\",\n  \"notes\": \"Latest prod firmware\",\n  \"source\": \"stm32-new-firmware.bin\",\n  \"type\": \"firmware\"\n }\n}\n\nIf the Notecard encounters an error during the download, the mode reports as error and the status field will provide a reason for the error.\n\nCOPY\n{\n \"mode\": \"error\",\n \"status\": \"DFU did not complete\",\n \"on\": true\n}\nEntering DFU Mode on the Notecard\n\nOnce the firmware binary is available, the Notecard should be put into DFU mode by setting the hub.set mode argument to dfu. This request halts all Notecard communications activity and allows the host to access downloaded firmware from internal storage.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"mode\": \"dfu\"\n}\nEnsuring DFU Mode is Active\n\nDepending on in-progress communications on the Notecard, it may take up to 30 seconds after setting", "start_char_idx": 4959, "end_char_idx": 6380, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "cfd29bc4-850a-4bd5-a6ec-6f7c158f3dbb": {"__data__": {"id_": "cfd29bc4-850a-4bd5-a6ec-6f7c158f3dbb", "embedding": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c130ec8c-c9f9-40df-ae43-bb019413f77a", "node_type": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "hash": "86c8a4c48e8bb96bdab3e9e5f6b32053f3da7e217de268276ea4471e40b1ab98"}, "2": {"node_id": "92287bd4-ea30-4e61-af37-e4678662d711", "node_type": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "hash": "7456102ac2f2f44402b9b6f5dcc464a75b9ced9220d9379cc53ad3f5c6f801e0"}, "3": {"node_id": "ca0af01c-5c91-4619-82e7-28a299c72579", "node_type": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "hash": "155f1d617ced5c3a4562ceb67d1eaad3e01c2266c9f43e96888eda04389cf07b"}}, "hash": "8df6b894b71e1e88f3913299a8e8477bc4ec535b69394c08bb7496436895f46a", "text": "on in-progress communications on the Notecard, it may take up to 30 seconds after setting the device to dfu mode before it is ready to retrieve firmware. To ensure that the Notecard is in DFU mode, issue a dfu.get request and set the length argument to 0. This will verify that the device is in DFU mode without attempting to retrieve firmware.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"dfu.get\",\n  \"length\": 0\n}\nRetrieving Host Firmware from the Notecard\n\nOnce the Notecard is in dfu mode, use the dfu.get request to retrieve the downloaded firmware. This is typically done in successive chunks of length n until the entire binary has been delivered to the host. Use the length argument to provide a number of bytes to read for each request, and offset on each successive request to skip to the next available chunk.\n\nFor instance, if you wanted to read the binary 32 bytes at a time, the first request to dfu.get would look like this:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"dfu.get\",\n  \"length\": 32\n}\n\nAnd each subsequent request would add an offset value that increments by the previously-requested length, each time:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"dfu.get\",\n  \"length\": 32,\n  \"offset\": 32\n}\n\nThe first request to dfu.get returns the same body returned by dfu.status after a successful download. The first and subsequent requests also return a payload string containing the portion of the binary of the requested length and offset.\n\nCOPY\n{\n  \"payload\": \"AAAAAAAAAAAAAAAAcy8ACIEvAAgAAAAAjy8ACJ0vAAg=\"\n}\nClearing DFU State\n\nAfter a firmware", "start_char_idx": 6371, "end_char_idx": 7908, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ca0af01c-5c91-4619-82e7-28a299c72579": {"__data__": {"id_": "ca0af01c-5c91-4619-82e7-28a299c72579", "embedding": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c130ec8c-c9f9-40df-ae43-bb019413f77a", "node_type": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "hash": "86c8a4c48e8bb96bdab3e9e5f6b32053f3da7e217de268276ea4471e40b1ab98"}, "2": {"node_id": "cfd29bc4-850a-4bd5-a6ec-6f7c158f3dbb", "node_type": null, "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}, "hash": "8df6b894b71e1e88f3913299a8e8477bc4ec535b69394c08bb7496436895f46a"}}, "hash": "155f1d617ced5c3a4562ceb67d1eaad3e01c2266c9f43e96888eda04389cf07b", "text": "DFU State\n\nAfter a firmware update is complete, clear the Notecard's DFU state with a dfu.status request and the stop argument. You can optionally supply a status message that will be sent to Notehub to indicate the final update status to a Notehub admin.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"dfu.status\",\n  \"stop\": true,\n  \"status\": \"firmware update successful\"\n}\n\nThis request will set the dfu.status mode to completed and set the status field to the string value you provide.\n\nWarning\n\nDon't Forget to Exit DFU Mode!\n\nOnce the DFU process is completed, be sure to return the Notecard to periodic or continuous mode after the firmware update is complete with another hub.set request. If you don't do this, the device will remain in dfu mode, unable to sync with Notehub.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"mode\": \"periodic\"\n}\nLow Bandwidth Design\nAdvanced Notecard Configuration\nCan we improve this page? Send us feedback", "start_char_idx": 7956, "end_char_idx": 8892, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"c130ec8c-c9f9-40df-ae43-bb019413f77a": {"node_ids": ["2a1c4b10-de79-4e79-ac87-eb160ff888d0", "e8db24ec-3ffd-478f-ae6b-e5fce0226691", "801857d9-ddb9-4c3c-89fd-c6f648f3ead5", "92287bd4-ea30-4e61-af37-e4678662d711", "cfd29bc4-850a-4bd5-a6ec-6f7c158f3dbb", "ca0af01c-5c91-4619-82e7-28a299c72579"], "metadata": {"title": "", "category": "Host Firmware Update Requests", "url": "https://dev.blues.io/notecard/notecard-walkthrough/host-firmware-update-requests/"}}}}