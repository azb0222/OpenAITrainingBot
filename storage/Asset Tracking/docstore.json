{"docstore/metadata": {"f7641bae-d8d1-41cb-beb2-27641def64ed": {"doc_hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "f8ee0677-5479-4599-a569-34d87504a060": {"doc_hash": "7a61ff15a46e9c51d8d0e3c00227c49983d5b62e188c23255cadf5e0f1423d15", "ref_doc_id": "f7641bae-d8d1-41cb-beb2-27641def64ed"}, "c159902a-a041-41d7-a2ec-cb223e19558c": {"doc_hash": "6006175a3766c2d6c74ec57b4cc6129a4354e710b882557fc7c250dc67783d3f", "ref_doc_id": "f7641bae-d8d1-41cb-beb2-27641def64ed"}, "0c7da490-80be-4c89-bb71-545508c1e985": {"doc_hash": "5aa1880f810c7a44d7b57c685c218bc6f18694a4f0c17a84586a008a9a1b5ff5", "ref_doc_id": "f7641bae-d8d1-41cb-beb2-27641def64ed"}, "1f2d9a87-10d5-4199-9332-a42c5c314bc8": {"doc_hash": "68bc907beac7145ae8b98e89fa516a4285c9841d14350af844f3f7ddb89138d4", "ref_doc_id": "f7641bae-d8d1-41cb-beb2-27641def64ed"}, "7677d622-491d-43b2-a7d3-51bb0423c087": {"doc_hash": "3292427d468821e7adda627a76cd9acd215573e2438a3d7c5c3799dece3f2d22", "ref_doc_id": "f7641bae-d8d1-41cb-beb2-27641def64ed"}, "d8e68b29-2e9c-4c89-aaa6-fc1655c707b4": {"doc_hash": "6c20bdf5dbeec243568ed270c69278ba63726a8ec3cbb107561e07be1283120d", "ref_doc_id": "f7641bae-d8d1-41cb-beb2-27641def64ed"}, "e9b0e704-3fda-4fc2-a66c-9b4f031cacfb": {"doc_hash": "5a097dfdb1921d796bcb3057b70b716f0e93031bdf24a97c0b7579aa52ab12df", "ref_doc_id": "f7641bae-d8d1-41cb-beb2-27641def64ed"}, "f9e704b8-e127-4c91-a85e-0a37411fccaf": {"doc_hash": "d962f1d5c0778e83d1ec262490352cd651f7fa7872f34c0ddf0f76ceb48c7d14", "ref_doc_id": "f7641bae-d8d1-41cb-beb2-27641def64ed"}, "b64ca1ec-b2e4-4d14-87c2-9098d5859a30": {"doc_hash": "9302123aab0a536d5cff72481c88f23003dacaaa401db4951db7c7fbd1e93c0e", "ref_doc_id": "f7641bae-d8d1-41cb-beb2-27641def64ed"}, "86b93e83-7574-428f-b28b-bf7c01275d3c": {"doc_hash": "70b1525895d0da00f464967dee9d7055f60e53de67864a0cb710904c6134e09e", "ref_doc_id": "f7641bae-d8d1-41cb-beb2-27641def64ed"}, "747341ce-4ebe-44f2-ae87-2d1038607181": {"doc_hash": "2d099d8eea2623b6d53d9eac11599fe75d849e847129e05d4ba56e32b203fedb", "ref_doc_id": "f7641bae-d8d1-41cb-beb2-27641def64ed"}, "7e3d87d3-8588-4dd8-8e2c-f43184e0e188": {"doc_hash": "95f567567c25b17fbf4e3a47ea0be28fe49538a7bd86f83c29a5c4036550006e", "ref_doc_id": "f7641bae-d8d1-41cb-beb2-27641def64ed"}, "8399775c-93f4-484b-ae03-b13b77d27462": {"doc_hash": "6bf81966e67b705784425058a69373ab12d9e21c2714c092930f8196785e4dbf", "ref_doc_id": "f7641bae-d8d1-41cb-beb2-27641def64ed"}, "7989eb5a-80b9-4e78-be91-0957a30a6671": {"doc_hash": "a32c6edc37ccb614d934e475e804e5ca78883f952b99333bfa501f09b52fd914", "ref_doc_id": "f7641bae-d8d1-41cb-beb2-27641def64ed"}, "87ea28a5-715c-458b-a71b-35d1ae07ce00": {"doc_hash": "b401bb682da5a54c1415d74103ab92f6ed4df6d318ed4e066768435ed2c37be1", "ref_doc_id": "f7641bae-d8d1-41cb-beb2-27641def64ed"}, "a3884633-33e5-42eb-a694-710690584fa9": {"doc_hash": "e5353c9ca441ac7ec38b008990a990851e4978a2b3d4415abdee26dbb67a2847", "ref_doc_id": "f7641bae-d8d1-41cb-beb2-27641def64ed"}}, "docstore/data": {"f8ee0677-5479-4599-a569-34d87504a060": {"__data__": {"id_": "f8ee0677-5479-4599-a569-34d87504a060", "embedding": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7641bae-d8d1-41cb-beb2-27641def64ed", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "3": {"node_id": "c159902a-a041-41d7-a2ec-cb223e19558c", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "6006175a3766c2d6c74ec57b4cc6129a4354e710b882557fc7c250dc67783d3f"}}, "hash": "7a61ff15a46e9c51d8d0e3c00227c49983d5b62e188c23255cadf5e0f1423d15", "text": "Asset Tracking\n\nOne of the most common and valuable use cases for IoT is asset tracking. Whether for a vehicle, trailer, or shipping container, asset tracking is a powerful way for developers and companies to understand where an asset has been, where it is, and where it's headed\u2014all while monitoring the conditions of the asset itself.\n\nThe Cellular Notecard development kits contain nearly everything you need to build a cellular-powered asset tracker. This guide provides instructions for configuring your Notecard as a standalone asset tracker as well as a host-controlled tracker.\n\nWhat You Need to Get Started\n\nThis guide provides instructions for using the Notecard as both a standalone tracker, and with an MCU host. For both approaches, you'll need the following:\n\nA Cellular Notecard.\nA Notecarrier with either external or onboard Cellular and GPS/GNSS antennas, and battery support. The Notecarrier-A includes onboard antennas and the Notecarrier-F comes with an external antenna. Both provide connectors for a LiPo battery.\nA Micro USB cable.\n\nIf you're building a standalone Notecard tracker, you'll need the following:\n\nThe Notecard CLI or the provided in-browser terminal for configuring the Notecard.\n\nIf you're building a host-controlled tracker, you'll need the following:\n\nA microcontroller or single-board computer for communicating with the Notecard. The code samples in this guide target the Feather-compatible Swan running Arduino code, but can easily be adapted for your board of choice.\nOptional: An external sensor for gathering additional information about your asset. This guide uses a Bosch BME680 temperature and humidity sensor.\nA text editor for writing firmware, such as the Arduino IDE or VS Code.\nTracker Configuration Requests\n\nTo configure your", "start_char_idx": 0, "end_char_idx": 1781, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c159902a-a041-41d7-a2ec-cb223e19558c": {"__data__": {"id_": "c159902a-a041-41d7-a2ec-cb223e19558c", "embedding": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7641bae-d8d1-41cb-beb2-27641def64ed", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "2": {"node_id": "f8ee0677-5479-4599-a569-34d87504a060", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "7a61ff15a46e9c51d8d0e3c00227c49983d5b62e188c23255cadf5e0f1423d15"}, "3": {"node_id": "0c7da490-80be-4c89-bb71-545508c1e985", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "5aa1880f810c7a44d7b57c685c218bc6f18694a4f0c17a84586a008a9a1b5ff5"}}, "hash": "6006175a3766c2d6c74ec57b4cc6129a4354e710b882557fc7c250dc67783d3f", "text": "as the Arduino IDE or VS Code.\nTracker Configuration Requests\n\nTo configure your Notecard as a tracker, you'll need to do the following:\n\n(Optional) Perform a factory restore on the Notecard. A card.restore will perform a factory reset on the Notecard and clear out Notes and Notefiles from previous applications.\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.restore\",\n  \"delete\": true\n}\nSet a Product UID, mode, and sync times with hub.set. Setting mode to \"periodic\" is recommended for cases where your tracker will need to operate on battery power for extended periods of time. The outbound and inbound fields specify the interval, in minutes, that the Notecard should process outbound and inbound requests. These values also affect battery life, so use a value that makes sense for your application's power and data sync needs. The Notecard will only sync on the outbound interval if un-synced tracking information is available, but will always sync on the inbound interval in order to process new Notes and environment variables from Notehub.\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"product\": \"your-productuid\",\n  \"mode\": \"periodic\",\n  \"outbound\": 60,\n  \"inbound\": 720\n}\nSet the Notecard to use periodic or continuous location mode. Setting mode to \"periodic\" is recommended for battery-powered applications, and \"continuous\" for cases where low-latency location tracking is needed and power consumption is not a concern. When using periodic, the seconds field defines the interval at which to activate GPS and capture a location sample. Note: When in periodic mode, the GPS module will only activate to take a reading if the Notecard detects movement through its onboard accelerometer between interval", "start_char_idx": 1712, "end_char_idx": 3422, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0c7da490-80be-4c89-bb71-545508c1e985": {"__data__": {"id_": "0c7da490-80be-4c89-bb71-545508c1e985", "embedding": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7641bae-d8d1-41cb-beb2-27641def64ed", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "2": {"node_id": "c159902a-a041-41d7-a2ec-cb223e19558c", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "6006175a3766c2d6c74ec57b4cc6129a4354e710b882557fc7c250dc67783d3f"}, "3": {"node_id": "1f2d9a87-10d5-4199-9332-a42c5c314bc8", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "68bc907beac7145ae8b98e89fa516a4285c9841d14350af844f3f7ddb89138d4"}}, "hash": "5aa1880f810c7a44d7b57c685c218bc6f18694a4f0c17a84586a008a9a1b5ff5", "text": "if the Notecard detects movement through its onboard accelerometer between interval periods.\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.location.mode\",\n  \"mode\": \"periodic\",\n  \"seconds\": 3600\n}\nConfigure the Notecard to store tracking results in a tracking file that will be synced to Notehub, and set a heartbeat to check-in even if the device has not moved. card.location.track will store tracking-related data like location and temperature (as well as velocity, bearing, and distance if card.location.mode is set to mode:continuous, or mode:periodic and seconds < 300). This data is saved in a Notefile that will be sent to Notehub on each sync. The default file is _track.qo, but you can specify your own name with the file field. If you anticipate that your asset may be stationary for long periods of time, you can use heartbeat and hours to instruct the Notecard to create a tracking entry at a defined interval, regardless of motion. The Notecard does not switch on the GPS for heartbeats, since no movement has occurred. However the heartbeat provides confirmation that the Notecard tracker is still functioning correctly.\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.location.track\",\n  \"start\": true,\n  \"heartbeat\": true,\n  \"hours\": 12\n}\n\nOnce these requests have been sent to the Notecard, your tracker is ready to be deployed! The following two sections provide the specific steps for sending these requests for a standalone or host-controlled tracker.\n\nTo further customize your tracker, you can consult the Advanced Tracker Configuration section below.\n\nNote\n\nThe above commands will only work if the Notecard accelerometer is enabled. The accelerometer can be enabled with the following request if previously", "start_char_idx": 3420, "end_char_idx": 5135, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1f2d9a87-10d5-4199-9332-a42c5c314bc8": {"__data__": {"id_": "1f2d9a87-10d5-4199-9332-a42c5c314bc8", "embedding": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7641bae-d8d1-41cb-beb2-27641def64ed", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "2": {"node_id": "0c7da490-80be-4c89-bb71-545508c1e985", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "5aa1880f810c7a44d7b57c685c218bc6f18694a4f0c17a84586a008a9a1b5ff5"}, "3": {"node_id": "7677d622-491d-43b2-a7d3-51bb0423c087", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "3292427d468821e7adda627a76cd9acd215573e2438a3d7c5c3799dece3f2d22"}}, "hash": "68bc907beac7145ae8b98e89fa516a4285c9841d14350af844f3f7ddb89138d4", "text": "is enabled. The accelerometer can be enabled with the following request if previously disabled.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.motion.mode\",\n  \"start\": true\n}\nConfigure a Standalone Tracker\n\nThere are times where you simply want to track the location of your Notecard-connected asset and don't need to gather data from an external sensor, or control how and when your Notecard should track and sync after deployment. In these cases, you can configure your Notecard as a standalone tracker by issuing a few requests from a connected computer, connect a battery, and deploy it to the asset to be tracked.\n\nThe fastest way to configure the Notecard in this way is with the Notecard CLI, which allows you to connect to a Notecard over USB Serial and issue requests. The requests above can be sent individually using the req or play flag, or you can place all of the requests into a file with a json extension and use the setup flag to send them all at once. This is a handy approach when configuring multiple trackers for deployment.\n\nCOPY\nnotecard -setup configure-standalone-tracker.json\n\nThe Notecard will send each request in turn and output the result, like so:\n\nCOPY\n{\"req\":\"card.restore\",\"delete\":true}\n{}\n\n{\"req\":\"hub.set\",\"product\":\"com.veritas.delivery-fleet.tracker\",\"mode\":\"periodic\",\"outbound\":60,\"inbound\":720}\n{}\n\n{\"req\":\"card.location.mode\",\"seconds\":3600,\"mode\":\"periodic\"}\n{\"seconds\":3600,\"mode\":\"periodic\"}\n\n{\"req\":\"card.location.track\",\"start\":true,\"heartbeat\":true,\"hours\":12}\n{\"start\":true,\"hours\":12,\"heartbeat\":true}\n\nOnce these requests complete, your Notecard will self-provision with Notehub", "start_char_idx": 5136, "end_char_idx": 6760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7677d622-491d-43b2-a7d3-51bb0423c087": {"__data__": {"id_": "7677d622-491d-43b2-a7d3-51bb0423c087", "embedding": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7641bae-d8d1-41cb-beb2-27641def64ed", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "2": {"node_id": "1f2d9a87-10d5-4199-9332-a42c5c314bc8", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "68bc907beac7145ae8b98e89fa516a4285c9841d14350af844f3f7ddb89138d4"}, "3": {"node_id": "d8e68b29-2e9c-4c89-aaa6-fc1655c707b4", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "6c20bdf5dbeec243568ed270c69278ba63726a8ec3cbb107561e07be1283120d"}}, "hash": "3292427d468821e7adda627a76cd9acd215573e2438a3d7c5c3799dece3f2d22", "text": "these requests complete, your Notecard will self-provision with Notehub and start tracking location and movement.\n\nConfigure a Host-Controlled Tracker\n\nIf your application needs to capture and sync additional location-tagged data during tracking, or you wish to control tracking modes and intervals at runtime, you can build a host-controlled tracker. In this scenario, the Notecard receives the same requests as above, with the difference being that these requests are sent from a host MCU and can be adjusted by that host depending on the needs of your application.\n\nWhen host-controlled, you'll configure the tracker in firmware after boot, and before entering the application loop. For instance, assume that you're working with an Arduino-style host that will configure the Notecard as a tracker, and capture environmental readings from a BME680. You'll start by making a serial connection to the Notecard, and sending each tracker configuration request:\n\nCOPY\n#include <Notecard.h>\n#include <Wire.h>\n#include <seeed_bme680.h>\n\n#define usbSerial Serial\n#define txRxPinsSerial Serial1\n#define productUID \"com.veritas.delivery-fleet.tracker\"\n\n#define IIC_ADDR  uint8_t(0x76)\nSeeed_BME680 bmeSensor(IIC_ADDR);\n\nNotecard notecard;\n\nlong previousMillis = 0;\nlong interval = 60000 * 10;\n\nvoid setup()\n{\n  usbSerial.begin(115200);\n\n  notecard.setDebugOutputStream(usbSerial);\n  notecard.begin();\n\n  J *req = notecard.newRequest(\"hub.set\");\n  JAddStringToObject(req, \"product\", productUID);\n  JAddStringToObject(req, \"mode\", \"periodic\");\n  JAddNumberToObject(req, \"outbound\",", "start_char_idx": 6771, "end_char_idx": 8342, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d8e68b29-2e9c-4c89-aaa6-fc1655c707b4": {"__data__": {"id_": "d8e68b29-2e9c-4c89-aaa6-fc1655c707b4", "embedding": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7641bae-d8d1-41cb-beb2-27641def64ed", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "2": {"node_id": "7677d622-491d-43b2-a7d3-51bb0423c087", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "3292427d468821e7adda627a76cd9acd215573e2438a3d7c5c3799dece3f2d22"}, "3": {"node_id": "e9b0e704-3fda-4fc2-a66c-9b4f031cacfb", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "5a097dfdb1921d796bcb3057b70b716f0e93031bdf24a97c0b7579aa52ab12df"}}, "hash": "6c20bdf5dbeec243568ed270c69278ba63726a8ec3cbb107561e07be1283120d", "text": "\"periodic\");\n  JAddNumberToObject(req, \"outbound\", 60);\n  JAddNumberToObject(req, \"inbound\", 720);\n  notecard.sendRequest(req);\n\n  req = notecard.newRequest(\"card.location.mode\");\n  JAddStringToObject(req, \"mode\", \"periodic\");\n  JAddNumberToObject(req, \"seconds\", 3600);\n  notecard.sendRequest(req);\n\n  req = notecard.newRequest(\"card.location.track\");\n  JAddBoolToObject(req, \"sync\", true);\n  JAddBoolToObject(req, \"heartbeat\", true);\n  JAddNumberToObject(req, \"hours\", 12);\n  notecard.sendRequest(req);\n\n  if (!bmeSensor.init()) {\n    usbSerial.println(\"Could not find a valid BME680 sensor...\");\n  } else {\n    usbSerial.println(\"BME680 Connected...\");\n  }\n}\nNote\n\nThis sample does not perform a card.restore because doing so would wipe the Notecard on each reset. The full firmware source in GitHub does show an example for performing a restore only when the Device's ProductUID doesn't match the intended ProductUID.\n\nThen, your application loop will capture readings, and add them as location-tagged Notes to the Notecard.\n\nCOPY\nvoid loop()\n{\n  unsigned long currentMillis = millis();\n\n  if ((currentMillis - previousMillis > interval) && notecardProductSet) {\n    previousMillis = currentMillis;\n\n    if (bmeSensor.read_sensor_data()) {\n      usbSerial.println(\"Failed to obtain a reading...\");\n    } else {\n      J *req = notecard.newRequest(\"note.add\");\n      if (req", "start_char_idx": 8359, "end_char_idx": 9735, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e9b0e704-3fda-4fc2-a66c-9b4f031cacfb": {"__data__": {"id_": "e9b0e704-3fda-4fc2-a66c-9b4f031cacfb", "embedding": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7641bae-d8d1-41cb-beb2-27641def64ed", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "2": {"node_id": "d8e68b29-2e9c-4c89-aaa6-fc1655c707b4", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "6c20bdf5dbeec243568ed270c69278ba63726a8ec3cbb107561e07be1283120d"}, "3": {"node_id": "f9e704b8-e127-4c91-a85e-0a37411fccaf", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "d962f1d5c0778e83d1ec262490352cd651f7fa7872f34c0ddf0f76ceb48c7d14"}}, "hash": "5a097dfdb1921d796bcb3057b70b716f0e93031bdf24a97c0b7579aa52ab12df", "text": "notecard.newRequest(\"note.add\");\n      if (req != NULL) {\n        JAddStringToObject(req, \"file\", \"sensors.qo\");\n\n        J *body = JCreateObject();\n        if (body != NULL) {\n          JAddNumberToObject(body, \"temp\", bmeSensor.sensor_result_value.temperature);\n          JAddNumberToObject(body, \"humidity\", bmeSensor.sensor_result_value.humidity);\n          JAddNumberToObject(body, \"pressure\", bmeSensor.sensor_result_value.pressure / 1000.0);\n          JAddNumberToObject(body, \"gas\", bmeSensor.sensor_result_value.gas / 1000.0);\n          JAddItemToObject(req, \"body\", body);\n        }\n\n        notecard.sendRequest(req);\n      }\n    }\n  }\n}\n\nOnce the application firmware has been deployed to your device and tested, you can add a battery to your project and deploy it to your asset.\n\nThe host-controlled tracker has the added benefit of allowing you to adjust Notecard tracking settings in response to sensor readings or certain external conditions. For instance, you can change the mode or increase reading interval when the asset is in motion, and decrease it when the asset is idle for a period of time.\n\nTo further customize your tracker, you can consult the Advanced Tracker Configuration section below.\n\nNote\n\nThe complete source for both configuration approaches can be found in the Blues note-tutorials repository.\n\nViewing Tracker", "start_char_idx": 9744, "end_char_idx": 11092, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f9e704b8-e127-4c91-a85e-0a37411fccaf": {"__data__": {"id_": "f9e704b8-e127-4c91-a85e-0a37411fccaf", "embedding": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7641bae-d8d1-41cb-beb2-27641def64ed", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "2": {"node_id": "e9b0e704-3fda-4fc2-a66c-9b4f031cacfb", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "5a097dfdb1921d796bcb3057b70b716f0e93031bdf24a97c0b7579aa52ab12df"}, "3": {"node_id": "b64ca1ec-b2e4-4d14-87c2-9098d5859a30", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "9302123aab0a536d5cff72481c88f23003dacaaa401db4951db7c7fbd1e93c0e"}}, "hash": "d962f1d5c0778e83d1ec262490352cd651f7fa7872f34c0ddf0f76ceb48c7d14", "text": "be found in the Blues note-tutorials repository.\n\nViewing Tracker Data\n\nOnce your tracker is deployed and the Notecard is provisioned, it will synchronize tracking data in accordance with the configuration settings you specified. Upon synchronization, you will be able to view your data in Notehub.io. For both types, tracking entries will show up as Notes from the _track.qo Notefile (or the Notefile name you specified).\n\nIf you open an individual Note, you can view the Device location and Time Zone under the location tab.\n\nIn the JSON tab, you can see tracking data like bearing, distance and velocity in the Note body (which appear if the card.location.mode is set to mode:continuous, or mode:periodic and seconds < 300), as well as the location fields, all of which begin with where and are available whenever a GPS location is acquired.\n\nIf you're using a host-controlled tracker and sending sensor readings in a Notefile, each Note is also tagged with the same where fields as tracking Notes.\n\nRouting Tracker Data to Third-Party Services\n\nOnce your tracker is deployed and is synching to Notehub, you can use Routes to send tracker data to any third-party service (including your own custom endpoint) for additional processing and visualization. Notehub Routes can be configured to connect to any external service. Routes also give you the ability to send everything from all your Notecards, targeted fleets, or even Notefiles, and to transform event data before you route it to an external service.\n\nFor example, if you wanted to create a Route to send only the data you need from a _track.qo Note to an external service, you could use a JSONata transformation like this:\n\nCOPY\n{\n  \"location\": {\n    \"where\": where,\n    \"latitude\": where_lat,\n    \"longitude\": where_lon,\n   ", "start_char_idx": 11074, "end_char_idx": 12859, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b64ca1ec-b2e4-4d14-87c2-9098d5859a30": {"__data__": {"id_": "b64ca1ec-b2e4-4d14-87c2-9098d5859a30", "embedding": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7641bae-d8d1-41cb-beb2-27641def64ed", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "2": {"node_id": "f9e704b8-e127-4c91-a85e-0a37411fccaf", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "d962f1d5c0778e83d1ec262490352cd651f7fa7872f34c0ddf0f76ceb48c7d14"}, "3": {"node_id": "86b93e83-7574-428f-b28b-bf7c01275d3c", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "70b1525895d0da00f464967dee9d7055f60e53de67864a0cb710904c6134e09e"}}, "hash": "9302123aab0a536d5cff72481c88f23003dacaaa401db4951db7c7fbd1e93c0e", "text": "where_lat,\n    \"longitude\": where_lon,\n    \"location\": where_location,\n    \"country\": where_country,\n    \"time_zone\": where_timezone\n  },\n  \"motion\": {\n    \"bearing\": body.bearing,\n    \"distance\": body.distance,\n    \"seconds\": body.seconds,\n    \"velocity\": body.velocity\n  },\n  \"captured_time\": when,\n  \"sync_time\": routed\n}\n\nJSONata is a powerful data-transformation language built into Notehub, and you can learn more about it in our Using JSONata to Transform JSON guide and learn about the process of creating third-party Routes in the Route Tutorials.\n\nAdvanced Tracker Configurations\n\nThe Notecard API commands provided above allow you to configure a basic asset tracker with settings applicable to the most common tracking scenarios. However, your scenario may be unique, which is why diving into the Notecard APIs can reveal additional customizations to optimize your trackers.\n\nFine-Grained Location Tracking\n\nYou can specify how frequently you would like the device to sample its GPS location with the card.location.mode API and its seconds parameter:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.location.mode\",\n  \"mode\": \"periodic\",\n  \"seconds\": 5\n}\n\nWhen in periodic mode, the Notecard will only attempt to sample its GPS location when the onboard accelerometer has detected motion. You can increase the sensitivity of the accelerometer with the card.motion.mode API and its sensitivity parameter:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.motion.mode\",\n  \"sensitivity\": 2\n}\nWarning\n\nContinuous Cellular & Continuous GPS\n\nThe Notecard does not support running", "start_char_idx": 12884, "end_char_idx": 14451, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "86b93e83-7574-428f-b28b-bf7c01275d3c": {"__data__": {"id_": "86b93e83-7574-428f-b28b-bf7c01275d3c", "embedding": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7641bae-d8d1-41cb-beb2-27641def64ed", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "2": {"node_id": "b64ca1ec-b2e4-4d14-87c2-9098d5859a30", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "9302123aab0a536d5cff72481c88f23003dacaaa401db4951db7c7fbd1e93c0e"}, "3": {"node_id": "747341ce-4ebe-44f2-ae87-2d1038607181", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "2d099d8eea2623b6d53d9eac11599fe75d849e847129e05d4ba56e32b203fedb"}}, "hash": "70b1525895d0da00f464967dee9d7055f60e53de67864a0cb710904c6134e09e", "text": "Cellular & Continuous GPS\n\nThe Notecard does not support running both a continuous cellular connection ({\"req\":\"hub.set\", \"mode\":\"continuous\"}) and continuous GPS. If you attempt to set both cellular and GPS to continuous mode, the Notecard will return an error. This applies both to card.location.mode when the cellular connection is continuous, as well as hub.set if GPS has been set in continuous mode.\n\nCOPY\n{\"err\": \"cannot simultaneously use continuous card.location.mode and hub.set modes\"}\n\nIf concurrent use of cellular and GPS is required in your solution, we recommend usage of an external GPS module.\n\nAttempt to Sync Data Immediately\n\nIn order to save battery life, the Notecard will only attempt to sync accumulated tracking data on the intervals provided in the outbound parameter of your hub.set request. However, if you would like to attempt to sync data with Notehub immediately, you can set the \"sync\":true parameter of the card.location.track API:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.location.track\",\n  \"sync\": true\n}\nWarning\n\nContinuous Cellular & Continuous GPS\n\nThe Notecard does not support running both a continuous cellular connection ({\"req\":\"hub.set\", \"mode\":\"continuous\"}) and continuous GPS. If you attempt to set both cellular and GPS to continuous mode, the Notecard will return an error. This applies both to card.location.mode when the cellular connection is continuous, as well as hub.set if GPS has been set in continuous mode.\n\nCOPY\n{\"err\": \"cannot simultaneously use continuous card.location.mode and hub.set modes\"}\n\nIf concurrent use of cellular and GPS is required in your solution, we recommend usage of an external GPS module.\n\nBattery", "start_char_idx": 14430, "end_char_idx": 16112, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "747341ce-4ebe-44f2-ae87-2d1038607181": {"__data__": {"id_": "747341ce-4ebe-44f2-ae87-2d1038607181", "embedding": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7641bae-d8d1-41cb-beb2-27641def64ed", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "2": {"node_id": "86b93e83-7574-428f-b28b-bf7c01275d3c", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "70b1525895d0da00f464967dee9d7055f60e53de67864a0cb710904c6134e09e"}, "3": {"node_id": "7e3d87d3-8588-4dd8-8e2c-f43184e0e188", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "95f567567c25b17fbf4e3a47ea0be28fe49538a7bd86f83c29a5c4036550006e"}}, "hash": "2d099d8eea2623b6d53d9eac11599fe75d849e847129e05d4ba56e32b203fedb", "text": "required in your solution, we recommend usage of an external GPS module.\n\nBattery Optimization\n\nSince asset trackers are often in the field for extended periods of time, it is generally wise to optimize battery consumption. By using the card.voltage API's mode parameter, you can specify the type of battery being used:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.voltage\",\n  \"mode\": \"lipo\"\n}\n\nThe mode value is subsequently used in both the hub.set and card.location.track calls to specify the frequency at which outbound, inbound, and GPS location sampling should occur (i.e. you want the device to make these calls less frequently as battery voltage decreases).\n\nTo set the frequency of syncing outbound data with Notehub:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"hub.set\",\n  \"voutbound\": \"usb:30;high:60;normal:120;low:240;dead:0\",\n  \"vinbound\": \"usb:30;high:360;normal:720;low:1440;dead:0\"\n}\n\nTo set the frequency of gathering GPS location data:\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.location.mode\",\n  \"mode\": \"periodic\",\n  \"vseconds\": \"usb:1800;high:3600;normal:7200;low:43200;dead:0\"\n}\nNote\n\nThe Low Power Design guide dives into additional configuration options that can be used to optimize power consumption on the Notecard.\n\nAdvanced Logging\n\nWhen prototyping an asset tracking solution, it may be useful to gather as much data about the device as possible in the field. To do so, you can set the _log environment variable to all. Note that this will use additional cellular", "start_char_idx": 16099, "end_char_idx": 17578, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7e3d87d3-8588-4dd8-8e2c-f43184e0e188": {"__data__": {"id_": "7e3d87d3-8588-4dd8-8e2c-f43184e0e188", "embedding": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7641bae-d8d1-41cb-beb2-27641def64ed", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "2": {"node_id": "747341ce-4ebe-44f2-ae87-2d1038607181", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "2d099d8eea2623b6d53d9eac11599fe75d849e847129e05d4ba56e32b203fedb"}, "3": {"node_id": "8399775c-93f4-484b-ae03-b13b77d27462", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "6bf81966e67b705784425058a69373ab12d9e21c2714c092930f8196785e4dbf"}}, "hash": "95f567567c25b17fbf4e3a47ea0be28fe49538a7bd86f83c29a5c4036550006e", "text": "you can set the _log environment variable to all. Note that this will use additional cellular data on your Notecard due to the extensive log data sent to Notehub.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"env.default\",\n  \"name\": \"_log\",\n  \"text\": \"all\"\n}\nTaking an Immediate Reading\n\nFor some projects you may want a tracker to take an immediate GPS/GNSS reading. For example, your firmware may need to send an SOS with an immediate, accurate location.\n\nTo take an immediate reading you must be using a host microcontroller or single-board computer to control your Notecard. Once you have that in place, complete the following steps.\n\n1) Store the time value from the last location reading\n\nThe Notecard stores its last-known location so that you can retrieve it with a card.location request.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.location\"\n}\n\nThe JSON response returns a time:\n\nCOPY\n{\n \"status\": \"GPS updated (478 sec, 27/33 dB SNR, 4/7 sats, HDOP 1) {gps-active} {gps-signal} {gps-sats} {gps}\",\n \"mode\": \"continuous\",\n \"lat\": 43.96320156666668,\n \"lon\": -83.24814393333334,\n \"time\": 1657306363,\n \"threshold\": 1\n}\n\nAs a first step, you need to store the time value that comes back from this request on your host.\n\nHere's an example of how you can do that on an Arduino-based host using the Notecard Arduino library.\n\nCOPY\nsize_t gps_time_s;\n\n{\n  J *rsp = notecard.requestAndResponse(notecard.newRequest(\"card.location\"));\n ", "start_char_idx": 17571, "end_char_idx": 18991, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8399775c-93f4-484b-ae03-b13b77d27462": {"__data__": {"id_": "8399775c-93f4-484b-ae03-b13b77d27462", "embedding": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7641bae-d8d1-41cb-beb2-27641def64ed", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "2": {"node_id": "7e3d87d3-8588-4dd8-8e2c-f43184e0e188", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "95f567567c25b17fbf4e3a47ea0be28fe49538a7bd86f83c29a5c4036550006e"}, "3": {"node_id": "7989eb5a-80b9-4e78-be91-0957a30a6671", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "a32c6edc37ccb614d934e475e804e5ca78883f952b99333bfa501f09b52fd914"}}, "hash": "6bf81966e67b705784425058a69373ab12d9e21c2714c092930f8196785e4dbf", "text": " gps_time_s = JGetInt(rsp, \"time\");\n  NoteDeleteResponse(rsp);\n}\n\n2) Turn on continuous GPS/GNSS mode\n\nNow that you have the time from the previous location reading, you need to force the Notecard to take a new GPS/GNSS reading as quickly as possible. The fastest way to do that is to set the Notecard's location mode to \"continuous\".\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.location.mode\",\n  \"mode\": \"continuous\"\n}\n\n3) Wait for the reading\n\nOnce in continuous mode, the Notecard will immediately start taking a GPS/GNSS reading. However, readings are not instantaneous, and may take some time depending on the quality of your antenna and line-of-sight to the outdoor sky.\n\nThe best way to wait for a response is to make a card.location request in a loop, waiting for valid location data.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.location\"\n}\n\nAt first the card.location request will return status information in the response.\n\nCOPY\n{\n \"status\": \"GPS search (201 sec, 34/34 dB SNR, 0/1 sats, HDOP 0) {gps-active} {gps-signal} {gps-sats}\",\n \"mode\": \"continuous\"\n}\n\nOnce the Notecard completes the reading, the card.location request will include the captured latitude and longitude, as well as the time of the location capture.\n\nCOPY\n{\n \"status\": \"GPS updated (478 sec, 27/33 dB SNR, 4/7 sats, HDOP 1) {gps-active} {gps-signal} {gps-sats} {gps}\",\n \"mode\": \"continuous\",\n \"lat\":", "start_char_idx": 19070, "end_char_idx": 20445, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7989eb5a-80b9-4e78-be91-0957a30a6671": {"__data__": {"id_": "7989eb5a-80b9-4e78-be91-0957a30a6671", "embedding": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7641bae-d8d1-41cb-beb2-27641def64ed", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "2": {"node_id": "8399775c-93f4-484b-ae03-b13b77d27462", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "6bf81966e67b705784425058a69373ab12d9e21c2714c092930f8196785e4dbf"}, "3": {"node_id": "87ea28a5-715c-458b-a71b-35d1ae07ce00", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "b401bb682da5a54c1415d74103ab92f6ed4df6d318ed4e066768435ed2c37be1"}}, "hash": "a32c6edc37ccb614d934e475e804e5ca78883f952b99333bfa501f09b52fd914", "text": "{gps}\",\n \"mode\": \"continuous\",\n \"lat\": 43.96320156666668,\n \"lon\": -83.24814393333334,\n \"time\": 1657306363,\n \"threshold\": 1\n}\n\nThe easiest way to implement this on a host is to compare the card.location request's time to the time value you saved earlier \u2014 and when the values are different you know you have a new reading.\n\nHere's how you might do that on an Arduino-based host.\n\nCOPY\n// Block while waiting for a GPS/GNSS location\nfor (;;)\n{\n  // Get the latest location\n  J *rsp = notecard.requestAndResponse(notecard.newRequest(\"card.location\"));\n\n  // See if the location has changed from the previous reading\n  if (JGetInt(rsp, \"time\") != gps_time_s)\n  {\n    // If you get in here, you have a new reading.\n    double lat = JGetNumber(rsp, \"lat\");\n    double lon = JGetNumber(rsp, \"lon\");\n    // This is where you'd place your application-specific code to use the\n    // new coordinates.\n    NoteDeleteResponse(rsp);\n    break;\n  }\n  NoteDeleteResponse(rsp);\n\n  // Wait 2 seconds before trying again\n  delay(2000);\n}\n\nIf your tracker is in a location where getting a GPS/GNSS signal is impossible, the code above may loop endlessly, draining your tracker's battery. Therefore, you may wish to add a termination condition to the loop after a given number of attempts.\n\nThe Arduino code below introduces a timeout, and also looks for a stop flag \u2014 which the card.location request returns if it cannot locate a GPS/GNSS signal.\n\nCOPY\n// How many seconds to wait for a location", "start_char_idx": 20411, "end_char_idx": 21887, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "87ea28a5-715c-458b-a71b-35d1ae07ce00": {"__data__": {"id_": "87ea28a5-715c-458b-a71b-35d1ae07ce00", "embedding": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7641bae-d8d1-41cb-beb2-27641def64ed", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "2": {"node_id": "7989eb5a-80b9-4e78-be91-0957a30a6671", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "a32c6edc37ccb614d934e475e804e5ca78883f952b99333bfa501f09b52fd914"}, "3": {"node_id": "a3884633-33e5-42eb-a694-710690584fa9", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "e5353c9ca441ac7ec38b008990a990851e4978a2b3d4415abdee26dbb67a2847"}}, "hash": "b401bb682da5a54c1415d74103ab92f6ed4df6d318ed4e066768435ed2c37be1", "text": "signal.\n\nCOPY\n// How many seconds to wait for a location before you stop looking\nsize_t timeout_s = 300;\n\n// Block while waiting for a GPS/GNSS location\nfor (const size_t start_ms = ::millis();;)\n{\n  // Check for a timeout, and if enough time has passed, break out of the loop\n  // to avoid looping forever\n  if (::millis() >= (start_ms + (timeout_s * 1000)))\n  {\n    break;\n  }\n\n  // Get the latest location\n  J *rsp = notecard.requestAndResponse(notecard.newRequest(\"card.location\"));\n\n  // See if the location has changed from the previous reading\n  if (JGetInt(rsp, \"time\") != gps_time_s)\n  {\n    // If you get in here, you have a new reading.\n    double lat = JGetNumber(rsp, \"lat\");\n    double lon = JGetNumber(rsp, \"lon\");\n    // This is where you'd place your application-specific code to use the\n    // new coordinates.\n    NoteDeleteResponse(rsp);\n    break;\n  }\n\n  // If a \"stop\" field is on the card.location response, it means the Notecard\n  // cannot locate a GPS/GNSS signal, so we break out of the loop to avoid looping\n  // endlessly\n  if (JGetObjectItem(rsp, \"stop\"))\n  {\n    NoteDeleteResponse(rsp);\n    break;\n  }\n\n  NoteDeleteResponse(rsp);\n  // Wait 2 seconds before trying again\n  delay(2000);\n}\n\n4) Restore your GPS/GNSS configuration\n\nOnce you have your reading, you will likely want to restore your tracker's initial location mode through a card.location.mode request,", "start_char_idx": 21875, "end_char_idx": 23269, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a3884633-33e5-42eb-a694-710690584fa9": {"__data__": {"id_": "a3884633-33e5-42eb-a694-710690584fa9", "embedding": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7641bae-d8d1-41cb-beb2-27641def64ed", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "945b66815dc6ba491611cffa110639677de5ecb532228472e4af9f467a78adf5"}, "2": {"node_id": "87ea28a5-715c-458b-a71b-35d1ae07ce00", "node_type": null, "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}, "hash": "b401bb682da5a54c1415d74103ab92f6ed4df6d318ed4e066768435ed2c37be1"}}, "hash": "e5353c9ca441ac7ec38b008990a990851e4978a2b3d4415abdee26dbb67a2847", "text": "want to restore your tracker's initial location mode through a card.location.mode request, as remaining in continuous mode uses a considerable amount of battery.\n\nJSON\nC/C++\nPython\nCOPY\n{\n  \"req\": \"card.location.mode\",\n  \"mode\": \"periodic\"\n}\nNote\n\nThe card.location.mode request remembers the arguments you passed in previous calls. Therefore, you don't need to pass arguments such as seconds if you provided them in a previous call to card.location.mode.\n\nAdditional Resources\n12-minute video showing how to build a Notecard-based asset tracker\nAsset-tracking projects on Hackster.io\nStandalone tracker example configuration file\nHost-controlled tracker firmware example for Arduino\nHost MCU & Notecard sensor tutorial\nNotehub routing tutorial\nCan we improve this page? Send us feedback", "start_char_idx": 23227, "end_char_idx": 24014, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"f7641bae-d8d1-41cb-beb2-27641def64ed": {"node_ids": ["f8ee0677-5479-4599-a569-34d87504a060", "c159902a-a041-41d7-a2ec-cb223e19558c", "0c7da490-80be-4c89-bb71-545508c1e985", "1f2d9a87-10d5-4199-9332-a42c5c314bc8", "7677d622-491d-43b2-a7d3-51bb0423c087", "d8e68b29-2e9c-4c89-aaa6-fc1655c707b4", "e9b0e704-3fda-4fc2-a66c-9b4f031cacfb", "f9e704b8-e127-4c91-a85e-0a37411fccaf", "b64ca1ec-b2e4-4d14-87c2-9098d5859a30", "86b93e83-7574-428f-b28b-bf7c01275d3c", "747341ce-4ebe-44f2-ae87-2d1038607181", "7e3d87d3-8588-4dd8-8e2c-f43184e0e188", "8399775c-93f4-484b-ae03-b13b77d27462", "7989eb5a-80b9-4e78-be91-0957a30a6671", "87ea28a5-715c-458b-a71b-35d1ae07ce00", "a3884633-33e5-42eb-a694-710690584fa9"], "metadata": {"title": "", "category": "Asset Tracking", "url": "https://dev.blues.io/guides-and-tutorials/notecard-guides/asset-tracking/"}}}}