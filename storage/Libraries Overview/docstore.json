{"docstore/metadata": {"607b0294-f3d2-4d26-8db6-8b8ee78d3574": {"doc_hash": "d308ed4a230c5daa0f33e479a209f8d9ba116d2e7d8e0935b1b03982d9d742e7"}, "65ca87b9-6e26-44d2-9f32-c4d32f46226d": {"doc_hash": "99600ec0950a46ac8e8790ad2b1144f5db3b2b9998260f1a1fbcf0ac002f5a8b", "ref_doc_id": "607b0294-f3d2-4d26-8db6-8b8ee78d3574"}, "c0ec4daf-05f1-4dab-ae5e-8fad027ad6a4": {"doc_hash": "408988044b1db7bca2b17ac82834a09694ed5eb7b1f30f05803fe6ce241237d0", "ref_doc_id": "607b0294-f3d2-4d26-8db6-8b8ee78d3574"}}, "docstore/data": {"65ca87b9-6e26-44d2-9f32-c4d32f46226d": {"__data__": {"id_": "65ca87b9-6e26-44d2-9f32-c4d32f46226d", "embedding": null, "metadata": {"title": "", "category": "Libraries Overview", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/libraries-overview/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "607b0294-f3d2-4d26-8db6-8b8ee78d3574", "node_type": null, "metadata": {"title": "", "category": "Libraries Overview", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/libraries-overview/"}, "hash": "d308ed4a230c5daa0f33e479a209f8d9ba116d2e7d8e0935b1b03982d9d742e7"}, "3": {"node_id": "c0ec4daf-05f1-4dab-ae5e-8fad027ad6a4", "node_type": null, "metadata": {"title": "", "category": "Libraries Overview", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/libraries-overview/"}, "hash": "408988044b1db7bca2b17ac82834a09694ed5eb7b1f30f05803fe6ce241237d0"}}, "hash": "99600ec0950a46ac8e8790ad2b1144f5db3b2b9998260f1a1fbcf0ac002f5a8b", "text": "Firmware Libraries\n\nStart building your Notecard-powered app using one of our official libraries. Each library allows you to connect to the Notecard, and to issue requests using the Notecard API.\n\nNot sure where to start? Arduino is a widely used platform and a great starting point for any new IoT project, although you'll need to know a bit of C++ once you get beyond the basics. Python is a popular and easy-to-use option that's great for beginners, as well as anyone that wants to leverage the advantages of an interpreted language. C/C++ is the most powerful of your options, and is often the only choice when running on memory- and resource-constrained devices.\n\nThe Blues community has created .NET and Rust libraries as well. Please note that community libraries are not supported by Blues.\n\nArduino\n\nThe official Arduino firmware library for communicating with the Notecard over serial or I2C. This library works on any Arduino compatible microcontroller, and can be installed from the Arduino Library Manager or PlatformIO.\n\nView the Arduino library documentation\nPython\n\nThe official Python library for communicating with the Notecard over serial or I2C. This library works in a desktop setting, on single-board computers like the Raspberry Pi, and on microcontrollers with MicroPython or CircuitPython support.\n\nView the Python library documentation\nZephyr\n\nThe official Zephyr SDK for communicating with the Notecard over serial or I2C. While not mandatory, a full development environment is provided with VS Code Dev Containers, complete with all the tools and SDKs necessary to get started with Zephyr. If you already have a Zephyr project, then we guide you through the minimal changes to bring Notecard support to your project.\n\nView the Zephyr documentation\nC/C++\n\nThe official C/C++ library that allows you to control a Notecard by writing a C or C++ program. Your program can programmatically configure a Notecard", "start_char_idx": 0, "end_char_idx": 1933, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c0ec4daf-05f1-4dab-ae5e-8fad027ad6a4": {"__data__": {"id_": "c0ec4daf-05f1-4dab-ae5e-8fad027ad6a4", "embedding": null, "metadata": {"title": "", "category": "Libraries Overview", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/libraries-overview/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "607b0294-f3d2-4d26-8db6-8b8ee78d3574", "node_type": null, "metadata": {"title": "", "category": "Libraries Overview", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/libraries-overview/"}, "hash": "d308ed4a230c5daa0f33e479a209f8d9ba116d2e7d8e0935b1b03982d9d742e7"}, "2": {"node_id": "65ca87b9-6e26-44d2-9f32-c4d32f46226d", "node_type": null, "metadata": {"title": "", "category": "Libraries Overview", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/libraries-overview/"}, "hash": "99600ec0950a46ac8e8790ad2b1144f5db3b2b9998260f1a1fbcf0ac002f5a8b"}}, "hash": "408988044b1db7bca2b17ac82834a09694ed5eb7b1f30f05803fe6ce241237d0", "text": "by writing a C or C++ program. Your program can programmatically configure a Notecard and work with the Notecard API.\n\nView the C/C++ library documentation\nGo\n\nThe official Go library for communicating with the Notecard over serial or I2C. This library allows you to control a Notecard by coding in Go. Your program can configure a Notecard and work with the Notecard API.\n\nView the Go library documentation\nTinyGo\n\nThe official TinyGo library for communicating with the Notecard over serial or I2C. This library allows you to control a Notecard by coding in Go. Your program can configure a Notecard and work with the Notecard API.\n\nView the TinyGo library documentation\n.NET (Community)\n\nC# developers using either TinyCLR OS or .NET nanoFramework can use this community-supported library, which may also be installed via nuget.\n\nA quickstart experience demonstrating using .NET with the Notecard is available on the Blues blog.\n\nRust (Community)\n\nRust developers can use this community-supported library to use the Notecard with Rust. The library is also available on crates.io.\n\nIn addition, a quickstart for using Rust with the Blues Swan is available on GitHub.\n\nCan we improve this page? Send us feedback", "start_char_idx": 1848, "end_char_idx": 3059, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"607b0294-f3d2-4d26-8db6-8b8ee78d3574": {"node_ids": ["65ca87b9-6e26-44d2-9f32-c4d32f46226d", "c0ec4daf-05f1-4dab-ae5e-8fad027ad6a4"], "metadata": {"title": "", "category": "Libraries Overview", "url": "https://dev.blues.io/tools-and-sdks/firmware-libraries/libraries-overview/"}}}}