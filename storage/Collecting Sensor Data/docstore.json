{"docstore/metadata": {"9797d130-cad4-4110-9ebe-5ad7ac9af35d": {"doc_hash": "c6e6cbb714f1e4be15c287e804ea72f19b8be3c2864a772c906b41b424dbf62f"}, "f44a40e7-7e5b-43de-9b96-358bdb4ee8fd": {"doc_hash": "db241dfd85efd3d72cac8ff9c776a71410c68c988fdd02b2c551556c9fc49915", "ref_doc_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d"}, "93482350-f072-45d3-bf81-6eb08fff5897": {"doc_hash": "a6a7e7ecca2efdf28c05e3acb5dde5ab970bbaeaf3618e05156681cdb50ba9cc", "ref_doc_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d"}, "10f00125-eed2-44ba-b340-ba1283bb4782": {"doc_hash": "11fc5e7d733f41929d5a387c5b89f6516a0dd6982f658cbd938ac23531d6f658", "ref_doc_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d"}, "a60ee521-c39a-4413-85b9-3a8039a70530": {"doc_hash": "13a8a0ac3e333288167b2a35e6f9dd81de9fb5f4306832c4190770228c8d27d5", "ref_doc_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d"}, "5c507dff-5a3f-4807-9761-63e9aa94a616": {"doc_hash": "ff3d35faa4d9c019b8c42f09bfc1985bdfd6eb1c3e0ca9e7b17149ac171d9910", "ref_doc_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d"}, "80e8226f-cc4b-4e42-8ad9-8a2c234ceac3": {"doc_hash": "83a8c8ff2d43bb8070790154d9b4b5678734f9b56b4541cfafcd390ffa57c137", "ref_doc_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d"}, "a99c3e6a-2d01-4367-ab1d-3a3bdda54310": {"doc_hash": "32607e351dd6e0339d9c655e593c9336f91822a0c8cf9f35faef26b28dcab3b5", "ref_doc_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d"}, "9ebc1eff-f13e-4f8d-9dd3-da3b79e7a8ab": {"doc_hash": "13dbe31619281aa2eb5552ffeee759d9d758ab80ec7d0f3ed86f1371dbfc306a", "ref_doc_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d"}, "b806cde6-8733-431b-8aaa-40e8bcfbc968": {"doc_hash": "93f30f58517bb790efa093ab2b39acf5123eb3ff2ece73f8f37ff27fdaa35b34", "ref_doc_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d"}, "b871011b-6e50-4520-aeb5-d65f2bb7a5e6": {"doc_hash": "22b0313a01568a21bf23e8b3610db3def9cdca074d894acd6dbd4e3c9e40c339", "ref_doc_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d"}}, "docstore/data": {"f44a40e7-7e5b-43de-9b96-358bdb4ee8fd": {"__data__": {"id_": "f44a40e7-7e5b-43de-9b96-358bdb4ee8fd", "embedding": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "c6e6cbb714f1e4be15c287e804ea72f19b8be3c2864a772c906b41b424dbf62f"}, "3": {"node_id": "93482350-f072-45d3-bf81-6eb08fff5897", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "a6a7e7ecca2efdf28c05e3acb5dde5ab970bbaeaf3618e05156681cdb50ba9cc"}}, "hash": "db241dfd85efd3d72cac8ff9c776a71410c68c988fdd02b2c551556c9fc49915", "text": "Collecting Sensor Data\nGet started with:\nC/C++ (Arduino/Wiring)\nand\nBlues Swan\nand\nNotecarrier-F\n\nDon't see your favorite hardware here? Rest assured the Notecard works with virtually every MCU and SBC available. If you can't figure out how to complete this tutorial let us know in our forum and we can help you out.\n\nIntroduction\n\nThis tutorial should take approximately 40-50 minutes to complete.\n\nIn this tutorial, you'll learn how to take sensor readings from a Device and send readings to your Notecard and the Blues Notehub. You'll use C/C++ (Arduino/Wiring) running on a Blues Swan wired up to Notecarrier-F hardware. If you would like to use a different language, board, or Notecarrier, modify the dropdowns at the top of this guide.\n\nThe tutorial uses mock sensor readings for simplicity, but feel free to hook up a physical sensor of your choice and use that instead.\n\nNote\n\nIf you get stuck at any point during this tutorial, the full source for each example is available on GitHub:\n\nView this example's source code on GitHub.\nSet up Hardware\n\nFirst, you'll need to get all of your hardware connected. Follow the instructions below to connect your Blues Swan and Notecard mounted on a Notecarrier-F.\n\nIn order to complete this guide, you'll need the following:\n\nA Notecard mounted to a Notecarrier-F\nA Blues Swan\nA Micro USB to USB-A cable\nConnect the MCU to the Notecarrier\n\nPlug your Swan into the Feather headers on the Notecarrier-F.\n\nAttach the Swan to your computer with a Micro USB to USB-A cable, using the Micro USB port on the Swan.\n\nCreate a Notehub Project\n\nNow that your hardware is all connected, let's create a new Notehub project to", "start_char_idx": 0, "end_char_idx": 1659, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "93482350-f072-45d3-bf81-6eb08fff5897": {"__data__": {"id_": "93482350-f072-45d3-bf81-6eb08fff5897", "embedding": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "c6e6cbb714f1e4be15c287e804ea72f19b8be3c2864a772c906b41b424dbf62f"}, "2": {"node_id": "f44a40e7-7e5b-43de-9b96-358bdb4ee8fd", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "db241dfd85efd3d72cac8ff9c776a71410c68c988fdd02b2c551556c9fc49915"}, "3": {"node_id": "10f00125-eed2-44ba-b340-ba1283bb4782", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "11fc5e7d733f41929d5a387c5b89f6516a0dd6982f658cbd938ac23531d6f658"}}, "hash": "a6a7e7ecca2efdf28c05e3acb5dde5ab970bbaeaf3618e05156681cdb50ba9cc", "text": "that your hardware is all connected, let's create a new Notehub project to receive sensor readings from your Notecard.\n\nNavigate to notehub.io and log-in, or create a new account.\n\nUsing the New Project card, give your project a name and ProductUID.\n\nNOTE: The ProductUID must be globally unique, so we recommend a namespaced name like \"com.your-company.your-name:your_product\".\n\nTake note of your ProductUID. This identifier is used by Notehub to associate your Notecard to your project.\n\nWrite Firmware\n\nFor this portion of the guide you'll be writing firmware on your Blues Swan that will communicate with the Notecard. You can write the firmware using either PlatformIO (recommended) or Arduino IDE.\n\nConfigure your IDE to use the Blues Swan\n\nIf you haven't already, make sure you've completed the Swan quickstart for either PlatformIO or Arduino IDE using the links below.\n\nOption #1: Swan quickstart for PlatformIO (recommended)\nOption #2: Swan quickstart for Arduino IDE\n\nGreat job, now you're ready to write some firmware!\n\nCommunicating With Your Notecard\n\nWhen communicating with the Notecard over I2C, you'll want to use the note-arduino library. The code snippets below provide everything you need to talk to the Notecard over I2C in Arduino.\n\nWarning\n\nThe Notecarrier-F provides only an I2C connection between a Feather MCU host and the Notecard; it does not facilitate Serial communication between devices.\n\nInstall the Notecard Arduino Library\n\nPlatformIO\nArduino IDE\n\nOpen PlatformIO within Visual Studio Code.\n\nClick the Projects & Configuration menu, and hit the Create New Project button.\n\nGive the project a Name and click Finish.\n\nOpen your new project's platformio.ini file, and replace its contents with the default Swan configuration", "start_char_idx": 1598, "end_char_idx": 3355, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "10f00125-eed2-44ba-b340-ba1283bb4782": {"__data__": {"id_": "10f00125-eed2-44ba-b340-ba1283bb4782", "embedding": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "c6e6cbb714f1e4be15c287e804ea72f19b8be3c2864a772c906b41b424dbf62f"}, "2": {"node_id": "93482350-f072-45d3-bf81-6eb08fff5897", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "a6a7e7ecca2efdf28c05e3acb5dde5ab970bbaeaf3618e05156681cdb50ba9cc"}, "3": {"node_id": "a60ee521-c39a-4413-85b9-3a8039a70530", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "13a8a0ac3e333288167b2a35e6f9dd81de9fb5f4306832c4190770228c8d27d5"}}, "hash": "11fc5e7d733f41929d5a387c5b89f6516a0dd6982f658cbd938ac23531d6f658", "text": "project's platformio.ini file, and replace its contents with the default Swan configuration below, which includes the Blues Notecard library in its lib_deps.\n\nCOPY\n[env:bw_swan_r5]\nplatform = ststm32\nboard = bw_swan_r5\nupload_protocol = dfu\nframework = arduino\nbuild_flags = -D PIO_FRAMEWORK_ARDUINO_ENABLE_CDC\nmonitor_speed = 115200\nlib_deps =\n  Wire\n  blues/Blues Wireless Notecard@^1.4.1\nNote\n\nIf you're using an STLINK-V3MINI, update your upload_protocol to stlink (instead of dfu).\n\nOpen your project's main.cpp file, and paste the following include under the existing <Arduino.h> include. Leave your main.cpp file open for the steps below.\n\nCOPY\n#include <Notecard.h>\n\nSet Up Your Notecard\n\nNow, configure a Serial interface. Serial will be used to log information to the Serial terminal of the Arduino IDE.\n\nCOPY\n#define usbSerial Serial\n\nNext, add a definition for your ProductUID using the value you specified when creating your Notehub project.\n\nCOPY\n#define productUID \"com.your-company.your-name:your_product\"\n\nAbove the setup() and loop() functions, declare a global object to represent the Notecard.\n\nCOPY\nNotecard notecard;\n\nIn the setup() function, initialize the usbSerial object and tell the Notecard library to use this serial object for sending debug output.\n\nCOPY\ndelay(2500);\nusbSerial.begin(115200);\n\nInitialize an instance of the Notecard class and initialize an I2C connection to the Notecard using the notecard.begin() function. Then, use setDebugOutputStream() to link the debug output to usbSerial with the", "start_char_idx": 3338, "end_char_idx": 4872, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a60ee521-c39a-4413-85b9-3a8039a70530": {"__data__": {"id_": "a60ee521-c39a-4413-85b9-3a8039a70530", "embedding": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "c6e6cbb714f1e4be15c287e804ea72f19b8be3c2864a772c906b41b424dbf62f"}, "2": {"node_id": "10f00125-eed2-44ba-b340-ba1283bb4782", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "11fc5e7d733f41929d5a387c5b89f6516a0dd6982f658cbd938ac23531d6f658"}, "3": {"node_id": "5c507dff-5a3f-4807-9761-63e9aa94a616", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "ff3d35faa4d9c019b8c42f09bfc1985bdfd6eb1c3e0ca9e7b17149ac171d9910"}}, "hash": "13a8a0ac3e333288167b2a35e6f9dd81de9fb5f4306832c4190770228c8d27d5", "text": "function. Then, use setDebugOutputStream() to link the debug output to usbSerial with the following code:\n\nCOPY\nnotecard.begin();\nnotecard.setDebugOutputStream(usbSerial);\n\nNow, we'll configure the Notecard. Using the hub.set request, we associate this Notecard with the ProductUID of your project and set the Notecard to operate in continuous mode, which indicates that the device should immediately make a connection to Notehub and keep it active.\n\nCOPY\nJ *req = notecard.newRequest(\"hub.set\");\nJAddStringToObject(req, \"product\", productUID);\nJAddStringToObject(req, \"mode\", \"continuous\");\nnotecard.sendRequest(req);\n\nThe lines above build-up a JSON object by adding two string values for product and mode, and then fires the request off to the Notecard with the sendRequest() function.\n\nFlash Your Firmware\n\nEnter bootloader mode on your Swan by pressing and holding the BOOT button, pressing RESET, then releasing both buttons.\n\nPlatformIO\nArduino IDE\n\nIf you're using PlatformIO, click the Upload button (right arrow icon) at the bottom of the VS Code interface to flash the firmware to your device.\n\nNote\n\nIf you're using an STLink-V3Mini debugger you can use these instructions for uploading code to your Swan.\n\nView the Serial Log\n\nNow that your firmware is running on your device, you can use a Serial Monitor to view device output. Complete the instructions below in your preferred IDE.\n\nPlatformIO\nArduino IDE\n\nIf you're using PlatformIO, open the Serial Monitor by clicking the plug icon in the bottom of VS Code.\n\nYou should see a few debug messages, including the JSON object you sent, as well as the response from the Notecard {}. (Note: You might need to upload your code a second time to see the result of the hub.set request, as the Serial Monitor only", "start_char_idx": 4876, "end_char_idx": 6646, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5c507dff-5a3f-4807-9761-63e9aa94a616": {"__data__": {"id_": "5c507dff-5a3f-4807-9761-63e9aa94a616", "embedding": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "c6e6cbb714f1e4be15c287e804ea72f19b8be3c2864a772c906b41b424dbf62f"}, "2": {"node_id": "a60ee521-c39a-4413-85b9-3a8039a70530", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "13a8a0ac3e333288167b2a35e6f9dd81de9fb5f4306832c4190770228c8d27d5"}, "3": {"node_id": "80e8226f-cc4b-4e42-8ad9-8a2c234ceac3", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "83a8c8ff2d43bb8070790154d9b4b5678734f9b56b4541cfafcd390ffa57c137"}}, "hash": "ff3d35faa4d9c019b8c42f09bfc1985bdfd6eb1c3e0ca9e7b17149ac171d9910", "text": "code a second time to see the result of the hub.set request, as the Serial Monitor only captures output when it's actively running.)\n\nRead from the sensor\n\nNow that you've configured your Arduino to communicate with the Notecard, let's grab some pseudo sensor readings.\n\nNote\n\nIf you have your own sensor, feel free to hook it up and use your own values instead of this tutorial's mocked ones.\n\nInstall the NotecardPseudoSensor Library\n\nTo generate mock sensor readings you'll use the NotecardPseudoSensor library. Complete the instructions below for your preferred IDE.\n\nPlatformIO\nArduino IDE\n\nClick the Libraries menu within PlatformIO.\n\nSearch for \"Notecard\" and scroll a bit to find the NotecardPseudoSensor library.\n\nClick the \"Add to Project\" button, which adds the library to the lib_deps section of your project's platformio.ini file.\n\nGather Sensor Readings\n\nAdd the following include to the top of your sketch:\n\nCOPY\n#include <NotecardPseudoSensor.h>\n\nNext, include the following namespace under your includes.\n\nCOPY\nusing namespace blues;\n\nAfter that, create an instance of NotecardPseudoSensor with the line of code below. Place this directly under your existing Notecard notecard statement.\n\nCOPY\nNotecardPseudoSensor sensor(notecard);\n\nFinally, place the following code in your loop function, which generates mock temperature and humidity readings, prints them to the console, and then waits 15 seconds before exiting the loop.\n\nCOPY\nfloat temperature = sensor.temp();\nfloat humidity = sensor.humidity();\n\nusbSerial.print(\"Temperature = \");\nusbSerial.print(temperature);\nusbSerial.println(\" *C\");\nusbSerial.print(\"Humidity =", "start_char_idx": 6653, "end_char_idx": 8292, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "80e8226f-cc4b-4e42-8ad9-8a2c234ceac3": {"__data__": {"id_": "80e8226f-cc4b-4e42-8ad9-8a2c234ceac3", "embedding": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "c6e6cbb714f1e4be15c287e804ea72f19b8be3c2864a772c906b41b424dbf62f"}, "2": {"node_id": "5c507dff-5a3f-4807-9761-63e9aa94a616", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "ff3d35faa4d9c019b8c42f09bfc1985bdfd6eb1c3e0ca9e7b17149ac171d9910"}, "3": {"node_id": "a99c3e6a-2d01-4367-ab1d-3a3bdda54310", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "32607e351dd6e0339d9c655e593c9336f91822a0c8cf9f35faef26b28dcab3b5"}}, "hash": "83a8c8ff2d43bb8070790154d9b4b5678734f9b56b4541cfafcd390ffa57c137", "text": "*C\");\nusbSerial.print(\"Humidity = \");\nusbSerial.print(humidity);\nusbSerial.println(\" %\");\n\ndelay(15000);\n\nUpload this code to your Blues Swan. Open the Serial Monitor and you'll see temperature and humidity readings every 15 seconds.\n\nSend Sensor Readings to the Notecard\n\nNow that we're getting sensor readings, let's send these to our Notecard.\n\nTo send a sensor reading to the Notecard, we'll need to construct a new JSON request to the note.add API that includes a new Notefile name (sensors.qo), sets the sync field to true to instruct the Notecard to sync to Notehub immediately, and finally, sets the body to the sensor temperature and humidity. Add the following in loop right after the usbSerial commands to print out readings.\n\nCOPY\nJ *req = notecard.newRequest(\"note.add\");\nif (req != NULL)\n{\n  JAddStringToObject(req, \"file\", \"sensors.qo\");\n  JAddBoolToObject(req, \"sync\", true);\n  J *body = JAddObjectToObject(req, \"body\");\n  if (body)\n  {\n    JAddNumberToObject(body, \"temp\", temperature);\n    JAddNumberToObject(body, \"humidity\", humidity);\n  }\n  notecard.sendRequest(req);\n}\n\nEnter bootloader mode again and upload this code to your device. After reboot, the Serial monitor will update to display the response from the note.add request (the total number of Notes in the notefile) each time you add a new reading.\n\nNote\n\nConcerned about the size of note-arduino? You can communicate with the Notecard without using the library.\n\nView Data in Notehub\n\nOnce you start capturing readings, your Notecard will initiate a connection to Notehub and will start transferring", "start_char_idx": 8332, "end_char_idx": 9912, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a99c3e6a-2d01-4367-ab1d-3a3bdda54310": {"__data__": {"id_": "a99c3e6a-2d01-4367-ab1d-3a3bdda54310", "embedding": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "c6e6cbb714f1e4be15c287e804ea72f19b8be3c2864a772c906b41b424dbf62f"}, "2": {"node_id": "80e8226f-cc4b-4e42-8ad9-8a2c234ceac3", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "83a8c8ff2d43bb8070790154d9b4b5678734f9b56b4541cfafcd390ffa57c137"}, "3": {"node_id": "9ebc1eff-f13e-4f8d-9dd3-da3b79e7a8ab", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "13dbe31619281aa2eb5552ffeee759d9d758ab80ec7d0f3ed86f1371dbfc306a"}}, "hash": "32607e351dd6e0339d9c655e593c9336f91822a0c8cf9f35faef26b28dcab3b5", "text": "your Notecard will initiate a connection to Notehub and will start transferring Notes. Depending on signal strength and coverage in your area, it may take a few minutes for your Notecard to connect to Notehub and transfer data.\n\nReturn to notehub.io and open your project. You should see your notecard in the Devices view.\n\nNow, click on the Events left menu item. Once your sensor Notes start syncing, they'll show up here.\n\nUse Environment Variables\n\nEnvironment variables are a Notehub state and settings management feature that allow you to set variables in key-value pairs, and intelligently synchronize those values across devices and fleets of devices.\n\nIn this section you'll learn how environment variables work by creating a variable that determines how often your firmware should take sensor readings.\n\nSetting an Environment Variable\n\nEnvironment variables can be set in the Notehub UI or through the Notehub API. In this tutorial you'll learn how to set the values through the Notehub UI. If you'd like to instead set environment variables through the Notehub API, refer to the Environment Variable API.\n\nReturn to your Notehub project, go the the Devices page, and double click your device. You should see a screen that looks like this.\n\nClick the Environment tab.\n\nUnder the Device environment variables header, define a new environment variable named reading_interval and set its value to 30.\n\nNow that you have an environment variable set you're ready to use it in your app. Let's look at how that works.\n\nUsing Environment Variables in Firmware\n\nThe Notecard provides a set of requests for working with environment variables. The most common of these requests is env.get, which allows you to retrieve the value of an environment variable.\n\nComplete the steps below to use the env.get request to retrieve and use the reading_interval environment variable you set in Notehub.\n\nPlace the following new function at the bottom of your sketch.\n\nCOPY\n// This function assumes", "start_char_idx": 9877, "end_char_idx": 11863, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9ebc1eff-f13e-4f8d-9dd3-da3b79e7a8ab": {"__data__": {"id_": "9ebc1eff-f13e-4f8d-9dd3-da3b79e7a8ab", "embedding": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "c6e6cbb714f1e4be15c287e804ea72f19b8be3c2864a772c906b41b424dbf62f"}, "2": {"node_id": "a99c3e6a-2d01-4367-ab1d-3a3bdda54310", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "32607e351dd6e0339d9c655e593c9336f91822a0c8cf9f35faef26b28dcab3b5"}, "3": {"node_id": "b806cde6-8733-431b-8aaa-40e8bcfbc968", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "93f30f58517bb790efa093ab2b39acf5123eb3ff2ece73f8f37ff27fdaa35b34"}}, "hash": "13dbe31619281aa2eb5552ffeee759d9d758ab80ec7d0f3ed86f1371dbfc306a", "text": "at the bottom of your sketch.\n\nCOPY\n// This function assumes you\u2019ll set the reading_interval environment variable to\n// a positive integer. If the variable is not set, set to 0, or set to an invalid\n// type, this function returns a default value of 60.\nint getSensorInterval() {\n  int sensorIntervalSeconds = 60;\n  J *req = notecard.newRequest(\"env.get\");\n  if (req != NULL) {\n      JAddStringToObject(req, \"name\", \"reading_interval\");\n      J* rsp = notecard.requestAndResponse(req);\n      int readingIntervalEnvVar = atoi(JGetString(rsp, \"text\"));\n      if (readingIntervalEnvVar > 0) {\n        sensorIntervalSeconds = readingIntervalEnvVar;\n      }\n      notecard.deleteResponse(rsp);\n  }\n  return sensorIntervalSeconds;\n}\n\nNext, find the delay(15000) line at the bottom of your loop() function, and replace it with the code below.\n\nCOPY\nint sensorIntervalSeconds = getSensorInterval();\nserialDebug.print(\"Delaying \");\nserialDebug.print(sensorIntervalSeconds);\nserialDebug.println(\" seconds\");\ndelay(sensorIntervalSeconds * 1000);\n\nFinally, back in setup(), adjust your existing hub.set configuration to set the sync argument to true. When sync is true, the Notecard synchronizes inbound environment variable changes as soon as they're made in Notehub.\n\nCOPY\nJ *req = notecard.newRequest(\"hub.set\");\nJAddStringToObject(req, \"product\", productUID);\nJAddStringToObject(req, \"mode\", \"continuous\");\nJAddBoolToObject(req,", "start_char_idx": 11880, "end_char_idx": 13299, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b806cde6-8733-431b-8aaa-40e8bcfbc968": {"__data__": {"id_": "b806cde6-8733-431b-8aaa-40e8bcfbc968", "embedding": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "c6e6cbb714f1e4be15c287e804ea72f19b8be3c2864a772c906b41b424dbf62f"}, "2": {"node_id": "9ebc1eff-f13e-4f8d-9dd3-da3b79e7a8ab", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "13dbe31619281aa2eb5552ffeee759d9d758ab80ec7d0f3ed86f1371dbfc306a"}, "3": {"node_id": "b871011b-6e50-4520-aeb5-d65f2bb7a5e6", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "22b0313a01568a21bf23e8b3610db3def9cdca074d894acd6dbd4e3c9e40c339"}}, "hash": "93f30f58517bb790efa093ab2b39acf5123eb3ff2ece73f8f37ff27fdaa35b34", "text": "\"mode\", \"continuous\");\nJAddBoolToObject(req, \"sync\", true); // ADD THIS LINE\nnotecard.sendRequest(req);\n\nWith this code in place, your firmware now uses the reading_interval environment variable to determine how many seconds to delay in between sensor readings. If you flash this updated code to your device and open your serial monitor, you can see the device retrieving and using the reading_interval: 30 value you set in Notehub.\n\nAnd with that, you've used your first environment variable on your Notecard! To see the real power of environment variables in action, try returning to Notehub and updating your device's reading_interval with your serial monitor open. Your firmware will retrieve the updated value and start using it immediately.\n\nNote\n\nThis tutorial had you use several configuration settings are best used when you have your Notecard connected to mains power.\n\nIn the hub.set request, setting mode to \"continuous\" tells the Notecard to maintain an active network connection.\n\nIn the hub.set request, setting sync to true tells the Notecard to immediately synchronize inbound Notes and environment variables from Notehub.\n\nIn the note.add request, setting sync to true tells the Notecard to immediately synchronize all outbound Notes to Notehub.\n\nBecause each of these settings cause the Notecard to use more power, you may wish to disable them if you plan to transition your project to battery power. You can run the command below to put your Notecard into periodic mode with the sync argument turned off.\n\nCOPY\n{\n \"req\": \"hub.set\",\n \"mode\": \"periodic\",\n \"sync\": false,\n \"outbound\": 60,\n \"inbound\": 120\n}\n\nLearn more about optimizing the Notecard for low-power scenarios in Low Power Design.\n\nNext Steps\n\nCongratulations! You've successfully connected your Blues Swan to your Notecard and built a basic IoT", "start_char_idx": 13309, "end_char_idx": 15134, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b871011b-6e50-4520-aeb5-d65f2bb7a5e6": {"__data__": {"id_": "b871011b-6e50-4520-aeb5-d65f2bb7a5e6", "embedding": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9797d130-cad4-4110-9ebe-5ad7ac9af35d", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "c6e6cbb714f1e4be15c287e804ea72f19b8be3c2864a772c906b41b424dbf62f"}, "2": {"node_id": "b806cde6-8733-431b-8aaa-40e8bcfbc968", "node_type": null, "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}, "hash": "93f30f58517bb790efa093ab2b39acf5123eb3ff2ece73f8f37ff27fdaa35b34"}}, "hash": "22b0313a01568a21bf23e8b3610db3def9cdca074d894acd6dbd4e3c9e40c339", "text": "successfully connected your Blues Swan to your Notecard and built a basic IoT project.\n\nIf you're following the Blues Quickstart, next we recommend learning how to send (and visualize) your data in a cloud application:\n\nUse the Notecard to Send Data\nSet Up Your Microcontroller\nBuild Your First IoT App With Blues\nSend Data to Your Cloud\n\nAt any time, if you find yourself stuck, please reach out on the community forum.\n\nCan we improve this page? Send us feedback", "start_char_idx": 15100, "end_char_idx": 15564, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"9797d130-cad4-4110-9ebe-5ad7ac9af35d": {"node_ids": ["f44a40e7-7e5b-43de-9b96-358bdb4ee8fd", "93482350-f072-45d3-bf81-6eb08fff5897", "10f00125-eed2-44ba-b340-ba1283bb4782", "a60ee521-c39a-4413-85b9-3a8039a70530", "5c507dff-5a3f-4807-9761-63e9aa94a616", "80e8226f-cc4b-4e42-8ad9-8a2c234ceac3", "a99c3e6a-2d01-4367-ab1d-3a3bdda54310", "9ebc1eff-f13e-4f8d-9dd3-da3b79e7a8ab", "b806cde6-8733-431b-8aaa-40e8bcfbc968", "b871011b-6e50-4520-aeb5-d65f2bb7a5e6"], "metadata": {"title": "", "category": "Collecting Sensor Data", "url": "https://dev.blues.io/guides-and-tutorials/collecting-sensor-data/"}}}}